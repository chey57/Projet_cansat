
sonar.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005470  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005744  08005744  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005744  08005744  00015744  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800574c  0800574c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005750  08005750  00015750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005754  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000070  080057c4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000190  080057c4  00020190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012b02  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023bc  00000000  00000000  00032ba2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001050  00000000  00000000  00034f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00035fb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f080  00000000  00000000  00036f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001260b  00000000  00000000  00055fa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c7ce3  00000000  00000000  000685b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00130296  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e1c  00000000  00000000  001302e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005638 	.word	0x08005638

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08005638 	.word	0x08005638

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__aeabi_d2uiz>:
 8000a5c:	004a      	lsls	r2, r1, #1
 8000a5e:	d211      	bcs.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a64:	d211      	bcs.n	8000a8a <__aeabi_d2uiz+0x2e>
 8000a66:	d50d      	bpl.n	8000a84 <__aeabi_d2uiz+0x28>
 8000a68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a70:	d40e      	bmi.n	8000a90 <__aeabi_d2uiz+0x34>
 8000a72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a82:	4770      	bx	lr
 8000a84:	f04f 0000 	mov.w	r0, #0
 8000a88:	4770      	bx	lr
 8000a8a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a8e:	d102      	bne.n	8000a96 <__aeabi_d2uiz+0x3a>
 8000a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a94:	4770      	bx	lr
 8000a96:	f04f 0000 	mov.w	r0, #0
 8000a9a:	4770      	bx	lr

08000a9c <__aeabi_uldivmod>:
 8000a9c:	b953      	cbnz	r3, 8000ab4 <__aeabi_uldivmod+0x18>
 8000a9e:	b94a      	cbnz	r2, 8000ab4 <__aeabi_uldivmod+0x18>
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	bf08      	it	eq
 8000aa4:	2800      	cmpeq	r0, #0
 8000aa6:	bf1c      	itt	ne
 8000aa8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000aac:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ab0:	f000 b974 	b.w	8000d9c <__aeabi_idiv0>
 8000ab4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000abc:	f000 f806 	bl	8000acc <__udivmoddi4>
 8000ac0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac8:	b004      	add	sp, #16
 8000aca:	4770      	bx	lr

08000acc <__udivmoddi4>:
 8000acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad0:	9d08      	ldr	r5, [sp, #32]
 8000ad2:	4604      	mov	r4, r0
 8000ad4:	468e      	mov	lr, r1
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d14d      	bne.n	8000b76 <__udivmoddi4+0xaa>
 8000ada:	428a      	cmp	r2, r1
 8000adc:	4694      	mov	ip, r2
 8000ade:	d969      	bls.n	8000bb4 <__udivmoddi4+0xe8>
 8000ae0:	fab2 f282 	clz	r2, r2
 8000ae4:	b152      	cbz	r2, 8000afc <__udivmoddi4+0x30>
 8000ae6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aea:	f1c2 0120 	rsb	r1, r2, #32
 8000aee:	fa20 f101 	lsr.w	r1, r0, r1
 8000af2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000af6:	ea41 0e03 	orr.w	lr, r1, r3
 8000afa:	4094      	lsls	r4, r2
 8000afc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b00:	0c21      	lsrs	r1, r4, #16
 8000b02:	fbbe f6f8 	udiv	r6, lr, r8
 8000b06:	fa1f f78c 	uxth.w	r7, ip
 8000b0a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b0e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b12:	fb06 f107 	mul.w	r1, r6, r7
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d90a      	bls.n	8000b30 <__udivmoddi4+0x64>
 8000b1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b1e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000b22:	f080 811f 	bcs.w	8000d64 <__udivmoddi4+0x298>
 8000b26:	4299      	cmp	r1, r3
 8000b28:	f240 811c 	bls.w	8000d64 <__udivmoddi4+0x298>
 8000b2c:	3e02      	subs	r6, #2
 8000b2e:	4463      	add	r3, ip
 8000b30:	1a5b      	subs	r3, r3, r1
 8000b32:	b2a4      	uxth	r4, r4
 8000b34:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b38:	fb08 3310 	mls	r3, r8, r0, r3
 8000b3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b40:	fb00 f707 	mul.w	r7, r0, r7
 8000b44:	42a7      	cmp	r7, r4
 8000b46:	d90a      	bls.n	8000b5e <__udivmoddi4+0x92>
 8000b48:	eb1c 0404 	adds.w	r4, ip, r4
 8000b4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b50:	f080 810a 	bcs.w	8000d68 <__udivmoddi4+0x29c>
 8000b54:	42a7      	cmp	r7, r4
 8000b56:	f240 8107 	bls.w	8000d68 <__udivmoddi4+0x29c>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b62:	1be4      	subs	r4, r4, r7
 8000b64:	2600      	movs	r6, #0
 8000b66:	b11d      	cbz	r5, 8000b70 <__udivmoddi4+0xa4>
 8000b68:	40d4      	lsrs	r4, r2
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b70:	4631      	mov	r1, r6
 8000b72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d909      	bls.n	8000b8e <__udivmoddi4+0xc2>
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	f000 80ef 	beq.w	8000d5e <__udivmoddi4+0x292>
 8000b80:	2600      	movs	r6, #0
 8000b82:	e9c5 0100 	strd	r0, r1, [r5]
 8000b86:	4630      	mov	r0, r6
 8000b88:	4631      	mov	r1, r6
 8000b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8e:	fab3 f683 	clz	r6, r3
 8000b92:	2e00      	cmp	r6, #0
 8000b94:	d14a      	bne.n	8000c2c <__udivmoddi4+0x160>
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xd4>
 8000b9a:	4282      	cmp	r2, r0
 8000b9c:	f200 80f9 	bhi.w	8000d92 <__udivmoddi4+0x2c6>
 8000ba0:	1a84      	subs	r4, r0, r2
 8000ba2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	469e      	mov	lr, r3
 8000baa:	2d00      	cmp	r5, #0
 8000bac:	d0e0      	beq.n	8000b70 <__udivmoddi4+0xa4>
 8000bae:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bb2:	e7dd      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000bb4:	b902      	cbnz	r2, 8000bb8 <__udivmoddi4+0xec>
 8000bb6:	deff      	udf	#255	; 0xff
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	2a00      	cmp	r2, #0
 8000bbe:	f040 8092 	bne.w	8000ce6 <__udivmoddi4+0x21a>
 8000bc2:	eba1 010c 	sub.w	r1, r1, ip
 8000bc6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bca:	fa1f fe8c 	uxth.w	lr, ip
 8000bce:	2601      	movs	r6, #1
 8000bd0:	0c20      	lsrs	r0, r4, #16
 8000bd2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bd6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bda:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bde:	fb0e f003 	mul.w	r0, lr, r3
 8000be2:	4288      	cmp	r0, r1
 8000be4:	d908      	bls.n	8000bf8 <__udivmoddi4+0x12c>
 8000be6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bea:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000bee:	d202      	bcs.n	8000bf6 <__udivmoddi4+0x12a>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f200 80cb 	bhi.w	8000d8c <__udivmoddi4+0x2c0>
 8000bf6:	4643      	mov	r3, r8
 8000bf8:	1a09      	subs	r1, r1, r0
 8000bfa:	b2a4      	uxth	r4, r4
 8000bfc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c00:	fb07 1110 	mls	r1, r7, r0, r1
 8000c04:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c08:	fb0e fe00 	mul.w	lr, lr, r0
 8000c0c:	45a6      	cmp	lr, r4
 8000c0e:	d908      	bls.n	8000c22 <__udivmoddi4+0x156>
 8000c10:	eb1c 0404 	adds.w	r4, ip, r4
 8000c14:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c18:	d202      	bcs.n	8000c20 <__udivmoddi4+0x154>
 8000c1a:	45a6      	cmp	lr, r4
 8000c1c:	f200 80bb 	bhi.w	8000d96 <__udivmoddi4+0x2ca>
 8000c20:	4608      	mov	r0, r1
 8000c22:	eba4 040e 	sub.w	r4, r4, lr
 8000c26:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c2a:	e79c      	b.n	8000b66 <__udivmoddi4+0x9a>
 8000c2c:	f1c6 0720 	rsb	r7, r6, #32
 8000c30:	40b3      	lsls	r3, r6
 8000c32:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c36:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c3a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c3e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c42:	431c      	orrs	r4, r3
 8000c44:	40f9      	lsrs	r1, r7
 8000c46:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c4a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c4e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c52:	0c20      	lsrs	r0, r4, #16
 8000c54:	fa1f fe8c 	uxth.w	lr, ip
 8000c58:	fb09 1118 	mls	r1, r9, r8, r1
 8000c5c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c60:	fb08 f00e 	mul.w	r0, r8, lr
 8000c64:	4288      	cmp	r0, r1
 8000c66:	fa02 f206 	lsl.w	r2, r2, r6
 8000c6a:	d90b      	bls.n	8000c84 <__udivmoddi4+0x1b8>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000c74:	f080 8088 	bcs.w	8000d88 <__udivmoddi4+0x2bc>
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	f240 8085 	bls.w	8000d88 <__udivmoddi4+0x2bc>
 8000c7e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c82:	4461      	add	r1, ip
 8000c84:	1a09      	subs	r1, r1, r0
 8000c86:	b2a4      	uxth	r4, r4
 8000c88:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c8c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c90:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c98:	458e      	cmp	lr, r1
 8000c9a:	d908      	bls.n	8000cae <__udivmoddi4+0x1e2>
 8000c9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca0:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000ca4:	d26c      	bcs.n	8000d80 <__udivmoddi4+0x2b4>
 8000ca6:	458e      	cmp	lr, r1
 8000ca8:	d96a      	bls.n	8000d80 <__udivmoddi4+0x2b4>
 8000caa:	3802      	subs	r0, #2
 8000cac:	4461      	add	r1, ip
 8000cae:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cb2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cb6:	eba1 010e 	sub.w	r1, r1, lr
 8000cba:	42a1      	cmp	r1, r4
 8000cbc:	46c8      	mov	r8, r9
 8000cbe:	46a6      	mov	lr, r4
 8000cc0:	d356      	bcc.n	8000d70 <__udivmoddi4+0x2a4>
 8000cc2:	d053      	beq.n	8000d6c <__udivmoddi4+0x2a0>
 8000cc4:	b15d      	cbz	r5, 8000cde <__udivmoddi4+0x212>
 8000cc6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cca:	eb61 010e 	sbc.w	r1, r1, lr
 8000cce:	fa01 f707 	lsl.w	r7, r1, r7
 8000cd2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cd6:	40f1      	lsrs	r1, r6
 8000cd8:	431f      	orrs	r7, r3
 8000cda:	e9c5 7100 	strd	r7, r1, [r5]
 8000cde:	2600      	movs	r6, #0
 8000ce0:	4631      	mov	r1, r6
 8000ce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ce6:	f1c2 0320 	rsb	r3, r2, #32
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cf4:	4091      	lsls	r1, r2
 8000cf6:	4301      	orrs	r1, r0
 8000cf8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfc:	fa1f fe8c 	uxth.w	lr, ip
 8000d00:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d04:	fb07 3610 	mls	r6, r7, r0, r3
 8000d08:	0c0b      	lsrs	r3, r1, #16
 8000d0a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d0e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d12:	429e      	cmp	r6, r3
 8000d14:	fa04 f402 	lsl.w	r4, r4, r2
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x260>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000d22:	d22f      	bcs.n	8000d84 <__udivmoddi4+0x2b8>
 8000d24:	429e      	cmp	r6, r3
 8000d26:	d92d      	bls.n	8000d84 <__udivmoddi4+0x2b8>
 8000d28:	3802      	subs	r0, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1b9b      	subs	r3, r3, r6
 8000d2e:	b289      	uxth	r1, r1
 8000d30:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d34:	fb07 3316 	mls	r3, r7, r6, r3
 8000d38:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d3c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d40:	428b      	cmp	r3, r1
 8000d42:	d908      	bls.n	8000d56 <__udivmoddi4+0x28a>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000d4c:	d216      	bcs.n	8000d7c <__udivmoddi4+0x2b0>
 8000d4e:	428b      	cmp	r3, r1
 8000d50:	d914      	bls.n	8000d7c <__udivmoddi4+0x2b0>
 8000d52:	3e02      	subs	r6, #2
 8000d54:	4461      	add	r1, ip
 8000d56:	1ac9      	subs	r1, r1, r3
 8000d58:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d5c:	e738      	b.n	8000bd0 <__udivmoddi4+0x104>
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e705      	b.n	8000b70 <__udivmoddi4+0xa4>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e3      	b.n	8000b30 <__udivmoddi4+0x64>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6f8      	b.n	8000b5e <__udivmoddi4+0x92>
 8000d6c:	454b      	cmp	r3, r9
 8000d6e:	d2a9      	bcs.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d70:	ebb9 0802 	subs.w	r8, r9, r2
 8000d74:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7a3      	b.n	8000cc4 <__udivmoddi4+0x1f8>
 8000d7c:	4646      	mov	r6, r8
 8000d7e:	e7ea      	b.n	8000d56 <__udivmoddi4+0x28a>
 8000d80:	4620      	mov	r0, r4
 8000d82:	e794      	b.n	8000cae <__udivmoddi4+0x1e2>
 8000d84:	4640      	mov	r0, r8
 8000d86:	e7d1      	b.n	8000d2c <__udivmoddi4+0x260>
 8000d88:	46d0      	mov	r8, sl
 8000d8a:	e77b      	b.n	8000c84 <__udivmoddi4+0x1b8>
 8000d8c:	3b02      	subs	r3, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	e732      	b.n	8000bf8 <__udivmoddi4+0x12c>
 8000d92:	4630      	mov	r0, r6
 8000d94:	e709      	b.n	8000baa <__udivmoddi4+0xde>
 8000d96:	4464      	add	r4, ip
 8000d98:	3802      	subs	r0, #2
 8000d9a:	e742      	b.n	8000c22 <__udivmoddi4+0x156>

08000d9c <__aeabi_idiv0>:
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int __io_putchar(int ch) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000da8:	1d39      	adds	r1, r7, #4
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dae:	2201      	movs	r2, #1
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <__io_putchar+0x20>)
 8000db2:	f002 fe67 	bl	8003a84 <HAL_UART_Transmit>
return ch;
 8000db6:	687b      	ldr	r3, [r7, #4]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3708      	adds	r7, #8
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	2000008c 	.word	0x2000008c

08000dc4 <delay>:

void delay(uint16_t time)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8000dce:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <delay+0x30>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1) < time);
 8000dd6:	bf00      	nop
 8000dd8:	4b06      	ldr	r3, [pc, #24]	; (8000df4 <delay+0x30>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000dde:	88fb      	ldrh	r3, [r7, #6]
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d3f9      	bcc.n	8000dd8 <delay+0x14>
}
 8000de4:	bf00      	nop
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	2000011c 	.word	0x2000011c

08000df8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7f1b      	ldrb	r3, [r3, #28]
 8000e04:	2b01      	cmp	r3, #1
 8000e06:	f040 8089 	bne.w	8000f1c <HAL_TIM_IC_CaptureCallback+0x124>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8000e0a:	4b49      	ldr	r3, [pc, #292]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e0c:	781b      	ldrb	r3, [r3, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d11a      	bne.n	8000e48 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8000e12:	2100      	movs	r1, #0
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f002 fadd 	bl	80033d4 <HAL_TIM_ReadCapturedValue>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	4a45      	ldr	r2, [pc, #276]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e1e:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8000e20:	4b43      	ldr	r3, [pc, #268]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e22:	2201      	movs	r2, #1
 8000e24:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	6a1a      	ldr	r2, [r3, #32]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	f022 020a 	bic.w	r2, r2, #10
 8000e34:	621a      	str	r2, [r3, #32]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	6a1a      	ldr	r2, [r3, #32]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f042 0202 	orr.w	r2, r2, #2
 8000e44:	621a      	str	r2, [r3, #32]
						__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);

						printf(" %u dans l'interruption \r\n", (int)(Distance));
					}
				}
			}
 8000e46:	e069      	b.n	8000f1c <HAL_TIM_IC_CaptureCallback+0x124>
		else if (Is_First_Captured==1)   // if the first is already captured
 8000e48:	4b39      	ldr	r3, [pc, #228]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000e4a:	781b      	ldrb	r3, [r3, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d165      	bne.n	8000f1c <HAL_TIM_IC_CaptureCallback+0x124>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8000e50:	2100      	movs	r1, #0
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f002 fabe 	bl	80033d4 <HAL_TIM_ReadCapturedValue>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	4a37      	ldr	r2, [pc, #220]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e5c:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2200      	movs	r2, #0
 8000e64:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 8000e66:	4b34      	ldr	r3, [pc, #208]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	4b32      	ldr	r3, [pc, #200]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d907      	bls.n	8000e82 <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 8000e72:	4b31      	ldr	r3, [pc, #196]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	4b2f      	ldr	r3, [pc, #188]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	4a2f      	ldr	r2, [pc, #188]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000e7e:	6013      	str	r3, [r2, #0]
 8000e80:	e00f      	b.n	8000ea2 <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 8000e82:	4b2c      	ldr	r3, [pc, #176]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	4b2c      	ldr	r3, [pc, #176]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	429a      	cmp	r2, r3
 8000e8c:	d909      	bls.n	8000ea2 <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8000e8e:	4b2a      	ldr	r3, [pc, #168]	; (8000f38 <HAL_TIM_IC_CaptureCallback+0x140>)
 8000e90:	681a      	ldr	r2, [r3, #0]
 8000e92:	4b28      	ldr	r3, [pc, #160]	; (8000f34 <HAL_TIM_IC_CaptureCallback+0x13c>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	1ad3      	subs	r3, r2, r3
 8000e98:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000e9c:	33ff      	adds	r3, #255	; 0xff
 8000e9e:	4a27      	ldr	r2, [pc, #156]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ea0:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 8000ea2:	4b26      	ldr	r3, [pc, #152]	; (8000f3c <HAL_TIM_IC_CaptureCallback+0x144>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff fb4c 	bl	8000544 <__aeabi_ui2d>
 8000eac:	a31e      	add	r3, pc, #120	; (adr r3, 8000f28 <HAL_TIM_IC_CaptureCallback+0x130>)
 8000eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb2:	f7ff fbc1 	bl	8000638 <__aeabi_dmul>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	460b      	mov	r3, r1
 8000eba:	4610      	mov	r0, r2
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f04f 0200 	mov.w	r2, #0
 8000ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ec6:	f7ff fce1 	bl	800088c <__aeabi_ddiv>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	4610      	mov	r0, r2
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	f7ff fdc3 	bl	8000a5c <__aeabi_d2uiz>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	b2da      	uxtb	r2, r3
 8000eda:	4b19      	ldr	r3, [pc, #100]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000edc:	701a      	strb	r2, [r3, #0]
						Is_First_Captured = 0; // set it back to false
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_TIM_IC_CaptureCallback+0x138>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	6a1a      	ldr	r2, [r3, #32]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f022 020a 	bic.w	r2, r2, #10
 8000ef2:	621a      	str	r2, [r3, #32]
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6a12      	ldr	r2, [r2, #32]
 8000efe:	621a      	str	r2, [r3, #32]
						__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000f00:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_TIM_IC_CaptureCallback+0x14c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0202 	bic.w	r2, r2, #2
 8000f0e:	60da      	str	r2, [r3, #12]
						printf(" %u dans l'interruption \r\n", (int)(Distance));
 8000f10:	4b0b      	ldr	r3, [pc, #44]	; (8000f40 <HAL_TIM_IC_CaptureCallback+0x148>)
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	480c      	ldr	r0, [pc, #48]	; (8000f48 <HAL_TIM_IC_CaptureCallback+0x150>)
 8000f18:	f003 fc00 	bl	800471c <iprintf>
			}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	f3af 8000 	nop.w
 8000f28:	b020c49c 	.word	0xb020c49c
 8000f2c:	3fa16872 	.word	0x3fa16872
 8000f30:	20000174 	.word	0x20000174
 8000f34:	20000168 	.word	0x20000168
 8000f38:	2000016c 	.word	0x2000016c
 8000f3c:	20000170 	.word	0x20000170
 8000f40:	20000175 	.word	0x20000175
 8000f44:	2000011c 	.word	0x2000011c
 8000f48:	08005650 	.word	0x08005650

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f50:	f000 fb75 	bl	800163e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f54:	f000 f828 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f58:	f000 f916 	bl	8001188 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000f5c:	f000 f870 	bl	8001040 <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000f60:	f000 f8b8 	bl	80010d4 <MX_TIM1_Init>


// Le sonar est opérationnel, il devrait envoyer des
// signaux à intervalle de temps regulier

  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000f64:	2100      	movs	r1, #0
 8000f66:	480e      	ldr	r0, [pc, #56]	; (8000fa0 <main+0x54>)
 8000f68:	f001 fed6 	bl	8002d18 <HAL_TIM_IC_Start_IT>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2101      	movs	r1, #1
 8000f70:	480c      	ldr	r0, [pc, #48]	; (8000fa4 <main+0x58>)
 8000f72:	f000 fe89 	bl	8001c88 <HAL_GPIO_WritePin>
	  delay(10);
 8000f76:	200a      	movs	r0, #10
 8000f78:	f7ff ff24 	bl	8000dc4 <delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4808      	ldr	r0, [pc, #32]	; (8000fa4 <main+0x58>)
 8000f82:	f000 fe81 	bl	8001c88 <HAL_GPIO_WritePin>

	  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 8000f86:	4b06      	ldr	r3, [pc, #24]	; (8000fa0 <main+0x54>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	68da      	ldr	r2, [r3, #12]
 8000f8c:	4b04      	ldr	r3, [pc, #16]	; (8000fa0 <main+0x54>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 0202 	orr.w	r2, r2, #2
 8000f94:	60da      	str	r2, [r3, #12]
	  HAL_Delay(200);
 8000f96:	20c8      	movs	r0, #200	; 0xc8
 8000f98:	f000 fbc2 	bl	8001720 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000f9c:	e7e6      	b.n	8000f6c <main+0x20>
 8000f9e:	bf00      	nop
 8000fa0:	2000011c 	.word	0x2000011c
 8000fa4:	48000800 	.word	0x48000800

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0318 	add.w	r3, r7, #24
 8000fb2:	2238      	movs	r2, #56	; 0x38
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f003 fba8 	bl	800470c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	1d3b      	adds	r3, r7, #4
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
 8000fc6:	60da      	str	r2, [r3, #12]
 8000fc8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000fca:	2000      	movs	r0, #0
 8000fcc:	f000 fe74 	bl	8001cb8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fda:	2340      	movs	r3, #64	; 0x40
 8000fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fde:	2302      	movs	r3, #2
 8000fe0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000fe6:	2304      	movs	r3, #4
 8000fe8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000fea:	2355      	movs	r3, #85	; 0x55
 8000fec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0318 	add.w	r3, r7, #24
 8000ffe:	4618      	mov	r0, r3
 8001000:	f000 ff0e 	bl	8001e20 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800100a:	f000 f937 	bl	800127c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001012:	2303      	movs	r3, #3
 8001014:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001022:	1d3b      	adds	r3, r7, #4
 8001024:	2104      	movs	r1, #4
 8001026:	4618      	mov	r0, r3
 8001028:	f001 fa12 	bl	8002450 <HAL_RCC_ClockConfig>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001032:	f000 f923 	bl	800127c <Error_Handler>
  }
}
 8001036:	bf00      	nop
 8001038:	3750      	adds	r7, #80	; 0x50
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
	...

08001040 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001046:	4a22      	ldr	r2, [pc, #136]	; (80010d0 <MX_LPUART1_UART_Init+0x90>)
 8001048:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800104a:	4b20      	ldr	r3, [pc, #128]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 800104c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001050:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001054:	2200      	movs	r2, #0
 8001056:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001058:	4b1c      	ldr	r3, [pc, #112]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 800105a:	2200      	movs	r2, #0
 800105c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800105e:	4b1b      	ldr	r3, [pc, #108]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001064:	4b19      	ldr	r3, [pc, #100]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001066:	220c      	movs	r2, #12
 8001068:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800106a:	4b18      	ldr	r3, [pc, #96]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 800106c:	2200      	movs	r2, #0
 800106e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001070:	4b16      	ldr	r3, [pc, #88]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001072:	2200      	movs	r2, #0
 8001074:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001076:	4b15      	ldr	r3, [pc, #84]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001078:	2200      	movs	r2, #0
 800107a:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800107c:	4b13      	ldr	r3, [pc, #76]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 800107e:	2200      	movs	r2, #0
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8001082:	4812      	ldr	r0, [pc, #72]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001084:	f002 fcae 	bl	80039e4 <HAL_UART_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800108e:	f000 f8f5 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001092:	2100      	movs	r1, #0
 8001094:	480d      	ldr	r0, [pc, #52]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 8001096:	f003 fa45 	bl	8004524 <HAL_UARTEx_SetTxFifoThreshold>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d001      	beq.n	80010a4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80010a0:	f000 f8ec 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a4:	2100      	movs	r1, #0
 80010a6:	4809      	ldr	r0, [pc, #36]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 80010a8:	f003 fa7a 	bl	80045a0 <HAL_UARTEx_SetRxFifoThreshold>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80010b2:	f000 f8e3 	bl	800127c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_LPUART1_UART_Init+0x8c>)
 80010b8:	f003 f9fb 	bl	80044b2 <HAL_UARTEx_DisableFifoMode>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80010c2:	f000 f8db 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	2000008c 	.word	0x2000008c
 80010d0:	40008000 	.word	0x40008000

080010d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b088      	sub	sp, #32
 80010d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010da:	f107 0314 	add.w	r3, r7, #20
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010e6:	1d3b      	adds	r3, r7, #4
 80010e8:	2200      	movs	r2, #0
 80010ea:	601a      	str	r2, [r3, #0]
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	609a      	str	r2, [r3, #8]
 80010f0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010f2:	4b23      	ldr	r3, [pc, #140]	; (8001180 <MX_TIM1_Init+0xac>)
 80010f4:	4a23      	ldr	r2, [pc, #140]	; (8001184 <MX_TIM1_Init+0xb0>)
 80010f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 80010f8:	4b21      	ldr	r3, [pc, #132]	; (8001180 <MX_TIM1_Init+0xac>)
 80010fa:	22a9      	movs	r2, #169	; 0xa9
 80010fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010fe:	4b20      	ldr	r3, [pc, #128]	; (8001180 <MX_TIM1_Init+0xac>)
 8001100:	2200      	movs	r2, #0
 8001102:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001104:	4b1e      	ldr	r3, [pc, #120]	; (8001180 <MX_TIM1_Init+0xac>)
 8001106:	f240 32e7 	movw	r2, #999	; 0x3e7
 800110a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800110c:	4b1c      	ldr	r3, [pc, #112]	; (8001180 <MX_TIM1_Init+0xac>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001112:	4b1b      	ldr	r3, [pc, #108]	; (8001180 <MX_TIM1_Init+0xac>)
 8001114:	2200      	movs	r2, #0
 8001116:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001118:	4b19      	ldr	r3, [pc, #100]	; (8001180 <MX_TIM1_Init+0xac>)
 800111a:	2200      	movs	r2, #0
 800111c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800111e:	4818      	ldr	r0, [pc, #96]	; (8001180 <MX_TIM1_Init+0xac>)
 8001120:	f001 fda2 	bl	8002c68 <HAL_TIM_IC_Init>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800112a:	f000 f8a7 	bl	800127c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800112e:	2300      	movs	r3, #0
 8001130:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	480f      	ldr	r0, [pc, #60]	; (8001180 <MX_TIM1_Init+0xac>)
 8001142:	f002 fb87 	bl	8003854 <HAL_TIMEx_MasterConfigSynchronization>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800114c:	f000 f896 	bl	800127c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001150:	2300      	movs	r3, #0
 8001152:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001154:	2301      	movs	r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	4619      	mov	r1, r3
 8001166:	4806      	ldr	r0, [pc, #24]	; (8001180 <MX_TIM1_Init+0xac>)
 8001168:	f002 f897 	bl	800329a <HAL_TIM_IC_ConfigChannel>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 8001172:	f000 f883 	bl	800127c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	3720      	adds	r7, #32
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	2000011c 	.word	0x2000011c
 8001184:	40012c00 	.word	0x40012c00

08001188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	; 0x28
 800118c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800118e:	f107 0314 	add.w	r3, r7, #20
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]
 8001198:	609a      	str	r2, [r3, #8]
 800119a:	60da      	str	r2, [r3, #12]
 800119c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800119e:	4b35      	ldr	r3, [pc, #212]	; (8001274 <MX_GPIO_Init+0xec>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a2:	4a34      	ldr	r2, [pc, #208]	; (8001274 <MX_GPIO_Init+0xec>)
 80011a4:	f043 0304 	orr.w	r3, r3, #4
 80011a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011aa:	4b32      	ldr	r3, [pc, #200]	; (8001274 <MX_GPIO_Init+0xec>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ae:	f003 0304 	and.w	r3, r3, #4
 80011b2:	613b      	str	r3, [r7, #16]
 80011b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011b6:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <MX_GPIO_Init+0xec>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ba:	4a2e      	ldr	r2, [pc, #184]	; (8001274 <MX_GPIO_Init+0xec>)
 80011bc:	f043 0320 	orr.w	r3, r3, #32
 80011c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <MX_GPIO_Init+0xec>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	f003 0320 	and.w	r3, r3, #32
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ce:	4b29      	ldr	r3, [pc, #164]	; (8001274 <MX_GPIO_Init+0xec>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	4a28      	ldr	r2, [pc, #160]	; (8001274 <MX_GPIO_Init+0xec>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_GPIO_Init+0xec>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_GPIO_Init+0xec>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	4a22      	ldr	r2, [pc, #136]	; (8001274 <MX_GPIO_Init+0xec>)
 80011ec:	f043 0302 	orr.w	r3, r3, #2
 80011f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011f2:	4b20      	ldr	r3, [pc, #128]	; (8001274 <MX_GPIO_Init+0xec>)
 80011f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f6:	f003 0302 	and.w	r3, r3, #2
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80011fe:	2200      	movs	r2, #0
 8001200:	2101      	movs	r1, #1
 8001202:	481d      	ldr	r0, [pc, #116]	; (8001278 <MX_GPIO_Init+0xf0>)
 8001204:	f000 fd40 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001208:	2200      	movs	r2, #0
 800120a:	2120      	movs	r1, #32
 800120c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001210:	f000 fd3a 	bl	8001c88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001218:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800121a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800121e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <MX_GPIO_Init+0xf0>)
 800122c:	f000 fbaa 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001230:	2301      	movs	r3, #1
 8001232:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001234:	2301      	movs	r3, #1
 8001236:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123c:	2300      	movs	r3, #0
 800123e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_GPIO_Init+0xf0>)
 8001248:	f000 fb9c 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800124c:	2320      	movs	r3, #32
 800124e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800125c:	f107 0314 	add.w	r3, r7, #20
 8001260:	4619      	mov	r1, r3
 8001262:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001266:	f000 fb8d 	bl	8001984 <HAL_GPIO_Init>

}
 800126a:	bf00      	nop
 800126c:	3728      	adds	r7, #40	; 0x28
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40021000 	.word	0x40021000
 8001278:	48000800 	.word	0x48000800

0800127c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001280:	b672      	cpsid	i
}
 8001282:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001284:	e7fe      	b.n	8001284 <Error_Handler+0x8>
	...

08001288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800128e:	4b0f      	ldr	r3, [pc, #60]	; (80012cc <HAL_MspInit+0x44>)
 8001290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <HAL_MspInit+0x44>)
 8001294:	f043 0301 	orr.w	r3, r3, #1
 8001298:	6613      	str	r3, [r2, #96]	; 0x60
 800129a:	4b0c      	ldr	r3, [pc, #48]	; (80012cc <HAL_MspInit+0x44>)
 800129c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800129e:	f003 0301 	and.w	r3, r3, #1
 80012a2:	607b      	str	r3, [r7, #4]
 80012a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012a6:	4b09      	ldr	r3, [pc, #36]	; (80012cc <HAL_MspInit+0x44>)
 80012a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012aa:	4a08      	ldr	r2, [pc, #32]	; (80012cc <HAL_MspInit+0x44>)
 80012ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012b0:	6593      	str	r3, [r2, #88]	; 0x58
 80012b2:	4b06      	ldr	r3, [pc, #24]	; (80012cc <HAL_MspInit+0x44>)
 80012b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012ba:	603b      	str	r3, [r7, #0]
 80012bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012be:	f000 fd9f 	bl	8001e00 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	40021000 	.word	0x40021000

080012d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b09a      	sub	sp, #104	; 0x68
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012e8:	f107 0310 	add.w	r3, r7, #16
 80012ec:	2244      	movs	r2, #68	; 0x44
 80012ee:	2100      	movs	r1, #0
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fa0b 	bl	800470c <memset>
  if(huart->Instance==LPUART1)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a1f      	ldr	r2, [pc, #124]	; (8001378 <HAL_UART_MspInit+0xa8>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	d136      	bne.n	800136e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001300:	2320      	movs	r3, #32
 8001302:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001304:	2300      	movs	r3, #0
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001308:	f107 0310 	add.w	r3, r7, #16
 800130c:	4618      	mov	r0, r3
 800130e:	f001 fabb 	bl	8002888 <HAL_RCCEx_PeriphCLKConfig>
 8001312:	4603      	mov	r3, r0
 8001314:	2b00      	cmp	r3, #0
 8001316:	d001      	beq.n	800131c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001318:	f7ff ffb0 	bl	800127c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800131c:	4b17      	ldr	r3, [pc, #92]	; (800137c <HAL_UART_MspInit+0xac>)
 800131e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001320:	4a16      	ldr	r2, [pc, #88]	; (800137c <HAL_UART_MspInit+0xac>)
 8001322:	f043 0301 	orr.w	r3, r3, #1
 8001326:	65d3      	str	r3, [r2, #92]	; 0x5c
 8001328:	4b14      	ldr	r3, [pc, #80]	; (800137c <HAL_UART_MspInit+0xac>)
 800132a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800132c:	f003 0301 	and.w	r3, r3, #1
 8001330:	60fb      	str	r3, [r7, #12]
 8001332:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <HAL_UART_MspInit+0xac>)
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	4a10      	ldr	r2, [pc, #64]	; (800137c <HAL_UART_MspInit+0xac>)
 800133a:	f043 0301 	orr.w	r3, r3, #1
 800133e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001340:	4b0e      	ldr	r3, [pc, #56]	; (800137c <HAL_UART_MspInit+0xac>)
 8001342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001344:	f003 0301 	and.w	r3, r3, #1
 8001348:	60bb      	str	r3, [r7, #8]
 800134a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800134c:	230c      	movs	r3, #12
 800134e:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800135c:	230c      	movs	r3, #12
 800135e:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f000 fb0b 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3768      	adds	r7, #104	; 0x68
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40008000 	.word	0x40008000
 800137c:	40021000 	.word	0x40021000

08001380 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b08a      	sub	sp, #40	; 0x28
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001388:	f107 0314 	add.w	r3, r7, #20
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a1c      	ldr	r2, [pc, #112]	; (8001410 <HAL_TIM_IC_MspInit+0x90>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d131      	bne.n	8001406 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <HAL_TIM_IC_MspInit+0x94>)
 80013a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013a6:	4a1b      	ldr	r2, [pc, #108]	; (8001414 <HAL_TIM_IC_MspInit+0x94>)
 80013a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80013ac:	6613      	str	r3, [r2, #96]	; 0x60
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <HAL_TIM_IC_MspInit+0x94>)
 80013b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80013b6:	613b      	str	r3, [r7, #16]
 80013b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <HAL_TIM_IC_MspInit+0x94>)
 80013bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013be:	4a15      	ldr	r2, [pc, #84]	; (8001414 <HAL_TIM_IC_MspInit+0x94>)
 80013c0:	f043 0301 	orr.w	r3, r3, #1
 80013c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <HAL_TIM_IC_MspInit+0x94>)
 80013c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ca:	f003 0301 	and.w	r3, r3, #1
 80013ce:	60fb      	str	r3, [r7, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80013d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d8:	2302      	movs	r3, #2
 80013da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013dc:	2300      	movs	r3, #0
 80013de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e0:	2300      	movs	r3, #0
 80013e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013e4:	2306      	movs	r3, #6
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f2:	f000 fac7 	bl	8001984 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80013f6:	2200      	movs	r2, #0
 80013f8:	2100      	movs	r1, #0
 80013fa:	201b      	movs	r0, #27
 80013fc:	f000 fa8d 	bl	800191a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001400:	201b      	movs	r0, #27
 8001402:	f000 faa4 	bl	800194e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	3728      	adds	r7, #40	; 0x28
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40012c00 	.word	0x40012c00
 8001414:	40021000 	.word	0x40021000

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	e7fe      	b.n	800141c <NMI_Handler+0x4>

0800141e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800141e:	b480      	push	{r7}
 8001420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001422:	e7fe      	b.n	8001422 <HardFault_Handler+0x4>

08001424 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001428:	e7fe      	b.n	8001428 <MemManage_Handler+0x4>

0800142a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800142e:	e7fe      	b.n	800142e <BusFault_Handler+0x4>

08001430 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001434:	e7fe      	b.n	8001434 <UsageFault_Handler+0x4>

08001436 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001436:	b480      	push	{r7}
 8001438:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr

08001452 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001452:	b480      	push	{r7}
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr

08001460 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001464:	f000 f93e 	bl	80016e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001470:	4802      	ldr	r0, [pc, #8]	; (800147c <TIM1_CC_IRQHandler+0x10>)
 8001472:	f001 fd93 	bl	8002f9c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000011c 	.word	0x2000011c

08001480 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b086      	sub	sp, #24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148c:	2300      	movs	r3, #0
 800148e:	617b      	str	r3, [r7, #20]
 8001490:	e00a      	b.n	80014a8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001492:	f3af 8000 	nop.w
 8001496:	4601      	mov	r1, r0
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	1c5a      	adds	r2, r3, #1
 800149c:	60ba      	str	r2, [r7, #8]
 800149e:	b2ca      	uxtb	r2, r1
 80014a0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	697a      	ldr	r2, [r7, #20]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	dbf0      	blt.n	8001492 <_read+0x12>
	}

return len;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3718      	adds	r7, #24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}

080014ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b086      	sub	sp, #24
 80014be:	af00      	add	r7, sp, #0
 80014c0:	60f8      	str	r0, [r7, #12]
 80014c2:	60b9      	str	r1, [r7, #8]
 80014c4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	617b      	str	r3, [r7, #20]
 80014ca:	e009      	b.n	80014e0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	1c5a      	adds	r2, r3, #1
 80014d0:	60ba      	str	r2, [r7, #8]
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff fc63 	bl	8000da0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	3301      	adds	r3, #1
 80014de:	617b      	str	r3, [r7, #20]
 80014e0:	697a      	ldr	r2, [r7, #20]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	dbf1      	blt.n	80014cc <_write+0x12>
	}
	return len;
 80014e8:	687b      	ldr	r3, [r7, #4]
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <_close>:

int _close(int file)
{
 80014f2:	b480      	push	{r7}
 80014f4:	b083      	sub	sp, #12
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	6078      	str	r0, [r7, #4]
	return -1;
 80014fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80014fe:	4618      	mov	r0, r3
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr

0800150a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800150a:	b480      	push	{r7}
 800150c:	b083      	sub	sp, #12
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
 8001512:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800151a:	605a      	str	r2, [r3, #4]
	return 0;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	370c      	adds	r7, #12
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr

0800152a <_isatty>:

int _isatty(int file)
{
 800152a:	b480      	push	{r7}
 800152c:	b083      	sub	sp, #12
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
	return 1;
 8001532:	2301      	movs	r3, #1
}
 8001534:	4618      	mov	r0, r3
 8001536:	370c      	adds	r7, #12
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	60f8      	str	r0, [r7, #12]
 8001548:	60b9      	str	r1, [r7, #8]
 800154a:	607a      	str	r2, [r7, #4]
	return 0;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3714      	adds	r7, #20
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b086      	sub	sp, #24
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001564:	4a14      	ldr	r2, [pc, #80]	; (80015b8 <_sbrk+0x5c>)
 8001566:	4b15      	ldr	r3, [pc, #84]	; (80015bc <_sbrk+0x60>)
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001570:	4b13      	ldr	r3, [pc, #76]	; (80015c0 <_sbrk+0x64>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d102      	bne.n	800157e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001578:	4b11      	ldr	r3, [pc, #68]	; (80015c0 <_sbrk+0x64>)
 800157a:	4a12      	ldr	r2, [pc, #72]	; (80015c4 <_sbrk+0x68>)
 800157c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800157e:	4b10      	ldr	r3, [pc, #64]	; (80015c0 <_sbrk+0x64>)
 8001580:	681a      	ldr	r2, [r3, #0]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	429a      	cmp	r2, r3
 800158a:	d207      	bcs.n	800159c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800158c:	f003 f894 	bl	80046b8 <__errno>
 8001590:	4603      	mov	r3, r0
 8001592:	220c      	movs	r2, #12
 8001594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800159a:	e009      	b.n	80015b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800159c:	4b08      	ldr	r3, [pc, #32]	; (80015c0 <_sbrk+0x64>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015a2:	4b07      	ldr	r3, [pc, #28]	; (80015c0 <_sbrk+0x64>)
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4413      	add	r3, r2
 80015aa:	4a05      	ldr	r2, [pc, #20]	; (80015c0 <_sbrk+0x64>)
 80015ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ae:	68fb      	ldr	r3, [r7, #12]
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3718      	adds	r7, #24
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	20008000 	.word	0x20008000
 80015bc:	00000400 	.word	0x00000400
 80015c0:	20000178 	.word	0x20000178
 80015c4:	20000190 	.word	0x20000190

080015c8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <SystemInit+0x20>)
 80015ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015d2:	4a05      	ldr	r2, [pc, #20]	; (80015e8 <SystemInit+0x20>)
 80015d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015ee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015f0:	480d      	ldr	r0, [pc, #52]	; (8001628 <LoopForever+0x6>)
  ldr r1, =_edata
 80015f2:	490e      	ldr	r1, [pc, #56]	; (800162c <LoopForever+0xa>)
  ldr r2, =_sidata
 80015f4:	4a0e      	ldr	r2, [pc, #56]	; (8001630 <LoopForever+0xe>)
  movs r3, #0
 80015f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80015f8:	e002      	b.n	8001600 <LoopCopyDataInit>

080015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015fe:	3304      	adds	r3, #4

08001600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001604:	d3f9      	bcc.n	80015fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001606:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001608:	4c0b      	ldr	r4, [pc, #44]	; (8001638 <LoopForever+0x16>)
  movs r3, #0
 800160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800160c:	e001      	b.n	8001612 <LoopFillZerobss>

0800160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001610:	3204      	adds	r2, #4

08001612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001614:	d3fb      	bcc.n	800160e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001616:	f7ff ffd7 	bl	80015c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800161a:	f003 f853 	bl	80046c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800161e:	f7ff fc95 	bl	8000f4c <main>

08001622 <LoopForever>:

LoopForever:
    b LoopForever
 8001622:	e7fe      	b.n	8001622 <LoopForever>
  ldr   r0, =_estack
 8001624:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800162c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001630:	08005754 	.word	0x08005754
  ldr r2, =_sbss
 8001634:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001638:	20000190 	.word	0x20000190

0800163c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800163c:	e7fe      	b.n	800163c <ADC1_2_IRQHandler>

0800163e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800163e:	b580      	push	{r7, lr}
 8001640:	b082      	sub	sp, #8
 8001642:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001648:	2003      	movs	r0, #3
 800164a:	f000 f95b 	bl	8001904 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f80e 	bl	8001670 <HAL_InitTick>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d002      	beq.n	8001660 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	e001      	b.n	8001664 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001660:	f7ff fe12 	bl	8001288 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001664:	79fb      	ldrb	r3, [r7, #7]

}
 8001666:	4618      	mov	r0, r3
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001678:	2300      	movs	r3, #0
 800167a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800167c:	4b16      	ldr	r3, [pc, #88]	; (80016d8 <HAL_InitTick+0x68>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d022      	beq.n	80016ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001684:	4b15      	ldr	r3, [pc, #84]	; (80016dc <HAL_InitTick+0x6c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <HAL_InitTick+0x68>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001690:	fbb1 f3f3 	udiv	r3, r1, r3
 8001694:	fbb2 f3f3 	udiv	r3, r2, r3
 8001698:	4618      	mov	r0, r3
 800169a:	f000 f966 	bl	800196a <HAL_SYSTICK_Config>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d10f      	bne.n	80016c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2b0f      	cmp	r3, #15
 80016a8:	d809      	bhi.n	80016be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016aa:	2200      	movs	r2, #0
 80016ac:	6879      	ldr	r1, [r7, #4]
 80016ae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80016b2:	f000 f932 	bl	800191a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016b6:	4a0a      	ldr	r2, [pc, #40]	; (80016e0 <HAL_InitTick+0x70>)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6013      	str	r3, [r2, #0]
 80016bc:	e007      	b.n	80016ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	73fb      	strb	r3, [r7, #15]
 80016c2:	e004      	b.n	80016ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016c4:	2301      	movs	r3, #1
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e001      	b.n	80016ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000008 	.word	0x20000008
 80016dc:	20000000 	.word	0x20000000
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016e8:	4b05      	ldr	r3, [pc, #20]	; (8001700 <HAL_IncTick+0x1c>)
 80016ea:	681a      	ldr	r2, [r3, #0]
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x20>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	4a03      	ldr	r2, [pc, #12]	; (8001700 <HAL_IncTick+0x1c>)
 80016f4:	6013      	str	r3, [r2, #0]
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	2000017c 	.word	0x2000017c
 8001704:	20000008 	.word	0x20000008

08001708 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  return uwTick;
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <HAL_GetTick+0x14>)
 800170e:	681b      	ldr	r3, [r3, #0]
}
 8001710:	4618      	mov	r0, r3
 8001712:	46bd      	mov	sp, r7
 8001714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	2000017c 	.word	0x2000017c

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff ffee 	bl	8001708 <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001738:	d004      	beq.n	8001744 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b09      	ldr	r3, [pc, #36]	; (8001760 <HAL_Delay+0x40>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001744:	bf00      	nop
 8001746:	f7ff ffdf 	bl	8001708 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d8f7      	bhi.n	8001746 <HAL_Delay+0x26>
  {
  }
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}
 8001760:	20000008 	.word	0x20000008

08001764 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001764:	b480      	push	{r7}
 8001766:	b085      	sub	sp, #20
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001774:	4b0c      	ldr	r3, [pc, #48]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177a:	68ba      	ldr	r2, [r7, #8]
 800177c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001780:	4013      	ands	r3, r2
 8001782:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800178c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001790:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001794:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001796:	4a04      	ldr	r2, [pc, #16]	; (80017a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	60d3      	str	r3, [r2, #12]
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	e000ed00 	.word	0xe000ed00

080017ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b0:	4b04      	ldr	r3, [pc, #16]	; (80017c4 <__NVIC_GetPriorityGrouping+0x18>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	0a1b      	lsrs	r3, r3, #8
 80017b6:	f003 0307 	and.w	r3, r3, #7
}
 80017ba:	4618      	mov	r0, r3
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	4603      	mov	r3, r0
 80017d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	db0b      	blt.n	80017f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	f003 021f 	and.w	r2, r3, #31
 80017e0:	4907      	ldr	r1, [pc, #28]	; (8001800 <__NVIC_EnableIRQ+0x38>)
 80017e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e6:	095b      	lsrs	r3, r3, #5
 80017e8:	2001      	movs	r0, #1
 80017ea:	fa00 f202 	lsl.w	r2, r0, r2
 80017ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017f2:	bf00      	nop
 80017f4:	370c      	adds	r7, #12
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
 80017fe:	bf00      	nop
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
	...

080018c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3b01      	subs	r3, #1
 80018cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018d0:	d301      	bcc.n	80018d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018d2:	2301      	movs	r3, #1
 80018d4:	e00f      	b.n	80018f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d6:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <SysTick_Config+0x40>)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	3b01      	subs	r3, #1
 80018dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018de:	210f      	movs	r1, #15
 80018e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80018e4:	f7ff ff8e 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e8:	4b05      	ldr	r3, [pc, #20]	; (8001900 <SysTick_Config+0x40>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <SysTick_Config+0x40>)
 80018f0:	2207      	movs	r2, #7
 80018f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	e000e010 	.word	0xe000e010

08001904 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ff29 	bl	8001764 <__NVIC_SetPriorityGrouping>
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}

0800191a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800191a:	b580      	push	{r7, lr}
 800191c:	b086      	sub	sp, #24
 800191e:	af00      	add	r7, sp, #0
 8001920:	4603      	mov	r3, r0
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
 8001926:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff40 	bl	80017ac <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff90 	bl	8001858 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff33 	bl	80017c8 <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa4 	bl	80018c0 <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b087      	sub	sp, #28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001992:	e15a      	b.n	8001c4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	fa01 f303 	lsl.w	r3, r1, r3
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	f000 814c 	beq.w	8001c44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 0303 	and.w	r3, r3, #3
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d005      	beq.n	80019c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d130      	bne.n	8001a26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	689b      	ldr	r3, [r3, #8]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4013      	ands	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	68da      	ldr	r2, [r3, #12]
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	693a      	ldr	r2, [r7, #16]
 80019f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019fa:	2201      	movs	r2, #1
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	091b      	lsrs	r3, r3, #4
 8001a10:	f003 0201 	and.w	r2, r3, #1
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b03      	cmp	r3, #3
 8001a30:	d017      	beq.n	8001a62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	68db      	ldr	r3, [r3, #12]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	005b      	lsls	r3, r3, #1
 8001a3c:	2203      	movs	r2, #3
 8001a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a42:	43db      	mvns	r3, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4013      	ands	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d123      	bne.n	8001ab6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	08da      	lsrs	r2, r3, #3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3208      	adds	r2, #8
 8001a76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	220f      	movs	r2, #15
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	693a      	ldr	r2, [r7, #16]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	691a      	ldr	r2, [r3, #16]
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	08da      	lsrs	r2, r3, #3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	3208      	adds	r2, #8
 8001ab0:	6939      	ldr	r1, [r7, #16]
 8001ab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	2203      	movs	r2, #3
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	685b      	ldr	r3, [r3, #4]
 8001ad2:	f003 0203 	and.w	r2, r3, #3
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	005b      	lsls	r3, r3, #1
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 80a6 	beq.w	8001c44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001af8:	4b5b      	ldr	r3, [pc, #364]	; (8001c68 <HAL_GPIO_Init+0x2e4>)
 8001afa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001afc:	4a5a      	ldr	r2, [pc, #360]	; (8001c68 <HAL_GPIO_Init+0x2e4>)
 8001afe:	f043 0301 	orr.w	r3, r3, #1
 8001b02:	6613      	str	r3, [r2, #96]	; 0x60
 8001b04:	4b58      	ldr	r3, [pc, #352]	; (8001c68 <HAL_GPIO_Init+0x2e4>)
 8001b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	60bb      	str	r3, [r7, #8]
 8001b0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b10:	4a56      	ldr	r2, [pc, #344]	; (8001c6c <HAL_GPIO_Init+0x2e8>)
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	089b      	lsrs	r3, r3, #2
 8001b16:	3302      	adds	r3, #2
 8001b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	f003 0303 	and.w	r3, r3, #3
 8001b24:	009b      	lsls	r3, r3, #2
 8001b26:	220f      	movs	r2, #15
 8001b28:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2c:	43db      	mvns	r3, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4013      	ands	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b3a:	d01f      	beq.n	8001b7c <HAL_GPIO_Init+0x1f8>
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	4a4c      	ldr	r2, [pc, #304]	; (8001c70 <HAL_GPIO_Init+0x2ec>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d019      	beq.n	8001b78 <HAL_GPIO_Init+0x1f4>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a4b      	ldr	r2, [pc, #300]	; (8001c74 <HAL_GPIO_Init+0x2f0>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d013      	beq.n	8001b74 <HAL_GPIO_Init+0x1f0>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	4a4a      	ldr	r2, [pc, #296]	; (8001c78 <HAL_GPIO_Init+0x2f4>)
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d00d      	beq.n	8001b70 <HAL_GPIO_Init+0x1ec>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	4a49      	ldr	r2, [pc, #292]	; (8001c7c <HAL_GPIO_Init+0x2f8>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d007      	beq.n	8001b6c <HAL_GPIO_Init+0x1e8>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	4a48      	ldr	r2, [pc, #288]	; (8001c80 <HAL_GPIO_Init+0x2fc>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d101      	bne.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b64:	2305      	movs	r3, #5
 8001b66:	e00a      	b.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b68:	2306      	movs	r3, #6
 8001b6a:	e008      	b.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e006      	b.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b70:	2303      	movs	r3, #3
 8001b72:	e004      	b.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e002      	b.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e000      	b.n	8001b7e <HAL_GPIO_Init+0x1fa>
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	f002 0203 	and.w	r2, r2, #3
 8001b84:	0092      	lsls	r2, r2, #2
 8001b86:	4093      	lsls	r3, r2
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b8e:	4937      	ldr	r1, [pc, #220]	; (8001c6c <HAL_GPIO_Init+0x2e8>)
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	693a      	ldr	r2, [r7, #16]
 8001b98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	43db      	mvns	r3, r3
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4013      	ands	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d003      	beq.n	8001bc0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bb8:	693a      	ldr	r2, [r7, #16]
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bc0:	4a30      	ldr	r2, [pc, #192]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001bc6:	4b2f      	ldr	r3, [pc, #188]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	43db      	mvns	r3, r3
 8001bd0:	693a      	ldr	r2, [r7, #16]
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d003      	beq.n	8001bea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001bea:	4a26      	ldr	r2, [pc, #152]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001bf0:	4b24      	ldr	r3, [pc, #144]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d003      	beq.n	8001c14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c14:	4a1b      	ldr	r2, [pc, #108]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c1a:	4b1a      	ldr	r3, [pc, #104]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	693a      	ldr	r2, [r7, #16]
 8001c26:	4013      	ands	r3, r2
 8001c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d003      	beq.n	8001c3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c3e:	4a11      	ldr	r2, [pc, #68]	; (8001c84 <HAL_GPIO_Init+0x300>)
 8001c40:	693b      	ldr	r3, [r7, #16]
 8001c42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	3301      	adds	r3, #1
 8001c48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	f47f ae9d 	bne.w	8001994 <HAL_GPIO_Init+0x10>
  }
}
 8001c5a:	bf00      	nop
 8001c5c:	bf00      	nop
 8001c5e:	371c      	adds	r7, #28
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	40010000 	.word	0x40010000
 8001c70:	48000400 	.word	0x48000400
 8001c74:	48000800 	.word	0x48000800
 8001c78:	48000c00 	.word	0x48000c00
 8001c7c:	48001000 	.word	0x48001000
 8001c80:	48001400 	.word	0x48001400
 8001c84:	40010400 	.word	0x40010400

08001c88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
 8001c90:	460b      	mov	r3, r1
 8001c92:	807b      	strh	r3, [r7, #2]
 8001c94:	4613      	mov	r3, r2
 8001c96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c98:	787b      	ldrb	r3, [r7, #1]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c9e:	887a      	ldrh	r2, [r7, #2]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ca4:	e002      	b.n	8001cac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ca6:	887a      	ldrh	r2, [r7, #2]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d141      	bne.n	8001d4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001cc6:	4b4b      	ldr	r3, [pc, #300]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cd2:	d131      	bne.n	8001d38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001cd4:	4b47      	ldr	r3, [pc, #284]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001cda:	4a46      	ldr	r2, [pc, #280]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cdc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ce0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ce4:	4b43      	ldr	r3, [pc, #268]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001cec:	4a41      	ldr	r2, [pc, #260]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001cee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cf2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001cf4:	4b40      	ldr	r3, [pc, #256]	; (8001df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	2232      	movs	r2, #50	; 0x32
 8001cfa:	fb02 f303 	mul.w	r3, r2, r3
 8001cfe:	4a3f      	ldr	r2, [pc, #252]	; (8001dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d00:	fba2 2303 	umull	r2, r3, r2, r3
 8001d04:	0c9b      	lsrs	r3, r3, #18
 8001d06:	3301      	adds	r3, #1
 8001d08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d0a:	e002      	b.n	8001d12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d1e:	d102      	bne.n	8001d26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f2      	bne.n	8001d0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001d26:	4b33      	ldr	r3, [pc, #204]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d32:	d158      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e057      	b.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d38:	4b2e      	ldr	r3, [pc, #184]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d3e:	4a2d      	ldr	r2, [pc, #180]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d44:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001d48:	e04d      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d50:	d141      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d5e:	d131      	bne.n	8001dc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d66:	4a23      	ldr	r2, [pc, #140]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d78:	4a1e      	ldr	r2, [pc, #120]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d80:	4b1d      	ldr	r3, [pc, #116]	; (8001df8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2232      	movs	r2, #50	; 0x32
 8001d86:	fb02 f303 	mul.w	r3, r2, r3
 8001d8a:	4a1c      	ldr	r2, [pc, #112]	; (8001dfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d90:	0c9b      	lsrs	r3, r3, #18
 8001d92:	3301      	adds	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d96:	e002      	b.n	8001d9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	3b01      	subs	r3, #1
 8001d9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da0:	695b      	ldr	r3, [r3, #20]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001daa:	d102      	bne.n	8001db2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d1f2      	bne.n	8001d98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dbe:	d112      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e011      	b.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dca:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dd4:	e007      	b.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001dd6:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dde:	4a05      	ldr	r2, [pc, #20]	; (8001df4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001de4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3714      	adds	r7, #20
 8001dec:	46bd      	mov	sp, r7
 8001dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df2:	4770      	bx	lr
 8001df4:	40007000 	.word	0x40007000
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	431bde83 	.word	0x431bde83

08001e00 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e04:	4b05      	ldr	r3, [pc, #20]	; (8001e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	4a04      	ldr	r2, [pc, #16]	; (8001e1c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e0e:	6093      	str	r3, [r2, #8]
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40007000 	.word	0x40007000

08001e20 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b088      	sub	sp, #32
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e306      	b.n	8002440 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d075      	beq.n	8001f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e3e:	4b97      	ldr	r3, [pc, #604]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	f003 030c 	and.w	r3, r3, #12
 8001e46:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e48:	4b94      	ldr	r3, [pc, #592]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
 8001e50:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001e52:	69bb      	ldr	r3, [r7, #24]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d102      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3e>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d002      	beq.n	8001e64 <HAL_RCC_OscConfig+0x44>
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d10b      	bne.n	8001e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e64:	4b8d      	ldr	r3, [pc, #564]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d05b      	beq.n	8001f28 <HAL_RCC_OscConfig+0x108>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d157      	bne.n	8001f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e2e1      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e84:	d106      	bne.n	8001e94 <HAL_RCC_OscConfig+0x74>
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a84      	ldr	r2, [pc, #528]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e01d      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e9c:	d10c      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x98>
 8001e9e:	4b7f      	ldr	r3, [pc, #508]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a7e      	ldr	r2, [pc, #504]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ea4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea8:	6013      	str	r3, [r2, #0]
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a7b      	ldr	r2, [pc, #492]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb4:	6013      	str	r3, [r2, #0]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_RCC_OscConfig+0xb0>
 8001eb8:	4b78      	ldr	r3, [pc, #480]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a77      	ldr	r2, [pc, #476]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ebe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ec2:	6013      	str	r3, [r2, #0]
 8001ec4:	4b75      	ldr	r3, [pc, #468]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a74      	ldr	r2, [pc, #464]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001eca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d013      	beq.n	8001f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fc16 	bl	8001708 <HAL_GetTick>
 8001edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee0:	f7ff fc12 	bl	8001708 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b64      	cmp	r3, #100	; 0x64
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e2a6      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ef2:	4b6a      	ldr	r3, [pc, #424]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0xc0>
 8001efe:	e014      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff fc02 	bl	8001708 <HAL_GetTick>
 8001f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f08:	f7ff fbfe 	bl	8001708 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	693b      	ldr	r3, [r7, #16]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b64      	cmp	r3, #100	; 0x64
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e292      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f1a:	4b60      	ldr	r3, [pc, #384]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0xe8>
 8001f26:	e000      	b.n	8001f2a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0302 	and.w	r3, r3, #2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d075      	beq.n	8002022 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f36:	4b59      	ldr	r3, [pc, #356]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	f003 030c 	and.w	r3, r3, #12
 8001f3e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f40:	4b56      	ldr	r3, [pc, #344]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f42:	68db      	ldr	r3, [r3, #12]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d102      	bne.n	8001f56 <HAL_RCC_OscConfig+0x136>
 8001f50:	697b      	ldr	r3, [r7, #20]
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d002      	beq.n	8001f5c <HAL_RCC_OscConfig+0x13c>
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	2b04      	cmp	r3, #4
 8001f5a:	d11f      	bne.n	8001f9c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	4b4f      	ldr	r3, [pc, #316]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d005      	beq.n	8001f74 <HAL_RCC_OscConfig+0x154>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	68db      	ldr	r3, [r3, #12]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d101      	bne.n	8001f74 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	e265      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b49      	ldr	r3, [pc, #292]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	4946      	ldr	r1, [pc, #280]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001f88:	4b45      	ldr	r3, [pc, #276]	; (80020a0 <HAL_RCC_OscConfig+0x280>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fb6f 	bl	8001670 <HAL_InitTick>
 8001f92:	4603      	mov	r3, r0
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d043      	beq.n	8002020 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e251      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	68db      	ldr	r3, [r3, #12]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d023      	beq.n	8001fec <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa4:	4b3d      	ldr	r3, [pc, #244]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a3c      	ldr	r2, [pc, #240]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001faa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7ff fbaa 	bl	8001708 <HAL_GetTick>
 8001fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fb6:	e008      	b.n	8001fca <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fb8:	f7ff fba6 	bl	8001708 <HAL_GetTick>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d901      	bls.n	8001fca <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fc6:	2303      	movs	r3, #3
 8001fc8:	e23a      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001fca:	4b34      	ldr	r3, [pc, #208]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d0f0      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd6:	4b31      	ldr	r3, [pc, #196]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	691b      	ldr	r3, [r3, #16]
 8001fe2:	061b      	lsls	r3, r3, #24
 8001fe4:	492d      	ldr	r1, [pc, #180]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	604b      	str	r3, [r1, #4]
 8001fea:	e01a      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8001ff2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ff6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff fb86 	bl	8001708 <HAL_GetTick>
 8001ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ffe:	e008      	b.n	8002012 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002000:	f7ff fb82 	bl	8001708 <HAL_GetTick>
 8002004:	4602      	mov	r2, r0
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b02      	cmp	r3, #2
 800200c:	d901      	bls.n	8002012 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800200e:	2303      	movs	r3, #3
 8002010:	e216      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002012:	4b22      	ldr	r3, [pc, #136]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800201a:	2b00      	cmp	r3, #0
 800201c:	d1f0      	bne.n	8002000 <HAL_RCC_OscConfig+0x1e0>
 800201e:	e000      	b.n	8002022 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002020:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f003 0308 	and.w	r3, r3, #8
 800202a:	2b00      	cmp	r3, #0
 800202c:	d041      	beq.n	80020b2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d01c      	beq.n	8002070 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002036:	4b19      	ldr	r3, [pc, #100]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002038:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203c:	4a17      	ldr	r2, [pc, #92]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 800203e:	f043 0301 	orr.w	r3, r3, #1
 8002042:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002046:	f7ff fb5f 	bl	8001708 <HAL_GetTick>
 800204a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800204e:	f7ff fb5b 	bl	8001708 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1ef      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002062:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	2b00      	cmp	r3, #0
 800206c:	d0ef      	beq.n	800204e <HAL_RCC_OscConfig+0x22e>
 800206e:	e020      	b.n	80020b2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002070:	4b0a      	ldr	r3, [pc, #40]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002072:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002076:	4a09      	ldr	r2, [pc, #36]	; (800209c <HAL_RCC_OscConfig+0x27c>)
 8002078:	f023 0301 	bic.w	r3, r3, #1
 800207c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff fb42 	bl	8001708 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002086:	e00d      	b.n	80020a4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002088:	f7ff fb3e 	bl	8001708 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d906      	bls.n	80020a4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1d2      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
 800209a:	bf00      	nop
 800209c:	40021000 	.word	0x40021000
 80020a0:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80020a4:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1ea      	bne.n	8002088 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80a6 	beq.w	800220c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020c0:	2300      	movs	r3, #0
 80020c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_RCC_OscConfig+0x2b4>
 80020d0:	2301      	movs	r3, #1
 80020d2:	e000      	b.n	80020d6 <HAL_RCC_OscConfig+0x2b6>
 80020d4:	2300      	movs	r3, #0
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00d      	beq.n	80020f6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020de:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020e4:	6593      	str	r3, [r2, #88]	; 0x58
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80020e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ee:	60fb      	str	r3, [r7, #12]
 80020f0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80020f2:	2301      	movs	r3, #1
 80020f4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020f6:	4b79      	ldr	r3, [pc, #484]	; (80022dc <HAL_RCC_OscConfig+0x4bc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d118      	bne.n	8002134 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002102:	4b76      	ldr	r3, [pc, #472]	; (80022dc <HAL_RCC_OscConfig+0x4bc>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a75      	ldr	r2, [pc, #468]	; (80022dc <HAL_RCC_OscConfig+0x4bc>)
 8002108:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800210e:	f7ff fafb 	bl	8001708 <HAL_GetTick>
 8002112:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002114:	e008      	b.n	8002128 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002116:	f7ff faf7 	bl	8001708 <HAL_GetTick>
 800211a:	4602      	mov	r2, r0
 800211c:	693b      	ldr	r3, [r7, #16]
 800211e:	1ad3      	subs	r3, r2, r3
 8002120:	2b02      	cmp	r3, #2
 8002122:	d901      	bls.n	8002128 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002124:	2303      	movs	r3, #3
 8002126:	e18b      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002128:	4b6c      	ldr	r3, [pc, #432]	; (80022dc <HAL_RCC_OscConfig+0x4bc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002130:	2b00      	cmp	r3, #0
 8002132:	d0f0      	beq.n	8002116 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_RCC_OscConfig+0x32e>
 800213c:	4b66      	ldr	r3, [pc, #408]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a65      	ldr	r2, [pc, #404]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002144:	f043 0301 	orr.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800214c:	e024      	b.n	8002198 <HAL_RCC_OscConfig+0x378>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	689b      	ldr	r3, [r3, #8]
 8002152:	2b05      	cmp	r3, #5
 8002154:	d110      	bne.n	8002178 <HAL_RCC_OscConfig+0x358>
 8002156:	4b60      	ldr	r3, [pc, #384]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800215c:	4a5e      	ldr	r2, [pc, #376]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800215e:	f043 0304 	orr.w	r3, r3, #4
 8002162:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002166:	4b5c      	ldr	r3, [pc, #368]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800216c:	4a5a      	ldr	r2, [pc, #360]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800216e:	f043 0301 	orr.w	r3, r3, #1
 8002172:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002176:	e00f      	b.n	8002198 <HAL_RCC_OscConfig+0x378>
 8002178:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800217a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217e:	4a56      	ldr	r2, [pc, #344]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002180:	f023 0301 	bic.w	r3, r3, #1
 8002184:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002188:	4b53      	ldr	r3, [pc, #332]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800218a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218e:	4a52      	ldr	r2, [pc, #328]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002190:	f023 0304 	bic.w	r3, r3, #4
 8002194:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d016      	beq.n	80021ce <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021a0:	f7ff fab2 	bl	8001708 <HAL_GetTick>
 80021a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021a6:	e00a      	b.n	80021be <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a8:	f7ff faae 	bl	8001708 <HAL_GetTick>
 80021ac:	4602      	mov	r2, r0
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d901      	bls.n	80021be <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80021ba:	2303      	movs	r3, #3
 80021bc:	e140      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021be:	4b46      	ldr	r3, [pc, #280]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80021c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0ed      	beq.n	80021a8 <HAL_RCC_OscConfig+0x388>
 80021cc:	e015      	b.n	80021fa <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ce:	f7ff fa9b 	bl	8001708 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021d4:	e00a      	b.n	80021ec <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021d6:	f7ff fa97 	bl	8001708 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d901      	bls.n	80021ec <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80021e8:	2303      	movs	r3, #3
 80021ea:	e129      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021ec:	4b3a      	ldr	r3, [pc, #232]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1ed      	bne.n	80021d6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021fa:	7ffb      	ldrb	r3, [r7, #31]
 80021fc:	2b01      	cmp	r3, #1
 80021fe:	d105      	bne.n	800220c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002200:	4b35      	ldr	r3, [pc, #212]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	4a34      	ldr	r2, [pc, #208]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002206:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800220a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0320 	and.w	r3, r3, #32
 8002214:	2b00      	cmp	r3, #0
 8002216:	d03c      	beq.n	8002292 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	699b      	ldr	r3, [r3, #24]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d01c      	beq.n	800225a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002222:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002226:	4a2c      	ldr	r2, [pc, #176]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002230:	f7ff fa6a 	bl	8001708 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002238:	f7ff fa66 	bl	8001708 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e0fa      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800224a:	4b23      	ldr	r3, [pc, #140]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800224c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0ef      	beq.n	8002238 <HAL_RCC_OscConfig+0x418>
 8002258:	e01b      	b.n	8002292 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800225a:	4b1f      	ldr	r3, [pc, #124]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800225c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002262:	f023 0301 	bic.w	r3, r3, #1
 8002266:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800226a:	f7ff fa4d 	bl	8001708 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002272:	f7ff fa49 	bl	8001708 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e0dd      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002284:	4b14      	ldr	r3, [pc, #80]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 8002286:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d1ef      	bne.n	8002272 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 80d1 	beq.w	800243e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800229c:	4b0e      	ldr	r3, [pc, #56]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	f003 030c 	and.w	r3, r3, #12
 80022a4:	2b0c      	cmp	r3, #12
 80022a6:	f000 808b 	beq.w	80023c0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d15e      	bne.n	8002370 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x4b8>)
 80022b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022be:	f7ff fa23 	bl	8001708 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	e00c      	b.n	80022e0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7ff fa1f 	bl	8001708 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d905      	bls.n	80022e0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e0b3      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
 80022d8:	40021000 	.word	0x40021000
 80022dc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022e0:	4b59      	ldr	r3, [pc, #356]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d1ec      	bne.n	80022c6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ec:	4b56      	ldr	r3, [pc, #344]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 80022ee:	68da      	ldr	r2, [r3, #12]
 80022f0:	4b56      	ldr	r3, [pc, #344]	; (800244c <HAL_RCC_OscConfig+0x62c>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	687a      	ldr	r2, [r7, #4]
 80022f6:	6a11      	ldr	r1, [r2, #32]
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80022fc:	3a01      	subs	r2, #1
 80022fe:	0112      	lsls	r2, r2, #4
 8002300:	4311      	orrs	r1, r2
 8002302:	687a      	ldr	r2, [r7, #4]
 8002304:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002306:	0212      	lsls	r2, r2, #8
 8002308:	4311      	orrs	r1, r2
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800230e:	0852      	lsrs	r2, r2, #1
 8002310:	3a01      	subs	r2, #1
 8002312:	0552      	lsls	r2, r2, #21
 8002314:	4311      	orrs	r1, r2
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800231a:	0852      	lsrs	r2, r2, #1
 800231c:	3a01      	subs	r2, #1
 800231e:	0652      	lsls	r2, r2, #25
 8002320:	4311      	orrs	r1, r2
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002326:	06d2      	lsls	r2, r2, #27
 8002328:	430a      	orrs	r2, r1
 800232a:	4947      	ldr	r1, [pc, #284]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 800232c:	4313      	orrs	r3, r2
 800232e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002330:	4b45      	ldr	r3, [pc, #276]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a44      	ldr	r2, [pc, #272]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002336:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800233a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	4a41      	ldr	r2, [pc, #260]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002346:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff f9de 	bl	8001708 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002350:	f7ff f9da 	bl	8001708 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e06e      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	4b39      	ldr	r3, [pc, #228]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x530>
 800236e:	e066      	b.n	800243e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002370:	4b35      	ldr	r3, [pc, #212]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a34      	ldr	r2, [pc, #208]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002376:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800237c:	4b32      	ldr	r3, [pc, #200]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4a31      	ldr	r2, [pc, #196]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 8002382:	f023 0303 	bic.w	r3, r3, #3
 8002386:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002388:	4b2f      	ldr	r3, [pc, #188]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	4a2e      	ldr	r2, [pc, #184]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 800238e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff f9b6 	bl	8001708 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023a0:	f7ff f9b2 	bl	8001708 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e046      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b2:	4b25      	ldr	r3, [pc, #148]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x580>
 80023be:	e03e      	b.n	800243e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d101      	bne.n	80023cc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e039      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80023cc:	4b1e      	ldr	r3, [pc, #120]	; (8002448 <HAL_RCC_OscConfig+0x628>)
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	f003 0203 	and.w	r2, r3, #3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a1b      	ldr	r3, [r3, #32]
 80023dc:	429a      	cmp	r2, r3
 80023de:	d12c      	bne.n	800243a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ea:	3b01      	subs	r3, #1
 80023ec:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d123      	bne.n	800243a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80023fe:	429a      	cmp	r2, r3
 8002400:	d11b      	bne.n	800243a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002402:	697b      	ldr	r3, [r7, #20]
 8002404:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800240e:	429a      	cmp	r2, r3
 8002410:	d113      	bne.n	800243a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	085b      	lsrs	r3, r3, #1
 800241e:	3b01      	subs	r3, #1
 8002420:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002422:	429a      	cmp	r2, r3
 8002424:	d109      	bne.n	800243a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002430:	085b      	lsrs	r3, r3, #1
 8002432:	3b01      	subs	r3, #1
 8002434:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002436:	429a      	cmp	r2, r3
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e000      	b.n	8002440 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	3720      	adds	r7, #32
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}
 8002448:	40021000 	.word	0x40021000
 800244c:	019f800c 	.word	0x019f800c

08002450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b086      	sub	sp, #24
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
 8002458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800245a:	2300      	movs	r3, #0
 800245c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d101      	bne.n	8002468 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e11e      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002468:	4b91      	ldr	r3, [pc, #580]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 030f 	and.w	r3, r3, #15
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d910      	bls.n	8002498 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002476:	4b8e      	ldr	r3, [pc, #568]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f023 020f 	bic.w	r2, r3, #15
 800247e:	498c      	ldr	r1, [pc, #560]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	4313      	orrs	r3, r2
 8002484:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002486:	4b8a      	ldr	r3, [pc, #552]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 030f 	and.w	r3, r3, #15
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	429a      	cmp	r2, r3
 8002492:	d001      	beq.n	8002498 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	e106      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d073      	beq.n	800258c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b03      	cmp	r3, #3
 80024aa:	d129      	bne.n	8002500 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024ac:	4b81      	ldr	r3, [pc, #516]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d101      	bne.n	80024bc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e0f4      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80024bc:	f000 f99e 	bl	80027fc <RCC_GetSysClockFreqFromPLLSource>
 80024c0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4a7c      	ldr	r2, [pc, #496]	; (80026b8 <HAL_RCC_ClockConfig+0x268>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d93f      	bls.n	800254a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024ca:	4b7a      	ldr	r3, [pc, #488]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d009      	beq.n	80024ea <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d033      	beq.n	800254a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d12f      	bne.n	800254a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80024ea:	4b72      	ldr	r3, [pc, #456]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024f2:	4a70      	ldr	r2, [pc, #448]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80024f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024f8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80024fa:	2380      	movs	r3, #128	; 0x80
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	e024      	b.n	800254a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	2b02      	cmp	r3, #2
 8002506:	d107      	bne.n	8002518 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002508:	4b6a      	ldr	r3, [pc, #424]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d109      	bne.n	8002528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e0c6      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e0be      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002528:	f000 f8ce 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 800252c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4a61      	ldr	r2, [pc, #388]	; (80026b8 <HAL_RCC_ClockConfig+0x268>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d909      	bls.n	800254a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002536:	4b5f      	ldr	r3, [pc, #380]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800253e:	4a5d      	ldr	r2, [pc, #372]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002544:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002546:	2380      	movs	r3, #128	; 0x80
 8002548:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800254a:	4b5a      	ldr	r3, [pc, #360]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f023 0203 	bic.w	r2, r3, #3
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4957      	ldr	r1, [pc, #348]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002558:	4313      	orrs	r3, r2
 800255a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800255c:	f7ff f8d4 	bl	8001708 <HAL_GetTick>
 8002560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002562:	e00a      	b.n	800257a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002564:	f7ff f8d0 	bl	8001708 <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002572:	4293      	cmp	r3, r2
 8002574:	d901      	bls.n	800257a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e095      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257a:	4b4e      	ldr	r3, [pc, #312]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	f003 020c 	and.w	r2, r3, #12
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	429a      	cmp	r2, r3
 800258a:	d1eb      	bne.n	8002564 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d023      	beq.n	80025e0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0304 	and.w	r3, r3, #4
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d005      	beq.n	80025b0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025a4:	4b43      	ldr	r3, [pc, #268]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	4a42      	ldr	r2, [pc, #264]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025aa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ae:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f003 0308 	and.w	r3, r3, #8
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80025bc:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025be:	689b      	ldr	r3, [r3, #8]
 80025c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80025c4:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025c6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025ca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025cc:	4b39      	ldr	r3, [pc, #228]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	4936      	ldr	r1, [pc, #216]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	608b      	str	r3, [r1, #8]
 80025de:	e008      	b.n	80025f2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b80      	cmp	r3, #128	; 0x80
 80025e4:	d105      	bne.n	80025f2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025e6:	4b33      	ldr	r3, [pc, #204]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	4a32      	ldr	r2, [pc, #200]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f2:	4b2f      	ldr	r3, [pc, #188]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d21d      	bcs.n	800263c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002600:	4b2b      	ldr	r3, [pc, #172]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 020f 	bic.w	r2, r3, #15
 8002608:	4929      	ldr	r1, [pc, #164]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	4313      	orrs	r3, r2
 800260e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002610:	f7ff f87a 	bl	8001708 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff f876 	bl	8001708 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e03b      	b.n	80026a6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800262e:	4b20      	ldr	r3, [pc, #128]	; (80026b0 <HAL_RCC_ClockConfig+0x260>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	429a      	cmp	r2, r3
 800263a:	d1ed      	bne.n	8002618 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0304 	and.w	r3, r3, #4
 8002644:	2b00      	cmp	r3, #0
 8002646:	d008      	beq.n	800265a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002648:	4b1a      	ldr	r3, [pc, #104]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4917      	ldr	r1, [pc, #92]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002656:	4313      	orrs	r3, r2
 8002658:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 0308 	and.w	r3, r3, #8
 8002662:	2b00      	cmp	r3, #0
 8002664:	d009      	beq.n	800267a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002666:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	490f      	ldr	r1, [pc, #60]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002676:	4313      	orrs	r3, r2
 8002678:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800267a:	f000 f825 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 800267e:	4602      	mov	r2, r0
 8002680:	4b0c      	ldr	r3, [pc, #48]	; (80026b4 <HAL_RCC_ClockConfig+0x264>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	091b      	lsrs	r3, r3, #4
 8002686:	f003 030f 	and.w	r3, r3, #15
 800268a:	490c      	ldr	r1, [pc, #48]	; (80026bc <HAL_RCC_ClockConfig+0x26c>)
 800268c:	5ccb      	ldrb	r3, [r1, r3]
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	fa22 f303 	lsr.w	r3, r2, r3
 8002696:	4a0a      	ldr	r2, [pc, #40]	; (80026c0 <HAL_RCC_ClockConfig+0x270>)
 8002698:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800269a:	4b0a      	ldr	r3, [pc, #40]	; (80026c4 <HAL_RCC_ClockConfig+0x274>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7fe ffe6 	bl	8001670 <HAL_InitTick>
 80026a4:	4603      	mov	r3, r0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3718      	adds	r7, #24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	04c4b400 	.word	0x04c4b400
 80026bc:	0800566c 	.word	0x0800566c
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ce:	4b2c      	ldr	r3, [pc, #176]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	f003 030c 	and.w	r3, r3, #12
 80026d6:	2b04      	cmp	r3, #4
 80026d8:	d102      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80026da:	4b2a      	ldr	r3, [pc, #168]	; (8002784 <HAL_RCC_GetSysClockFreq+0xbc>)
 80026dc:	613b      	str	r3, [r7, #16]
 80026de:	e047      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80026e0:	4b27      	ldr	r3, [pc, #156]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 030c 	and.w	r3, r3, #12
 80026e8:	2b08      	cmp	r3, #8
 80026ea:	d102      	bne.n	80026f2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80026ec:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc0>)
 80026ee:	613b      	str	r3, [r7, #16]
 80026f0:	e03e      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80026f2:	4b23      	ldr	r3, [pc, #140]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	f003 030c 	and.w	r3, r3, #12
 80026fa:	2b0c      	cmp	r3, #12
 80026fc:	d136      	bne.n	800276c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80026fe:	4b20      	ldr	r3, [pc, #128]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f003 0303 	and.w	r3, r3, #3
 8002706:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002708:	4b1d      	ldr	r3, [pc, #116]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	091b      	lsrs	r3, r3, #4
 800270e:	f003 030f 	and.w	r3, r3, #15
 8002712:	3301      	adds	r3, #1
 8002714:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	2b03      	cmp	r3, #3
 800271a:	d10c      	bne.n	8002736 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800271c:	4a1a      	ldr	r2, [pc, #104]	; (8002788 <HAL_RCC_GetSysClockFreq+0xc0>)
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	fbb2 f3f3 	udiv	r3, r2, r3
 8002724:	4a16      	ldr	r2, [pc, #88]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002726:	68d2      	ldr	r2, [r2, #12]
 8002728:	0a12      	lsrs	r2, r2, #8
 800272a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800272e:	fb02 f303 	mul.w	r3, r2, r3
 8002732:	617b      	str	r3, [r7, #20]
      break;
 8002734:	e00c      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002736:	4a13      	ldr	r2, [pc, #76]	; (8002784 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	fbb2 f3f3 	udiv	r3, r2, r3
 800273e:	4a10      	ldr	r2, [pc, #64]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	0a12      	lsrs	r2, r2, #8
 8002744:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002748:	fb02 f303 	mul.w	r3, r2, r3
 800274c:	617b      	str	r3, [r7, #20]
      break;
 800274e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002750:	4b0b      	ldr	r3, [pc, #44]	; (8002780 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	0e5b      	lsrs	r3, r3, #25
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	3301      	adds	r3, #1
 800275c:	005b      	lsls	r3, r3, #1
 800275e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	fbb2 f3f3 	udiv	r3, r2, r3
 8002768:	613b      	str	r3, [r7, #16]
 800276a:	e001      	b.n	8002770 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002770:	693b      	ldr	r3, [r7, #16]
}
 8002772:	4618      	mov	r0, r3
 8002774:	371c      	adds	r7, #28
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	40021000 	.word	0x40021000
 8002784:	00f42400 	.word	0x00f42400
 8002788:	016e3600 	.word	0x016e3600

0800278c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800278c:	b480      	push	{r7}
 800278e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002790:	4b03      	ldr	r3, [pc, #12]	; (80027a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002792:	681b      	ldr	r3, [r3, #0]
}
 8002794:	4618      	mov	r0, r3
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	20000000 	.word	0x20000000

080027a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027a8:	f7ff fff0 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0a1b      	lsrs	r3, r3, #8
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4904      	ldr	r1, [pc, #16]	; (80027cc <HAL_RCC_GetPCLK1Freq+0x28>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c4:	4618      	mov	r0, r3
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	40021000 	.word	0x40021000
 80027cc:	0800567c 	.word	0x0800567c

080027d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80027d4:	f7ff ffda 	bl	800278c <HAL_RCC_GetHCLKFreq>
 80027d8:	4602      	mov	r2, r0
 80027da:	4b06      	ldr	r3, [pc, #24]	; (80027f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	0adb      	lsrs	r3, r3, #11
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80027e6:	5ccb      	ldrb	r3, [r1, r3]
 80027e8:	f003 031f 	and.w	r3, r3, #31
 80027ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	40021000 	.word	0x40021000
 80027f8:	0800567c 	.word	0x0800567c

080027fc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b087      	sub	sp, #28
 8002800:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002802:	4b1e      	ldr	r3, [pc, #120]	; (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800280c:	4b1b      	ldr	r3, [pc, #108]	; (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	091b      	lsrs	r3, r3, #4
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	3301      	adds	r3, #1
 8002818:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b03      	cmp	r3, #3
 800281e:	d10c      	bne.n	800283a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002820:	4a17      	ldr	r2, [pc, #92]	; (8002880 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	4a14      	ldr	r2, [pc, #80]	; (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800282a:	68d2      	ldr	r2, [r2, #12]
 800282c:	0a12      	lsrs	r2, r2, #8
 800282e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002832:	fb02 f303 	mul.w	r3, r2, r3
 8002836:	617b      	str	r3, [r7, #20]
    break;
 8002838:	e00c      	b.n	8002854 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800283a:	4a12      	ldr	r2, [pc, #72]	; (8002884 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	4a0e      	ldr	r2, [pc, #56]	; (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002844:	68d2      	ldr	r2, [r2, #12]
 8002846:	0a12      	lsrs	r2, r2, #8
 8002848:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800284c:	fb02 f303 	mul.w	r3, r2, r3
 8002850:	617b      	str	r3, [r7, #20]
    break;
 8002852:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	0e5b      	lsrs	r3, r3, #25
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	3301      	adds	r3, #1
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002864:	697a      	ldr	r2, [r7, #20]
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	fbb2 f3f3 	udiv	r3, r2, r3
 800286c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800286e:	687b      	ldr	r3, [r7, #4]
}
 8002870:	4618      	mov	r0, r3
 8002872:	371c      	adds	r7, #28
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000
 8002880:	016e3600 	.word	0x016e3600
 8002884:	00f42400 	.word	0x00f42400

08002888 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002890:	2300      	movs	r3, #0
 8002892:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002894:	2300      	movs	r3, #0
 8002896:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 8098 	beq.w	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028a6:	2300      	movs	r3, #0
 80028a8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028aa:	4b43      	ldr	r3, [pc, #268]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10d      	bne.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028b6:	4b40      	ldr	r3, [pc, #256]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ba:	4a3f      	ldr	r2, [pc, #252]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028c0:	6593      	str	r3, [r2, #88]	; 0x58
 80028c2:	4b3d      	ldr	r3, [pc, #244]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80028c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ce:	2301      	movs	r3, #1
 80028d0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d2:	4b3a      	ldr	r3, [pc, #232]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a39      	ldr	r2, [pc, #228]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028de:	f7fe ff13 	bl	8001708 <HAL_GetTick>
 80028e2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028e4:	e009      	b.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e6:	f7fe ff0f 	bl	8001708 <HAL_GetTick>
 80028ea:	4602      	mov	r2, r0
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	1ad3      	subs	r3, r2, r3
 80028f0:	2b02      	cmp	r3, #2
 80028f2:	d902      	bls.n	80028fa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80028f4:	2303      	movs	r3, #3
 80028f6:	74fb      	strb	r3, [r7, #19]
        break;
 80028f8:	e005      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80028fa:	4b30      	ldr	r3, [pc, #192]	; (80029bc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ef      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002906:	7cfb      	ldrb	r3, [r7, #19]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d159      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800290c:	4b2a      	ldr	r3, [pc, #168]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002916:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d01e      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	697a      	ldr	r2, [r7, #20]
 8002924:	429a      	cmp	r2, r3
 8002926:	d019      	beq.n	800295c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002928:	4b23      	ldr	r3, [pc, #140]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800292a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002932:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002934:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a1f      	ldr	r2, [pc, #124]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800293c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002944:	4b1c      	ldr	r3, [pc, #112]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294a:	4a1b      	ldr	r2, [pc, #108]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800294c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002950:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002954:	4a18      	ldr	r2, [pc, #96]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d016      	beq.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002966:	f7fe fecf 	bl	8001708 <HAL_GetTick>
 800296a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800296c:	e00b      	b.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800296e:	f7fe fecb 	bl	8001708 <HAL_GetTick>
 8002972:	4602      	mov	r2, r0
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	f241 3288 	movw	r2, #5000	; 0x1388
 800297c:	4293      	cmp	r3, r2
 800297e:	d902      	bls.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	74fb      	strb	r3, [r7, #19]
            break;
 8002984:	e006      	b.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	4b0c      	ldr	r3, [pc, #48]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d0ec      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002994:	7cfb      	ldrb	r3, [r7, #19]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d10b      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800299a:	4b07      	ldr	r3, [pc, #28]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800299c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	4903      	ldr	r1, [pc, #12]	; (80029b8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80029b0:	e008      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029b2:	7cfb      	ldrb	r3, [r7, #19]
 80029b4:	74bb      	strb	r3, [r7, #18]
 80029b6:	e005      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80029b8:	40021000 	.word	0x40021000
 80029bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029c4:	7c7b      	ldrb	r3, [r7, #17]
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d105      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029ca:	4ba6      	ldr	r3, [pc, #664]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029ce:	4aa5      	ldr	r2, [pc, #660]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d00a      	beq.n	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80029e2:	4ba0      	ldr	r3, [pc, #640]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f023 0203 	bic.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	499c      	ldr	r1, [pc, #624]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d00a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a04:	4b97      	ldr	r3, [pc, #604]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a0a:	f023 020c 	bic.w	r2, r3, #12
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	4994      	ldr	r1, [pc, #592]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a14:	4313      	orrs	r3, r2
 8002a16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 0304 	and.w	r3, r3, #4
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00a      	beq.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a26:	4b8f      	ldr	r3, [pc, #572]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	498b      	ldr	r1, [pc, #556]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 0308 	and.w	r3, r3, #8
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d00a      	beq.n	8002a5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002a48:	4b86      	ldr	r3, [pc, #536]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	4983      	ldr	r1, [pc, #524]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0320 	and.w	r3, r3, #32
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00a      	beq.n	8002a80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a6a:	4b7e      	ldr	r3, [pc, #504]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695b      	ldr	r3, [r3, #20]
 8002a78:	497a      	ldr	r1, [pc, #488]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d00a      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a8c:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	4972      	ldr	r1, [pc, #456]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d00a      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002aae:	4b6d      	ldr	r3, [pc, #436]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ab0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	69db      	ldr	r3, [r3, #28]
 8002abc:	4969      	ldr	r1, [pc, #420]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002ad0:	4b64      	ldr	r3, [pc, #400]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	4961      	ldr	r1, [pc, #388]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00a      	beq.n	8002b08 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002af2:	4b5c      	ldr	r3, [pc, #368]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	4958      	ldr	r1, [pc, #352]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b14:	4b53      	ldr	r3, [pc, #332]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b22:	4950      	ldr	r1, [pc, #320]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b32:	d105      	bne.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b34:	4b4b      	ldr	r3, [pc, #300]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a4a      	ldr	r2, [pc, #296]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b3e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b4c:	4b45      	ldr	r3, [pc, #276]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b52:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5a:	4942      	ldr	r1, [pc, #264]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6a:	d105      	bne.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002b6c:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	4a3c      	ldr	r2, [pc, #240]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b76:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d015      	beq.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002b84:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4934      	ldr	r1, [pc, #208]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ba2:	d105      	bne.n	8002bb0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002baa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bae:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d015      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bbc:	4b29      	ldr	r3, [pc, #164]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bc2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bca:	4926      	ldr	r1, [pc, #152]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bd6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bda:	d105      	bne.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bdc:	4b21      	ldr	r3, [pc, #132]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	4a20      	ldr	r2, [pc, #128]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002be2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002be6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d015      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bf4:	4b1b      	ldr	r3, [pc, #108]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bfa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4918      	ldr	r1, [pc, #96]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c12:	d105      	bne.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	4a12      	ldr	r2, [pc, #72]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c1e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d015      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002c2c:	4b0d      	ldr	r3, [pc, #52]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c32:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	490a      	ldr	r1, [pc, #40]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c46:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4a04      	ldr	r2, [pc, #16]	; (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c52:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c56:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002c58:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40021000 	.word	0x40021000

08002c68 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e049      	b.n	8002d0e <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d106      	bne.n	8002c94 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f7fe fb76 	bl	8001380 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2202      	movs	r2, #2
 8002c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3304      	adds	r3, #4
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	4610      	mov	r0, r2
 8002ca8:	f000 fc00 	bl	80034ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	2201      	movs	r2, #1
 8002ce0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	2201      	movs	r2, #1
 8002cf8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2201      	movs	r2, #1
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b084      	sub	sp, #16
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d22:	2300      	movs	r3, #0
 8002d24:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <HAL_TIM_IC_Start_IT+0x1e>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	e023      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x66>
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b04      	cmp	r3, #4
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_IC_Start_IT+0x2e>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d42:	b2db      	uxtb	r3, r3
 8002d44:	e01b      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x66>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b08      	cmp	r3, #8
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_IC_Start_IT+0x3e>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d52:	b2db      	uxtb	r3, r3
 8002d54:	e013      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x66>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b0c      	cmp	r3, #12
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_IC_Start_IT+0x4e>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d62:	b2db      	uxtb	r3, r3
 8002d64:	e00b      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x66>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d104      	bne.n	8002d76 <HAL_TIM_IC_Start_IT+0x5e>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e003      	b.n	8002d7e <HAL_TIM_IC_Start_IT+0x66>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d104      	bne.n	8002d90 <HAL_TIM_IC_Start_IT+0x78>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	e013      	b.n	8002db8 <HAL_TIM_IC_Start_IT+0xa0>
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	2b04      	cmp	r3, #4
 8002d94:	d104      	bne.n	8002da0 <HAL_TIM_IC_Start_IT+0x88>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e00b      	b.n	8002db8 <HAL_TIM_IC_Start_IT+0xa0>
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d104      	bne.n	8002db0 <HAL_TIM_IC_Start_IT+0x98>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e003      	b.n	8002db8 <HAL_TIM_IC_Start_IT+0xa0>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002dba:	7bbb      	ldrb	r3, [r7, #14]
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d102      	bne.n	8002dc6 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002dc0:	7b7b      	ldrb	r3, [r7, #13]
 8002dc2:	2b01      	cmp	r3, #1
 8002dc4:	d001      	beq.n	8002dca <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e0d8      	b.n	8002f7c <HAL_TIM_IC_Start_IT+0x264>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_IC_Start_IT+0xc2>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd8:	e023      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x10a>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b04      	cmp	r3, #4
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_IC_Start_IT+0xd2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002de8:	e01b      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x10a>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_IC_Start_IT+0xe2>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002df8:	e013      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x10a>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b0c      	cmp	r3, #12
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_IC_Start_IT+0xf2>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e08:	e00b      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x10a>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b10      	cmp	r3, #16
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_IC_Start_IT+0x102>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e18:	e003      	b.n	8002e22 <HAL_TIM_IC_Start_IT+0x10a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_IC_Start_IT+0x11a>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e30:	e013      	b.n	8002e5a <HAL_TIM_IC_Start_IT+0x142>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_IC_Start_IT+0x12a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e40:	e00b      	b.n	8002e5a <HAL_TIM_IC_Start_IT+0x142>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_IC_Start_IT+0x13a>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e50:	e003      	b.n	8002e5a <HAL_TIM_IC_Start_IT+0x142>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b0c      	cmp	r3, #12
 8002e5e:	d841      	bhi.n	8002ee4 <HAL_TIM_IC_Start_IT+0x1cc>
 8002e60:	a201      	add	r2, pc, #4	; (adr r2, 8002e68 <HAL_TIM_IC_Start_IT+0x150>)
 8002e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e66:	bf00      	nop
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002ee5 	.word	0x08002ee5
 8002e70:	08002ee5 	.word	0x08002ee5
 8002e74:	08002ee5 	.word	0x08002ee5
 8002e78:	08002eaf 	.word	0x08002eaf
 8002e7c:	08002ee5 	.word	0x08002ee5
 8002e80:	08002ee5 	.word	0x08002ee5
 8002e84:	08002ee5 	.word	0x08002ee5
 8002e88:	08002ec1 	.word	0x08002ec1
 8002e8c:	08002ee5 	.word	0x08002ee5
 8002e90:	08002ee5 	.word	0x08002ee5
 8002e94:	08002ee5 	.word	0x08002ee5
 8002e98:	08002ed3 	.word	0x08002ed3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68da      	ldr	r2, [r3, #12]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0202 	orr.w	r2, r2, #2
 8002eaa:	60da      	str	r2, [r3, #12]
      break;
 8002eac:	e01d      	b.n	8002eea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f042 0204 	orr.w	r2, r2, #4
 8002ebc:	60da      	str	r2, [r3, #12]
      break;
 8002ebe:	e014      	b.n	8002eea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0208 	orr.w	r2, r2, #8
 8002ece:	60da      	str	r2, [r3, #12]
      break;
 8002ed0:	e00b      	b.n	8002eea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f042 0210 	orr.w	r2, r2, #16
 8002ee0:	60da      	str	r2, [r3, #12]
      break;
 8002ee2:	e002      	b.n	8002eea <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	bf00      	nop
  }

  if (status == HAL_OK)
 8002eea:	7bfb      	ldrb	r3, [r7, #15]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d144      	bne.n	8002f7a <HAL_TIM_IC_Start_IT+0x262>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	6839      	ldr	r1, [r7, #0]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fc85 	bl	8003808 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a20      	ldr	r2, [pc, #128]	; (8002f84 <HAL_TIM_IC_Start_IT+0x26c>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d018      	beq.n	8002f3a <HAL_TIM_IC_Start_IT+0x222>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d013      	beq.n	8002f3a <HAL_TIM_IC_Start_IT+0x222>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1c      	ldr	r2, [pc, #112]	; (8002f88 <HAL_TIM_IC_Start_IT+0x270>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d00e      	beq.n	8002f3a <HAL_TIM_IC_Start_IT+0x222>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a1a      	ldr	r2, [pc, #104]	; (8002f8c <HAL_TIM_IC_Start_IT+0x274>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d009      	beq.n	8002f3a <HAL_TIM_IC_Start_IT+0x222>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_TIM_IC_Start_IT+0x278>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d004      	beq.n	8002f3a <HAL_TIM_IC_Start_IT+0x222>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <HAL_TIM_IC_Start_IT+0x27c>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d115      	bne.n	8002f66 <HAL_TIM_IC_Start_IT+0x24e>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	4b15      	ldr	r3, [pc, #84]	; (8002f98 <HAL_TIM_IC_Start_IT+0x280>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	2b06      	cmp	r3, #6
 8002f4a:	d015      	beq.n	8002f78 <HAL_TIM_IC_Start_IT+0x260>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f52:	d011      	beq.n	8002f78 <HAL_TIM_IC_Start_IT+0x260>
      {
        __HAL_TIM_ENABLE(htim);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f042 0201 	orr.w	r2, r2, #1
 8002f62:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f64:	e008      	b.n	8002f78 <HAL_TIM_IC_Start_IT+0x260>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f042 0201 	orr.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e000      	b.n	8002f7a <HAL_TIM_IC_Start_IT+0x262>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f78:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40012c00 	.word	0x40012c00
 8002f88:	40000400 	.word	0x40000400
 8002f8c:	40000800 	.word	0x40000800
 8002f90:	40013400 	.word	0x40013400
 8002f94:	40014000 	.word	0x40014000
 8002f98:	00010007 	.word	0x00010007

08002f9c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0302 	and.w	r3, r3, #2
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d122      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d11b      	bne.n	8002ff8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0202 	mvn.w	r2, #2
 8002fc8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	699b      	ldr	r3, [r3, #24]
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7fd ff0a 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8002fe4:	e005      	b.n	8002ff2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fa42 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 fa49 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f003 0304 	and.w	r3, r3, #4
 8003002:	2b04      	cmp	r3, #4
 8003004:	d122      	bne.n	800304c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	f003 0304 	and.w	r3, r3, #4
 8003010:	2b04      	cmp	r3, #4
 8003012:	d11b      	bne.n	800304c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f06f 0204 	mvn.w	r2, #4
 800301c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2202      	movs	r2, #2
 8003022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	2b00      	cmp	r3, #0
 8003030:	d003      	beq.n	800303a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f7fd fee0 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 8003038:	e005      	b.n	8003046 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fa18 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fa1f 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	691b      	ldr	r3, [r3, #16]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b08      	cmp	r3, #8
 8003058:	d122      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	68db      	ldr	r3, [r3, #12]
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b08      	cmp	r3, #8
 8003066:	d11b      	bne.n	80030a0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f06f 0208 	mvn.w	r2, #8
 8003070:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2204      	movs	r2, #4
 8003076:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d003      	beq.n	800308e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd feb6 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 800308c:	e005      	b.n	800309a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	f000 f9ee 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f000 f9f5 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	691b      	ldr	r3, [r3, #16]
 80030a6:	f003 0310 	and.w	r3, r3, #16
 80030aa:	2b10      	cmp	r3, #16
 80030ac:	d122      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	2b10      	cmp	r3, #16
 80030ba:	d11b      	bne.n	80030f4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f06f 0210 	mvn.w	r2, #16
 80030c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2208      	movs	r2, #8
 80030ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fd fe8c 	bl	8000df8 <HAL_TIM_IC_CaptureCallback>
 80030e0:	e005      	b.n	80030ee <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 f9c4 	bl	8003470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e8:	6878      	ldr	r0, [r7, #4]
 80030ea:	f000 f9cb 	bl	8003484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	691b      	ldr	r3, [r3, #16]
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d10e      	bne.n	8003120 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b01      	cmp	r3, #1
 800310e:	d107      	bne.n	8003120 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f06f 0201 	mvn.w	r2, #1
 8003118:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f000 f99e 	bl	800345c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691b      	ldr	r3, [r3, #16]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b80      	cmp	r3, #128	; 0x80
 800312c:	d10e      	bne.n	800314c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003138:	2b80      	cmp	r3, #128	; 0x80
 800313a:	d107      	bne.n	800314c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003144:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fc10 	bl	800396c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	691b      	ldr	r3, [r3, #16]
 8003152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003156:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315a:	d10e      	bne.n	800317a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003166:	2b80      	cmp	r3, #128	; 0x80
 8003168:	d107      	bne.n	800317a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003172:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f000 fc03 	bl	8003980 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003184:	2b40      	cmp	r3, #64	; 0x40
 8003186:	d10e      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003192:	2b40      	cmp	r3, #64	; 0x40
 8003194:	d107      	bne.n	80031a6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800319e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f000 f979 	bl	8003498 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	691b      	ldr	r3, [r3, #16]
 80031ac:	f003 0320 	and.w	r3, r3, #32
 80031b0:	2b20      	cmp	r3, #32
 80031b2:	d10e      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f003 0320 	and.w	r3, r3, #32
 80031be:	2b20      	cmp	r3, #32
 80031c0:	d107      	bne.n	80031d2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f06f 0220 	mvn.w	r2, #32
 80031ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 fbc3 	bl	8003958 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031e0:	d10f      	bne.n	8003202 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68db      	ldr	r3, [r3, #12]
 80031e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031f0:	d107      	bne.n	8003202 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80031fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f000 fbc9 	bl	8003994 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	691b      	ldr	r3, [r3, #16]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003210:	d10f      	bne.n	8003232 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800321c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003220:	d107      	bne.n	8003232 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800322a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f000 fbbb 	bl	80039a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003240:	d10f      	bne.n	8003262 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68db      	ldr	r3, [r3, #12]
 8003248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003250:	d107      	bne.n	8003262 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800325a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fbad 	bl	80039bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	691b      	ldr	r3, [r3, #16]
 8003268:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800326c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003270:	d10f      	bne.n	8003292 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800327c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003280:	d107      	bne.n	8003292 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800328a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fb9f 	bl	80039d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003292:	bf00      	nop
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}

0800329a <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b086      	sub	sp, #24
 800329e:	af00      	add	r7, sp, #0
 80032a0:	60f8      	str	r0, [r7, #12]
 80032a2:	60b9      	str	r1, [r7, #8]
 80032a4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032a6:	2300      	movs	r3, #0
 80032a8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d101      	bne.n	80032b8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80032b4:	2302      	movs	r3, #2
 80032b6:	e088      	b.n	80033ca <HAL_TIM_IC_ConfigChannel+0x130>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d11b      	bne.n	80032fe <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	6819      	ldr	r1, [r3, #0]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	685a      	ldr	r2, [r3, #4]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	68db      	ldr	r3, [r3, #12]
 80032d6:	f000 f979 	bl	80035cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699a      	ldr	r2, [r3, #24]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f022 020c 	bic.w	r2, r2, #12
 80032e8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	6999      	ldr	r1, [r3, #24]
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	430a      	orrs	r2, r1
 80032fa:	619a      	str	r2, [r3, #24]
 80032fc:	e060      	b.n	80033c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b04      	cmp	r3, #4
 8003302:	d11c      	bne.n	800333e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	6818      	ldr	r0, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	6819      	ldr	r1, [r3, #0]
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	685a      	ldr	r2, [r3, #4]
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	f000 f9c2 	bl	800369c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	699a      	ldr	r2, [r3, #24]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003326:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	6999      	ldr	r1, [r3, #24]
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	689b      	ldr	r3, [r3, #8]
 8003332:	021a      	lsls	r2, r3, #8
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	619a      	str	r2, [r3, #24]
 800333c:	e040      	b.n	80033c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2b08      	cmp	r3, #8
 8003342:	d11b      	bne.n	800337c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6818      	ldr	r0, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	6819      	ldr	r1, [r3, #0]
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f000 f9df 	bl	8003716 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	69da      	ldr	r2, [r3, #28]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f022 020c 	bic.w	r2, r2, #12
 8003366:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	69d9      	ldr	r1, [r3, #28]
 800336e:	68bb      	ldr	r3, [r7, #8]
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	430a      	orrs	r2, r1
 8003378:	61da      	str	r2, [r3, #28]
 800337a:	e021      	b.n	80033c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b0c      	cmp	r3, #12
 8003380:	d11c      	bne.n	80033bc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	6819      	ldr	r1, [r3, #0]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	68bb      	ldr	r3, [r7, #8]
 8003390:	68db      	ldr	r3, [r3, #12]
 8003392:	f000 f9fc 	bl	800378e <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	69da      	ldr	r2, [r3, #28]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80033a4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	69d9      	ldr	r1, [r3, #28]
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	021a      	lsls	r2, r3, #8
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	61da      	str	r2, [r3, #28]
 80033ba:	e001      	b.n	80033c0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3718      	adds	r7, #24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b0c      	cmp	r3, #12
 80033e6:	d831      	bhi.n	800344c <HAL_TIM_ReadCapturedValue+0x78>
 80033e8:	a201      	add	r2, pc, #4	; (adr r2, 80033f0 <HAL_TIM_ReadCapturedValue+0x1c>)
 80033ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ee:	bf00      	nop
 80033f0:	08003425 	.word	0x08003425
 80033f4:	0800344d 	.word	0x0800344d
 80033f8:	0800344d 	.word	0x0800344d
 80033fc:	0800344d 	.word	0x0800344d
 8003400:	0800342f 	.word	0x0800342f
 8003404:	0800344d 	.word	0x0800344d
 8003408:	0800344d 	.word	0x0800344d
 800340c:	0800344d 	.word	0x0800344d
 8003410:	08003439 	.word	0x08003439
 8003414:	0800344d 	.word	0x0800344d
 8003418:	0800344d 	.word	0x0800344d
 800341c:	0800344d 	.word	0x0800344d
 8003420:	08003443 	.word	0x08003443
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	60fb      	str	r3, [r7, #12]

      break;
 800342c:	e00f      	b.n	800344e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	60fb      	str	r3, [r7, #12]

      break;
 8003436:	e00a      	b.n	800344e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800343e:	60fb      	str	r3, [r7, #12]

      break;
 8003440:	e005      	b.n	800344e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	60fb      	str	r3, [r7, #12]

      break;
 800344a:	e000      	b.n	800344e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800344c:	bf00      	nop
  }

  return tmpreg;
 800344e:	68fb      	ldr	r3, [r7, #12]
}
 8003450:	4618      	mov	r0, r3
 8003452:	3714      	adds	r7, #20
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003464:	bf00      	nop
 8003466:	370c      	adds	r7, #12
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003470:	b480      	push	{r7}
 8003472:	b083      	sub	sp, #12
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003478:	bf00      	nop
 800347a:	370c      	adds	r7, #12
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr

08003484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003484:	b480      	push	{r7}
 8003486:	b083      	sub	sp, #12
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr

08003498 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034a0:	bf00      	nop
 80034a2:	370c      	adds	r7, #12
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr

080034ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b085      	sub	sp, #20
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	4a3c      	ldr	r2, [pc, #240]	; (80035b0 <TIM_Base_SetConfig+0x104>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d00f      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034ca:	d00b      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a39      	ldr	r2, [pc, #228]	; (80035b4 <TIM_Base_SetConfig+0x108>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d007      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	4a38      	ldr	r2, [pc, #224]	; (80035b8 <TIM_Base_SetConfig+0x10c>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d003      	beq.n	80034e4 <TIM_Base_SetConfig+0x38>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	4a37      	ldr	r2, [pc, #220]	; (80035bc <TIM_Base_SetConfig+0x110>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d108      	bne.n	80034f6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80034ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a2d      	ldr	r2, [pc, #180]	; (80035b0 <TIM_Base_SetConfig+0x104>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d01b      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003504:	d017      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	4a2a      	ldr	r2, [pc, #168]	; (80035b4 <TIM_Base_SetConfig+0x108>)
 800350a:	4293      	cmp	r3, r2
 800350c:	d013      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	4a29      	ldr	r2, [pc, #164]	; (80035b8 <TIM_Base_SetConfig+0x10c>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d00f      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	4a28      	ldr	r2, [pc, #160]	; (80035bc <TIM_Base_SetConfig+0x110>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d00b      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	4a27      	ldr	r2, [pc, #156]	; (80035c0 <TIM_Base_SetConfig+0x114>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d007      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <TIM_Base_SetConfig+0x118>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d003      	beq.n	8003536 <TIM_Base_SetConfig+0x8a>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a25      	ldr	r2, [pc, #148]	; (80035c8 <TIM_Base_SetConfig+0x11c>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d108      	bne.n	8003548 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	68db      	ldr	r3, [r3, #12]
 8003542:	68fa      	ldr	r2, [r7, #12]
 8003544:	4313      	orrs	r3, r2
 8003546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	68fa      	ldr	r2, [r7, #12]
 800355a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	689a      	ldr	r2, [r3, #8]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <TIM_Base_SetConfig+0x104>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d00f      	beq.n	8003594 <TIM_Base_SetConfig+0xe8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a11      	ldr	r2, [pc, #68]	; (80035bc <TIM_Base_SetConfig+0x110>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d00b      	beq.n	8003594 <TIM_Base_SetConfig+0xe8>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	4a10      	ldr	r2, [pc, #64]	; (80035c0 <TIM_Base_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d007      	beq.n	8003594 <TIM_Base_SetConfig+0xe8>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	4a0f      	ldr	r2, [pc, #60]	; (80035c4 <TIM_Base_SetConfig+0x118>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d003      	beq.n	8003594 <TIM_Base_SetConfig+0xe8>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	4a0e      	ldr	r2, [pc, #56]	; (80035c8 <TIM_Base_SetConfig+0x11c>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d103      	bne.n	800359c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	691a      	ldr	r2, [r3, #16]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	615a      	str	r2, [r3, #20]
}
 80035a2:	bf00      	nop
 80035a4:	3714      	adds	r7, #20
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40000400 	.word	0x40000400
 80035b8:	40000800 	.word	0x40000800
 80035bc:	40013400 	.word	0x40013400
 80035c0:	40014000 	.word	0x40014000
 80035c4:	40014400 	.word	0x40014400
 80035c8:	40014800 	.word	0x40014800

080035cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80035cc:	b480      	push	{r7}
 80035ce:	b087      	sub	sp, #28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
 80035d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a1b      	ldr	r3, [r3, #32]
 80035de:	f023 0201 	bic.w	r2, r3, #1
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	699b      	ldr	r3, [r3, #24]
 80035ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	4a24      	ldr	r2, [pc, #144]	; (8003688 <TIM_TI1_SetConfig+0xbc>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d013      	beq.n	8003622 <TIM_TI1_SetConfig+0x56>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003600:	d00f      	beq.n	8003622 <TIM_TI1_SetConfig+0x56>
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	4a21      	ldr	r2, [pc, #132]	; (800368c <TIM_TI1_SetConfig+0xc0>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d00b      	beq.n	8003622 <TIM_TI1_SetConfig+0x56>
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4a20      	ldr	r2, [pc, #128]	; (8003690 <TIM_TI1_SetConfig+0xc4>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d007      	beq.n	8003622 <TIM_TI1_SetConfig+0x56>
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	4a1f      	ldr	r2, [pc, #124]	; (8003694 <TIM_TI1_SetConfig+0xc8>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d003      	beq.n	8003622 <TIM_TI1_SetConfig+0x56>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <TIM_TI1_SetConfig+0xcc>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d101      	bne.n	8003626 <TIM_TI1_SetConfig+0x5a>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <TIM_TI1_SetConfig+0x5c>
 8003626:	2300      	movs	r3, #0
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0303 	bic.w	r3, r3, #3
 8003632:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4313      	orrs	r3, r2
 800363a:	617b      	str	r3, [r7, #20]
 800363c:	e003      	b.n	8003646 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f043 0301 	orr.w	r3, r3, #1
 8003644:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800364c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	b2db      	uxtb	r3, r3
 8003654:	697a      	ldr	r2, [r7, #20]
 8003656:	4313      	orrs	r3, r2
 8003658:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f023 030a 	bic.w	r3, r3, #10
 8003660:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f003 030a 	and.w	r3, r3, #10
 8003668:	693a      	ldr	r2, [r7, #16]
 800366a:	4313      	orrs	r3, r2
 800366c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	693a      	ldr	r2, [r7, #16]
 8003678:	621a      	str	r2, [r3, #32]
}
 800367a:	bf00      	nop
 800367c:	371c      	adds	r7, #28
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr
 8003686:	bf00      	nop
 8003688:	40012c00 	.word	0x40012c00
 800368c:	40000400 	.word	0x40000400
 8003690:	40000800 	.word	0x40000800
 8003694:	40013400 	.word	0x40013400
 8003698:	40014000 	.word	0x40014000

0800369c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800369c:	b480      	push	{r7}
 800369e:	b087      	sub	sp, #28
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	607a      	str	r2, [r7, #4]
 80036a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f023 0210 	bic.w	r2, r3, #16
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	699b      	ldr	r3, [r3, #24]
 80036ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	021b      	lsls	r3, r3, #8
 80036ce:	697a      	ldr	r2, [r7, #20]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036da:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	031b      	lsls	r3, r3, #12
 80036e0:	b29b      	uxth	r3, r3
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036e8:	693b      	ldr	r3, [r7, #16]
 80036ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr

08003716 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003716:	b480      	push	{r7}
 8003718:	b087      	sub	sp, #28
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	607a      	str	r2, [r7, #4]
 8003722:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0303 	bic.w	r3, r3, #3
 8003742:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4313      	orrs	r3, r2
 800374a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003752:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	b2db      	uxtb	r3, r3
 800375a:	697a      	ldr	r2, [r7, #20]
 800375c:	4313      	orrs	r3, r2
 800375e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003766:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	621a      	str	r2, [r3, #32]
}
 8003782:	bf00      	nop
 8003784:	371c      	adds	r7, #28
 8003786:	46bd      	mov	sp, r7
 8003788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378c:	4770      	bx	lr

0800378e <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800378e:	b480      	push	{r7}
 8003790:	b087      	sub	sp, #28
 8003792:	af00      	add	r7, sp, #0
 8003794:	60f8      	str	r0, [r7, #12]
 8003796:	60b9      	str	r1, [r7, #8]
 8003798:	607a      	str	r2, [r7, #4]
 800379a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6a1b      	ldr	r3, [r3, #32]
 80037a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	69db      	ldr	r3, [r3, #28]
 80037ac:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6a1b      	ldr	r3, [r3, #32]
 80037b2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037ba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	697a      	ldr	r2, [r7, #20]
 80037c2:	4313      	orrs	r3, r2
 80037c4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	031b      	lsls	r3, r3, #12
 80037d2:	b29b      	uxth	r3, r3
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	4313      	orrs	r3, r2
 80037d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80037e0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	031b      	lsls	r3, r3, #12
 80037e6:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	4313      	orrs	r3, r2
 80037ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	697a      	ldr	r2, [r7, #20]
 80037f4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	621a      	str	r2, [r3, #32]
}
 80037fc:	bf00      	nop
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr

08003808 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003808:	b480      	push	{r7}
 800380a:	b087      	sub	sp, #28
 800380c:	af00      	add	r7, sp, #0
 800380e:	60f8      	str	r0, [r7, #12]
 8003810:	60b9      	str	r1, [r7, #8]
 8003812:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	f003 031f 	and.w	r3, r3, #31
 800381a:	2201      	movs	r2, #1
 800381c:	fa02 f303 	lsl.w	r3, r2, r3
 8003820:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a1a      	ldr	r2, [r3, #32]
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	43db      	mvns	r3, r3
 800382a:	401a      	ands	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6a1a      	ldr	r2, [r3, #32]
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	f003 031f 	and.w	r3, r3, #31
 800383a:	6879      	ldr	r1, [r7, #4]
 800383c:	fa01 f303 	lsl.w	r3, r1, r3
 8003840:	431a      	orrs	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
}
 8003846:	bf00      	nop
 8003848:	371c      	adds	r7, #28
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
	...

08003854 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
 800385c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003868:	2302      	movs	r3, #2
 800386a:	e065      	b.n	8003938 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2202      	movs	r2, #2
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a2c      	ldr	r2, [pc, #176]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d004      	beq.n	80038a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a2b      	ldr	r2, [pc, #172]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80038b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038bc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a1b      	ldr	r2, [pc, #108]	; (8003944 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d018      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038e2:	d013      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a18      	ldr	r2, [pc, #96]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00e      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a17      	ldr	r2, [pc, #92]	; (8003950 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80038f4:	4293      	cmp	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d004      	beq.n	800390c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a13      	ldr	r2, [pc, #76]	; (8003954 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d10c      	bne.n	8003926 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003912:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	4313      	orrs	r3, r2
 800391c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3714      	adds	r7, #20
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr
 8003944:	40012c00 	.word	0x40012c00
 8003948:	40013400 	.word	0x40013400
 800394c:	40000400 	.word	0x40000400
 8003950:	40000800 	.word	0x40000800
 8003954:	40014000 	.word	0x40014000

08003958 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr

0800396c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003980:	b480      	push	{r7}
 8003982:	b083      	sub	sp, #12
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003988:	bf00      	nop
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b083      	sub	sp, #12
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr

080039a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80039b0:	bf00      	nop
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80039d8:	bf00      	nop
 80039da:	370c      	adds	r7, #12
 80039dc:	46bd      	mov	sp, r7
 80039de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e2:	4770      	bx	lr

080039e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d101      	bne.n	80039f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e042      	b.n	8003a7c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f7fd fc61 	bl	80012d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2224      	movs	r2, #36	; 0x24
 8003a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f022 0201 	bic.w	r2, r2, #1
 8003a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 f8c2 	bl	8003bb0 <UART_SetConfig>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e022      	b.n	8003a7c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fb82 	bl	8004148 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	685a      	ldr	r2, [r3, #4]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	689a      	ldr	r2, [r3, #8]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f042 0201 	orr.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 fc09 	bl	800428c <UART_CheckIdleState>
 8003a7a:	4603      	mov	r3, r0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3708      	adds	r7, #8
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08a      	sub	sp, #40	; 0x28
 8003a88:	af02      	add	r7, sp, #8
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	603b      	str	r3, [r7, #0]
 8003a90:	4613      	mov	r3, r2
 8003a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a9a:	2b20      	cmp	r3, #32
 8003a9c:	f040 8083 	bne.w	8003ba6 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003aa0:	68bb      	ldr	r3, [r7, #8]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <HAL_UART_Transmit+0x28>
 8003aa6:	88fb      	ldrh	r3, [r7, #6]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e07b      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_UART_Transmit+0x3a>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e074      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2221      	movs	r2, #33	; 0x21
 8003ad2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ad6:	f7fd fe17 	bl	8001708 <HAL_GetTick>
 8003ada:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	88fa      	ldrh	r2, [r7, #6]
 8003ae0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	88fa      	ldrh	r2, [r7, #6]
 8003ae8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003af4:	d108      	bne.n	8003b08 <HAL_UART_Transmit+0x84>
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d104      	bne.n	8003b08 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003afe:	2300      	movs	r3, #0
 8003b00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	61bb      	str	r3, [r7, #24]
 8003b06:	e003      	b.n	8003b10 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8003b18:	e02c      	b.n	8003b74 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	9300      	str	r3, [sp, #0]
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	2200      	movs	r2, #0
 8003b22:	2180      	movs	r1, #128	; 0x80
 8003b24:	68f8      	ldr	r0, [r7, #12]
 8003b26:	f000 fbfc 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d001      	beq.n	8003b34 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e039      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10b      	bne.n	8003b52 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	881b      	ldrh	r3, [r3, #0]
 8003b3e:	461a      	mov	r2, r3
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b48:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	3302      	adds	r3, #2
 8003b4e:	61bb      	str	r3, [r7, #24]
 8003b50:	e007      	b.n	8003b62 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b52:	69fb      	ldr	r3, [r7, #28]
 8003b54:	781a      	ldrb	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b5c:	69fb      	ldr	r3, [r7, #28]
 8003b5e:	3301      	adds	r3, #1
 8003b60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d1cc      	bne.n	8003b1a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	9300      	str	r3, [sp, #0]
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	2200      	movs	r2, #0
 8003b88:	2140      	movs	r1, #64	; 0x40
 8003b8a:	68f8      	ldr	r0, [r7, #12]
 8003b8c:	f000 fbc9 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d001      	beq.n	8003b9a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e006      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2220      	movs	r2, #32
 8003b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	e000      	b.n	8003ba8 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003ba6:	2302      	movs	r3, #2
  }
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3720      	adds	r7, #32
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb4:	b08c      	sub	sp, #48	; 0x30
 8003bb6:	af00      	add	r7, sp, #0
 8003bb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	689a      	ldr	r2, [r3, #8]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	431a      	orrs	r2, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	69db      	ldr	r3, [r3, #28]
 8003bd4:	4313      	orrs	r3, r2
 8003bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4bab      	ldr	r3, [pc, #684]	; (8003e8c <UART_SetConfig+0x2dc>)
 8003be0:	4013      	ands	r3, r2
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	6812      	ldr	r2, [r2, #0]
 8003be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003bf6:	697b      	ldr	r3, [r7, #20]
 8003bf8:	68da      	ldr	r2, [r3, #12]
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	699b      	ldr	r3, [r3, #24]
 8003c06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4aa0      	ldr	r2, [pc, #640]	; (8003e90 <UART_SetConfig+0x2e0>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d004      	beq.n	8003c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003c12:	697b      	ldr	r3, [r7, #20]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003c26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	6812      	ldr	r2, [r2, #0]
 8003c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c30:	430b      	orrs	r3, r1
 8003c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3a:	f023 010f 	bic.w	r1, r3, #15
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	430a      	orrs	r2, r1
 8003c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a91      	ldr	r2, [pc, #580]	; (8003e94 <UART_SetConfig+0x2e4>)
 8003c50:	4293      	cmp	r3, r2
 8003c52:	d125      	bne.n	8003ca0 <UART_SetConfig+0xf0>
 8003c54:	4b90      	ldr	r3, [pc, #576]	; (8003e98 <UART_SetConfig+0x2e8>)
 8003c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c5a:	f003 0303 	and.w	r3, r3, #3
 8003c5e:	2b03      	cmp	r3, #3
 8003c60:	d81a      	bhi.n	8003c98 <UART_SetConfig+0xe8>
 8003c62:	a201      	add	r2, pc, #4	; (adr r2, 8003c68 <UART_SetConfig+0xb8>)
 8003c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c68:	08003c79 	.word	0x08003c79
 8003c6c:	08003c89 	.word	0x08003c89
 8003c70:	08003c81 	.word	0x08003c81
 8003c74:	08003c91 	.word	0x08003c91
 8003c78:	2301      	movs	r3, #1
 8003c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c7e:	e0d6      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003c80:	2302      	movs	r3, #2
 8003c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c86:	e0d2      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003c88:	2304      	movs	r3, #4
 8003c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8e:	e0ce      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003c90:	2308      	movs	r3, #8
 8003c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c96:	e0ca      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003c98:	2310      	movs	r3, #16
 8003c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9e:	e0c6      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a7d      	ldr	r2, [pc, #500]	; (8003e9c <UART_SetConfig+0x2ec>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d138      	bne.n	8003d1c <UART_SetConfig+0x16c>
 8003caa:	4b7b      	ldr	r3, [pc, #492]	; (8003e98 <UART_SetConfig+0x2e8>)
 8003cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb0:	f003 030c 	and.w	r3, r3, #12
 8003cb4:	2b0c      	cmp	r3, #12
 8003cb6:	d82d      	bhi.n	8003d14 <UART_SetConfig+0x164>
 8003cb8:	a201      	add	r2, pc, #4	; (adr r2, 8003cc0 <UART_SetConfig+0x110>)
 8003cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbe:	bf00      	nop
 8003cc0:	08003cf5 	.word	0x08003cf5
 8003cc4:	08003d15 	.word	0x08003d15
 8003cc8:	08003d15 	.word	0x08003d15
 8003ccc:	08003d15 	.word	0x08003d15
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003d15 	.word	0x08003d15
 8003cd8:	08003d15 	.word	0x08003d15
 8003cdc:	08003d15 	.word	0x08003d15
 8003ce0:	08003cfd 	.word	0x08003cfd
 8003ce4:	08003d15 	.word	0x08003d15
 8003ce8:	08003d15 	.word	0x08003d15
 8003cec:	08003d15 	.word	0x08003d15
 8003cf0:	08003d0d 	.word	0x08003d0d
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cfa:	e098      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003cfc:	2302      	movs	r3, #2
 8003cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d02:	e094      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d04:	2304      	movs	r3, #4
 8003d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d0a:	e090      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d0c:	2308      	movs	r3, #8
 8003d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d12:	e08c      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d14:	2310      	movs	r3, #16
 8003d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d1a:	e088      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d1c:	697b      	ldr	r3, [r7, #20]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a5f      	ldr	r2, [pc, #380]	; (8003ea0 <UART_SetConfig+0x2f0>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d125      	bne.n	8003d72 <UART_SetConfig+0x1c2>
 8003d26:	4b5c      	ldr	r3, [pc, #368]	; (8003e98 <UART_SetConfig+0x2e8>)
 8003d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003d30:	2b30      	cmp	r3, #48	; 0x30
 8003d32:	d016      	beq.n	8003d62 <UART_SetConfig+0x1b2>
 8003d34:	2b30      	cmp	r3, #48	; 0x30
 8003d36:	d818      	bhi.n	8003d6a <UART_SetConfig+0x1ba>
 8003d38:	2b20      	cmp	r3, #32
 8003d3a:	d00a      	beq.n	8003d52 <UART_SetConfig+0x1a2>
 8003d3c:	2b20      	cmp	r3, #32
 8003d3e:	d814      	bhi.n	8003d6a <UART_SetConfig+0x1ba>
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d002      	beq.n	8003d4a <UART_SetConfig+0x19a>
 8003d44:	2b10      	cmp	r3, #16
 8003d46:	d008      	beq.n	8003d5a <UART_SetConfig+0x1aa>
 8003d48:	e00f      	b.n	8003d6a <UART_SetConfig+0x1ba>
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d50:	e06d      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d52:	2302      	movs	r3, #2
 8003d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d58:	e069      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d5a:	2304      	movs	r3, #4
 8003d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d60:	e065      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d62:	2308      	movs	r3, #8
 8003d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d68:	e061      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d6a:	2310      	movs	r3, #16
 8003d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d70:	e05d      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a4b      	ldr	r2, [pc, #300]	; (8003ea4 <UART_SetConfig+0x2f4>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d125      	bne.n	8003dc8 <UART_SetConfig+0x218>
 8003d7c:	4b46      	ldr	r3, [pc, #280]	; (8003e98 <UART_SetConfig+0x2e8>)
 8003d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d86:	2bc0      	cmp	r3, #192	; 0xc0
 8003d88:	d016      	beq.n	8003db8 <UART_SetConfig+0x208>
 8003d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8003d8c:	d818      	bhi.n	8003dc0 <UART_SetConfig+0x210>
 8003d8e:	2b80      	cmp	r3, #128	; 0x80
 8003d90:	d00a      	beq.n	8003da8 <UART_SetConfig+0x1f8>
 8003d92:	2b80      	cmp	r3, #128	; 0x80
 8003d94:	d814      	bhi.n	8003dc0 <UART_SetConfig+0x210>
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d002      	beq.n	8003da0 <UART_SetConfig+0x1f0>
 8003d9a:	2b40      	cmp	r3, #64	; 0x40
 8003d9c:	d008      	beq.n	8003db0 <UART_SetConfig+0x200>
 8003d9e:	e00f      	b.n	8003dc0 <UART_SetConfig+0x210>
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e042      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003da8:	2302      	movs	r3, #2
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e03e      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003db0:	2304      	movs	r3, #4
 8003db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003db6:	e03a      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003db8:	2308      	movs	r3, #8
 8003dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dbe:	e036      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dc6:	e032      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <UART_SetConfig+0x2e0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d12a      	bne.n	8003e28 <UART_SetConfig+0x278>
 8003dd2:	4b31      	ldr	r3, [pc, #196]	; (8003e98 <UART_SetConfig+0x2e8>)
 8003dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003ddc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003de0:	d01a      	beq.n	8003e18 <UART_SetConfig+0x268>
 8003de2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003de6:	d81b      	bhi.n	8003e20 <UART_SetConfig+0x270>
 8003de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dec:	d00c      	beq.n	8003e08 <UART_SetConfig+0x258>
 8003dee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003df2:	d815      	bhi.n	8003e20 <UART_SetConfig+0x270>
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <UART_SetConfig+0x250>
 8003df8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dfc:	d008      	beq.n	8003e10 <UART_SetConfig+0x260>
 8003dfe:	e00f      	b.n	8003e20 <UART_SetConfig+0x270>
 8003e00:	2300      	movs	r3, #0
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e012      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003e08:	2302      	movs	r3, #2
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e00e      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003e10:	2304      	movs	r3, #4
 8003e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e16:	e00a      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003e18:	2308      	movs	r3, #8
 8003e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e1e:	e006      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003e20:	2310      	movs	r3, #16
 8003e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e26:	e002      	b.n	8003e2e <UART_SetConfig+0x27e>
 8003e28:	2310      	movs	r3, #16
 8003e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4a17      	ldr	r2, [pc, #92]	; (8003e90 <UART_SetConfig+0x2e0>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	f040 80a8 	bne.w	8003f8a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e3a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d834      	bhi.n	8003eac <UART_SetConfig+0x2fc>
 8003e42:	a201      	add	r2, pc, #4	; (adr r2, 8003e48 <UART_SetConfig+0x298>)
 8003e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e48:	08003e6d 	.word	0x08003e6d
 8003e4c:	08003ead 	.word	0x08003ead
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003ead 	.word	0x08003ead
 8003e58:	08003e7b 	.word	0x08003e7b
 8003e5c:	08003ead 	.word	0x08003ead
 8003e60:	08003ead 	.word	0x08003ead
 8003e64:	08003ead 	.word	0x08003ead
 8003e68:	08003e83 	.word	0x08003e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e6c:	f7fe fc9a 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003e70:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e72:	e021      	b.n	8003eb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e74:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <UART_SetConfig+0x2f8>)
 8003e76:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e78:	e01e      	b.n	8003eb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e7a:	f7fe fc25 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003e7e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e80:	e01a      	b.n	8003eb8 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e88:	e016      	b.n	8003eb8 <UART_SetConfig+0x308>
 8003e8a:	bf00      	nop
 8003e8c:	cfff69f3 	.word	0xcfff69f3
 8003e90:	40008000 	.word	0x40008000
 8003e94:	40013800 	.word	0x40013800
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40004400 	.word	0x40004400
 8003ea0:	40004800 	.word	0x40004800
 8003ea4:	40004c00 	.word	0x40004c00
 8003ea8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003eb6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	f000 812a 	beq.w	8004114 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec4:	4a9e      	ldr	r2, [pc, #632]	; (8004140 <UART_SetConfig+0x590>)
 8003ec6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eca:	461a      	mov	r2, r3
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	005b      	lsls	r3, r3, #1
 8003edc:	4413      	add	r3, r2
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d305      	bcc.n	8003ef0 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eea:	69ba      	ldr	r2, [r7, #24]
 8003eec:	429a      	cmp	r2, r3
 8003eee:	d903      	bls.n	8003ef8 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003ef6:	e10d      	b.n	8004114 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efa:	2200      	movs	r2, #0
 8003efc:	60bb      	str	r3, [r7, #8]
 8003efe:	60fa      	str	r2, [r7, #12]
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f04:	4a8e      	ldr	r2, [pc, #568]	; (8004140 <UART_SetConfig+0x590>)
 8003f06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	603b      	str	r3, [r7, #0]
 8003f10:	607a      	str	r2, [r7, #4]
 8003f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f16:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f1a:	f7fc fdbf 	bl	8000a9c <__aeabi_uldivmod>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	4610      	mov	r0, r2
 8003f24:	4619      	mov	r1, r3
 8003f26:	f04f 0200 	mov.w	r2, #0
 8003f2a:	f04f 0300 	mov.w	r3, #0
 8003f2e:	020b      	lsls	r3, r1, #8
 8003f30:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f34:	0202      	lsls	r2, r0, #8
 8003f36:	6979      	ldr	r1, [r7, #20]
 8003f38:	6849      	ldr	r1, [r1, #4]
 8003f3a:	0849      	lsrs	r1, r1, #1
 8003f3c:	2000      	movs	r0, #0
 8003f3e:	460c      	mov	r4, r1
 8003f40:	4605      	mov	r5, r0
 8003f42:	eb12 0804 	adds.w	r8, r2, r4
 8003f46:	eb43 0905 	adc.w	r9, r3, r5
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	469a      	mov	sl, r3
 8003f52:	4693      	mov	fp, r2
 8003f54:	4652      	mov	r2, sl
 8003f56:	465b      	mov	r3, fp
 8003f58:	4640      	mov	r0, r8
 8003f5a:	4649      	mov	r1, r9
 8003f5c:	f7fc fd9e 	bl	8000a9c <__aeabi_uldivmod>
 8003f60:	4602      	mov	r2, r0
 8003f62:	460b      	mov	r3, r1
 8003f64:	4613      	mov	r3, r2
 8003f66:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f68:	6a3b      	ldr	r3, [r7, #32]
 8003f6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f6e:	d308      	bcc.n	8003f82 <UART_SetConfig+0x3d2>
 8003f70:	6a3b      	ldr	r3, [r7, #32]
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f76:	d204      	bcs.n	8003f82 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	6a3a      	ldr	r2, [r7, #32]
 8003f7e:	60da      	str	r2, [r3, #12]
 8003f80:	e0c8      	b.n	8004114 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f88:	e0c4      	b.n	8004114 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	69db      	ldr	r3, [r3, #28]
 8003f8e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f92:	d167      	bne.n	8004064 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003f94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f98:	2b08      	cmp	r3, #8
 8003f9a:	d828      	bhi.n	8003fee <UART_SetConfig+0x43e>
 8003f9c:	a201      	add	r2, pc, #4	; (adr r2, 8003fa4 <UART_SetConfig+0x3f4>)
 8003f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fa2:	bf00      	nop
 8003fa4:	08003fc9 	.word	0x08003fc9
 8003fa8:	08003fd1 	.word	0x08003fd1
 8003fac:	08003fd9 	.word	0x08003fd9
 8003fb0:	08003fef 	.word	0x08003fef
 8003fb4:	08003fdf 	.word	0x08003fdf
 8003fb8:	08003fef 	.word	0x08003fef
 8003fbc:	08003fef 	.word	0x08003fef
 8003fc0:	08003fef 	.word	0x08003fef
 8003fc4:	08003fe7 	.word	0x08003fe7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fc8:	f7fe fbec 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 8003fcc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fce:	e014      	b.n	8003ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fd0:	f7fe fbfe 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 8003fd4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fd6:	e010      	b.n	8003ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fd8:	4b5a      	ldr	r3, [pc, #360]	; (8004144 <UART_SetConfig+0x594>)
 8003fda:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fdc:	e00d      	b.n	8003ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fde:	f7fe fb73 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8003fe2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fe4:	e009      	b.n	8003ffa <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fe6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fec:	e005      	b.n	8003ffa <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ff8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	f000 8089 	beq.w	8004114 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004006:	4a4e      	ldr	r2, [pc, #312]	; (8004140 <UART_SetConfig+0x590>)
 8004008:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800400c:	461a      	mov	r2, r3
 800400e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004010:	fbb3 f3f2 	udiv	r3, r3, r2
 8004014:	005a      	lsls	r2, r3, #1
 8004016:	697b      	ldr	r3, [r7, #20]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	085b      	lsrs	r3, r3, #1
 800401c:	441a      	add	r2, r3
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	fbb2 f3f3 	udiv	r3, r2, r3
 8004026:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004028:	6a3b      	ldr	r3, [r7, #32]
 800402a:	2b0f      	cmp	r3, #15
 800402c:	d916      	bls.n	800405c <UART_SetConfig+0x4ac>
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d212      	bcs.n	800405c <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004036:	6a3b      	ldr	r3, [r7, #32]
 8004038:	b29b      	uxth	r3, r3
 800403a:	f023 030f 	bic.w	r3, r3, #15
 800403e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	085b      	lsrs	r3, r3, #1
 8004044:	b29b      	uxth	r3, r3
 8004046:	f003 0307 	and.w	r3, r3, #7
 800404a:	b29a      	uxth	r2, r3
 800404c:	8bfb      	ldrh	r3, [r7, #30]
 800404e:	4313      	orrs	r3, r2
 8004050:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	8bfa      	ldrh	r2, [r7, #30]
 8004058:	60da      	str	r2, [r3, #12]
 800405a:	e05b      	b.n	8004114 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004062:	e057      	b.n	8004114 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004064:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004068:	2b08      	cmp	r3, #8
 800406a:	d828      	bhi.n	80040be <UART_SetConfig+0x50e>
 800406c:	a201      	add	r2, pc, #4	; (adr r2, 8004074 <UART_SetConfig+0x4c4>)
 800406e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004072:	bf00      	nop
 8004074:	08004099 	.word	0x08004099
 8004078:	080040a1 	.word	0x080040a1
 800407c:	080040a9 	.word	0x080040a9
 8004080:	080040bf 	.word	0x080040bf
 8004084:	080040af 	.word	0x080040af
 8004088:	080040bf 	.word	0x080040bf
 800408c:	080040bf 	.word	0x080040bf
 8004090:	080040bf 	.word	0x080040bf
 8004094:	080040b7 	.word	0x080040b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004098:	f7fe fb84 	bl	80027a4 <HAL_RCC_GetPCLK1Freq>
 800409c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800409e:	e014      	b.n	80040ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80040a0:	f7fe fb96 	bl	80027d0 <HAL_RCC_GetPCLK2Freq>
 80040a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040a6:	e010      	b.n	80040ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040a8:	4b26      	ldr	r3, [pc, #152]	; (8004144 <UART_SetConfig+0x594>)
 80040aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040ac:	e00d      	b.n	80040ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040ae:	f7fe fb0b 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 80040b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040b4:	e009      	b.n	80040ca <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040bc:	e005      	b.n	80040ca <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80040be:	2300      	movs	r3, #0
 80040c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040c8:	bf00      	nop
    }

    if (pclk != 0U)
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d021      	beq.n	8004114 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d4:	4a1a      	ldr	r2, [pc, #104]	; (8004140 <UART_SetConfig+0x590>)
 80040d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040da:	461a      	mov	r2, r3
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	fbb3 f2f2 	udiv	r2, r3, r2
 80040e2:	697b      	ldr	r3, [r7, #20]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	085b      	lsrs	r3, r3, #1
 80040e8:	441a      	add	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80040f2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	2b0f      	cmp	r3, #15
 80040f8:	d909      	bls.n	800410e <UART_SetConfig+0x55e>
 80040fa:	6a3b      	ldr	r3, [r7, #32]
 80040fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004100:	d205      	bcs.n	800410e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004102:	6a3b      	ldr	r3, [r7, #32]
 8004104:	b29a      	uxth	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	e002      	b.n	8004114 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	2201      	movs	r2, #1
 8004118:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2201      	movs	r2, #1
 8004120:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	2200      	movs	r2, #0
 8004128:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800412a:	697b      	ldr	r3, [r7, #20]
 800412c:	2200      	movs	r2, #0
 800412e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8004130:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004134:	4618      	mov	r0, r3
 8004136:	3730      	adds	r7, #48	; 0x30
 8004138:	46bd      	mov	sp, r7
 800413a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800413e:	bf00      	nop
 8004140:	08005684 	.word	0x08005684
 8004144:	00f42400 	.word	0x00f42400

08004148 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004148:	b480      	push	{r7}
 800414a:	b083      	sub	sp, #12
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00a      	beq.n	8004172 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	430a      	orrs	r2, r1
 8004170:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00a      	beq.n	8004194 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004198:	f003 0304 	and.w	r3, r3, #4
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00a      	beq.n	80041b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	430a      	orrs	r2, r1
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d00a      	beq.n	80041d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	685b      	ldr	r3, [r3, #4]
 80041c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	430a      	orrs	r2, r1
 80041d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	f003 0310 	and.w	r3, r3, #16
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689b      	ldr	r3, [r3, #8]
 80041ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004220:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004224:	2b00      	cmp	r3, #0
 8004226:	d01a      	beq.n	800425e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004242:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004246:	d10a      	bne.n	800425e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	430a      	orrs	r2, r1
 800425c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	430a      	orrs	r2, r1
 800427e:	605a      	str	r2, [r3, #4]
  }
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b086      	sub	sp, #24
 8004290:	af02      	add	r7, sp, #8
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800429c:	f7fd fa34 	bl	8001708 <HAL_GetTick>
 80042a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d10e      	bne.n	80042ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f000 f82f 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 80042c4:	4603      	mov	r3, r0
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d001      	beq.n	80042ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e025      	b.n	800431a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f003 0304 	and.w	r3, r3, #4
 80042d8:	2b04      	cmp	r3, #4
 80042da:	d10e      	bne.n	80042fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80042dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80042e0:	9300      	str	r3, [sp, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f819 	bl	8004322 <UART_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f6:	2303      	movs	r3, #3
 80042f8:	e00f      	b.n	800431a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2220      	movs	r2, #32
 8004306:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2200      	movs	r2, #0
 800430e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2200      	movs	r2, #0
 8004314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}

08004322 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004322:	b580      	push	{r7, lr}
 8004324:	b09c      	sub	sp, #112	; 0x70
 8004326:	af00      	add	r7, sp, #0
 8004328:	60f8      	str	r0, [r7, #12]
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	603b      	str	r3, [r7, #0]
 800432e:	4613      	mov	r3, r2
 8004330:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004332:	e0a9      	b.n	8004488 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004334:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433a:	f000 80a5 	beq.w	8004488 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433e:	f7fd f9e3 	bl	8001708 <HAL_GetTick>
 8004342:	4602      	mov	r2, r0
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	1ad3      	subs	r3, r2, r3
 8004348:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800434a:	429a      	cmp	r2, r3
 800434c:	d302      	bcc.n	8004354 <UART_WaitOnFlagUntilTimeout+0x32>
 800434e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004350:	2b00      	cmp	r3, #0
 8004352:	d140      	bne.n	80043d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004364:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004368:	667b      	str	r3, [r7, #100]	; 0x64
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	461a      	mov	r2, r3
 8004370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004372:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004374:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004378:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004380:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e6      	bne.n	8004354 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	3308      	adds	r3, #8
 800438c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800438e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004390:	e853 3f00 	ldrex	r3, [r3]
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	f023 0301 	bic.w	r3, r3, #1
 800439c:	663b      	str	r3, [r7, #96]	; 0x60
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	3308      	adds	r3, #8
 80043a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80043a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80043a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80043ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ae:	e841 2300 	strex	r3, r2, [r1]
 80043b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80043b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d1e5      	bne.n	8004386 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2220      	movs	r2, #32
 80043be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2220      	movs	r2, #32
 80043c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e069      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0304 	and.w	r3, r3, #4
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d051      	beq.n	8004488 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	69db      	ldr	r3, [r3, #28]
 80043ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f2:	d149      	bne.n	8004488 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80043fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004406:	e853 3f00 	ldrex	r3, [r3]
 800440a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004412:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	461a      	mov	r2, r3
 800441a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800441c:	637b      	str	r3, [r7, #52]	; 0x34
 800441e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004420:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004424:	e841 2300 	strex	r3, r2, [r1]
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800442a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800442c:	2b00      	cmp	r3, #0
 800442e:	d1e6      	bne.n	80043fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	3308      	adds	r3, #8
 8004436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	613b      	str	r3, [r7, #16]
   return(result);
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	f023 0301 	bic.w	r3, r3, #1
 8004446:	66bb      	str	r3, [r7, #104]	; 0x68
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3308      	adds	r3, #8
 800444e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004450:	623a      	str	r2, [r7, #32]
 8004452:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	69f9      	ldr	r1, [r7, #28]
 8004456:	6a3a      	ldr	r2, [r7, #32]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	61bb      	str	r3, [r7, #24]
   return(result);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e5      	bne.n	8004430 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2220      	movs	r2, #32
 8004468:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2220      	movs	r2, #32
 8004478:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e010      	b.n	80044aa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	69da      	ldr	r2, [r3, #28]
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	4013      	ands	r3, r2
 8004492:	68ba      	ldr	r2, [r7, #8]
 8004494:	429a      	cmp	r2, r3
 8004496:	bf0c      	ite	eq
 8004498:	2301      	moveq	r3, #1
 800449a:	2300      	movne	r3, #0
 800449c:	b2db      	uxtb	r3, r3
 800449e:	461a      	mov	r2, r3
 80044a0:	79fb      	ldrb	r3, [r7, #7]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	f43f af46 	beq.w	8004334 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3770      	adds	r7, #112	; 0x70
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}

080044b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80044b2:	b480      	push	{r7}
 80044b4:	b085      	sub	sp, #20
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d101      	bne.n	80044c8 <HAL_UARTEx_DisableFifoMode+0x16>
 80044c4:	2302      	movs	r3, #2
 80044c6:	e027      	b.n	8004518 <HAL_UARTEx_DisableFifoMode+0x66>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2201      	movs	r2, #1
 80044cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2224      	movs	r2, #36	; 0x24
 80044d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f022 0201 	bic.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80044f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68fa      	ldr	r2, [r7, #12]
 8004504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004534:	2b01      	cmp	r3, #1
 8004536:	d101      	bne.n	800453c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004538:	2302      	movs	r3, #2
 800453a:	e02d      	b.n	8004598 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2224      	movs	r2, #36	; 0x24
 8004548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f022 0201 	bic.w	r2, r2, #1
 8004562:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	430a      	orrs	r2, r1
 8004576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f000 f84f 	bl	800461c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2220      	movs	r2, #32
 800458a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2200      	movs	r2, #0
 8004592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004596:	2300      	movs	r3, #0
}
 8004598:	4618      	mov	r0, r3
 800459a:	3710      	adds	r7, #16
 800459c:	46bd      	mov	sp, r7
 800459e:	bd80      	pop	{r7, pc}

080045a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b084      	sub	sp, #16
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e02d      	b.n	8004614 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	; 0x24
 80045c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0201 	bic.w	r2, r2, #1
 80045de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f811 	bl	800461c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2220      	movs	r2, #32
 8004606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2200      	movs	r2, #0
 800460e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3710      	adds	r7, #16
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004628:	2b00      	cmp	r3, #0
 800462a:	d108      	bne.n	800463e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800463c:	e031      	b.n	80046a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800463e:	2308      	movs	r3, #8
 8004640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004642:	2308      	movs	r3, #8
 8004644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	0e5b      	lsrs	r3, r3, #25
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	0f5b      	lsrs	r3, r3, #29
 800465e:	b2db      	uxtb	r3, r3
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004666:	7bbb      	ldrb	r3, [r7, #14]
 8004668:	7b3a      	ldrb	r2, [r7, #12]
 800466a:	4911      	ldr	r1, [pc, #68]	; (80046b0 <UARTEx_SetNbDataToProcess+0x94>)
 800466c:	5c8a      	ldrb	r2, [r1, r2]
 800466e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004672:	7b3a      	ldrb	r2, [r7, #12]
 8004674:	490f      	ldr	r1, [pc, #60]	; (80046b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004676:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004678:	fb93 f3f2 	sdiv	r3, r3, r2
 800467c:	b29a      	uxth	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	7b7a      	ldrb	r2, [r7, #13]
 8004688:	4909      	ldr	r1, [pc, #36]	; (80046b0 <UARTEx_SetNbDataToProcess+0x94>)
 800468a:	5c8a      	ldrb	r2, [r1, r2]
 800468c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004690:	7b7a      	ldrb	r2, [r7, #13]
 8004692:	4908      	ldr	r1, [pc, #32]	; (80046b4 <UARTEx_SetNbDataToProcess+0x98>)
 8004694:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004696:	fb93 f3f2 	sdiv	r3, r3, r2
 800469a:	b29a      	uxth	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80046a2:	bf00      	nop
 80046a4:	3714      	adds	r7, #20
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr
 80046ae:	bf00      	nop
 80046b0:	0800569c 	.word	0x0800569c
 80046b4:	080056a4 	.word	0x080056a4

080046b8 <__errno>:
 80046b8:	4b01      	ldr	r3, [pc, #4]	; (80046c0 <__errno+0x8>)
 80046ba:	6818      	ldr	r0, [r3, #0]
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	2000000c 	.word	0x2000000c

080046c4 <__libc_init_array>:
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	4d0d      	ldr	r5, [pc, #52]	; (80046fc <__libc_init_array+0x38>)
 80046c8:	4c0d      	ldr	r4, [pc, #52]	; (8004700 <__libc_init_array+0x3c>)
 80046ca:	1b64      	subs	r4, r4, r5
 80046cc:	10a4      	asrs	r4, r4, #2
 80046ce:	2600      	movs	r6, #0
 80046d0:	42a6      	cmp	r6, r4
 80046d2:	d109      	bne.n	80046e8 <__libc_init_array+0x24>
 80046d4:	4d0b      	ldr	r5, [pc, #44]	; (8004704 <__libc_init_array+0x40>)
 80046d6:	4c0c      	ldr	r4, [pc, #48]	; (8004708 <__libc_init_array+0x44>)
 80046d8:	f000 ffae 	bl	8005638 <_init>
 80046dc:	1b64      	subs	r4, r4, r5
 80046de:	10a4      	asrs	r4, r4, #2
 80046e0:	2600      	movs	r6, #0
 80046e2:	42a6      	cmp	r6, r4
 80046e4:	d105      	bne.n	80046f2 <__libc_init_array+0x2e>
 80046e6:	bd70      	pop	{r4, r5, r6, pc}
 80046e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ec:	4798      	blx	r3
 80046ee:	3601      	adds	r6, #1
 80046f0:	e7ee      	b.n	80046d0 <__libc_init_array+0xc>
 80046f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80046f6:	4798      	blx	r3
 80046f8:	3601      	adds	r6, #1
 80046fa:	e7f2      	b.n	80046e2 <__libc_init_array+0x1e>
 80046fc:	0800574c 	.word	0x0800574c
 8004700:	0800574c 	.word	0x0800574c
 8004704:	0800574c 	.word	0x0800574c
 8004708:	08005750 	.word	0x08005750

0800470c <memset>:
 800470c:	4402      	add	r2, r0
 800470e:	4603      	mov	r3, r0
 8004710:	4293      	cmp	r3, r2
 8004712:	d100      	bne.n	8004716 <memset+0xa>
 8004714:	4770      	bx	lr
 8004716:	f803 1b01 	strb.w	r1, [r3], #1
 800471a:	e7f9      	b.n	8004710 <memset+0x4>

0800471c <iprintf>:
 800471c:	b40f      	push	{r0, r1, r2, r3}
 800471e:	4b0a      	ldr	r3, [pc, #40]	; (8004748 <iprintf+0x2c>)
 8004720:	b513      	push	{r0, r1, r4, lr}
 8004722:	681c      	ldr	r4, [r3, #0]
 8004724:	b124      	cbz	r4, 8004730 <iprintf+0x14>
 8004726:	69a3      	ldr	r3, [r4, #24]
 8004728:	b913      	cbnz	r3, 8004730 <iprintf+0x14>
 800472a:	4620      	mov	r0, r4
 800472c:	f000 f866 	bl	80047fc <__sinit>
 8004730:	ab05      	add	r3, sp, #20
 8004732:	9a04      	ldr	r2, [sp, #16]
 8004734:	68a1      	ldr	r1, [r4, #8]
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	4620      	mov	r0, r4
 800473a:	f000 f9bd 	bl	8004ab8 <_vfiprintf_r>
 800473e:	b002      	add	sp, #8
 8004740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004744:	b004      	add	sp, #16
 8004746:	4770      	bx	lr
 8004748:	2000000c 	.word	0x2000000c

0800474c <std>:
 800474c:	2300      	movs	r3, #0
 800474e:	b510      	push	{r4, lr}
 8004750:	4604      	mov	r4, r0
 8004752:	e9c0 3300 	strd	r3, r3, [r0]
 8004756:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800475a:	6083      	str	r3, [r0, #8]
 800475c:	8181      	strh	r1, [r0, #12]
 800475e:	6643      	str	r3, [r0, #100]	; 0x64
 8004760:	81c2      	strh	r2, [r0, #14]
 8004762:	6183      	str	r3, [r0, #24]
 8004764:	4619      	mov	r1, r3
 8004766:	2208      	movs	r2, #8
 8004768:	305c      	adds	r0, #92	; 0x5c
 800476a:	f7ff ffcf 	bl	800470c <memset>
 800476e:	4b05      	ldr	r3, [pc, #20]	; (8004784 <std+0x38>)
 8004770:	6263      	str	r3, [r4, #36]	; 0x24
 8004772:	4b05      	ldr	r3, [pc, #20]	; (8004788 <std+0x3c>)
 8004774:	62a3      	str	r3, [r4, #40]	; 0x28
 8004776:	4b05      	ldr	r3, [pc, #20]	; (800478c <std+0x40>)
 8004778:	62e3      	str	r3, [r4, #44]	; 0x2c
 800477a:	4b05      	ldr	r3, [pc, #20]	; (8004790 <std+0x44>)
 800477c:	6224      	str	r4, [r4, #32]
 800477e:	6323      	str	r3, [r4, #48]	; 0x30
 8004780:	bd10      	pop	{r4, pc}
 8004782:	bf00      	nop
 8004784:	08005061 	.word	0x08005061
 8004788:	08005083 	.word	0x08005083
 800478c:	080050bb 	.word	0x080050bb
 8004790:	080050df 	.word	0x080050df

08004794 <_cleanup_r>:
 8004794:	4901      	ldr	r1, [pc, #4]	; (800479c <_cleanup_r+0x8>)
 8004796:	f000 b8af 	b.w	80048f8 <_fwalk_reent>
 800479a:	bf00      	nop
 800479c:	080053b9 	.word	0x080053b9

080047a0 <__sfmoreglue>:
 80047a0:	b570      	push	{r4, r5, r6, lr}
 80047a2:	2268      	movs	r2, #104	; 0x68
 80047a4:	1e4d      	subs	r5, r1, #1
 80047a6:	4355      	muls	r5, r2
 80047a8:	460e      	mov	r6, r1
 80047aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80047ae:	f000 f8e5 	bl	800497c <_malloc_r>
 80047b2:	4604      	mov	r4, r0
 80047b4:	b140      	cbz	r0, 80047c8 <__sfmoreglue+0x28>
 80047b6:	2100      	movs	r1, #0
 80047b8:	e9c0 1600 	strd	r1, r6, [r0]
 80047bc:	300c      	adds	r0, #12
 80047be:	60a0      	str	r0, [r4, #8]
 80047c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80047c4:	f7ff ffa2 	bl	800470c <memset>
 80047c8:	4620      	mov	r0, r4
 80047ca:	bd70      	pop	{r4, r5, r6, pc}

080047cc <__sfp_lock_acquire>:
 80047cc:	4801      	ldr	r0, [pc, #4]	; (80047d4 <__sfp_lock_acquire+0x8>)
 80047ce:	f000 b8b3 	b.w	8004938 <__retarget_lock_acquire_recursive>
 80047d2:	bf00      	nop
 80047d4:	20000181 	.word	0x20000181

080047d8 <__sfp_lock_release>:
 80047d8:	4801      	ldr	r0, [pc, #4]	; (80047e0 <__sfp_lock_release+0x8>)
 80047da:	f000 b8ae 	b.w	800493a <__retarget_lock_release_recursive>
 80047de:	bf00      	nop
 80047e0:	20000181 	.word	0x20000181

080047e4 <__sinit_lock_acquire>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__sinit_lock_acquire+0x8>)
 80047e6:	f000 b8a7 	b.w	8004938 <__retarget_lock_acquire_recursive>
 80047ea:	bf00      	nop
 80047ec:	20000182 	.word	0x20000182

080047f0 <__sinit_lock_release>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__sinit_lock_release+0x8>)
 80047f2:	f000 b8a2 	b.w	800493a <__retarget_lock_release_recursive>
 80047f6:	bf00      	nop
 80047f8:	20000182 	.word	0x20000182

080047fc <__sinit>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	f7ff fff0 	bl	80047e4 <__sinit_lock_acquire>
 8004804:	69a3      	ldr	r3, [r4, #24]
 8004806:	b11b      	cbz	r3, 8004810 <__sinit+0x14>
 8004808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480c:	f7ff bff0 	b.w	80047f0 <__sinit_lock_release>
 8004810:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004814:	6523      	str	r3, [r4, #80]	; 0x50
 8004816:	4b13      	ldr	r3, [pc, #76]	; (8004864 <__sinit+0x68>)
 8004818:	4a13      	ldr	r2, [pc, #76]	; (8004868 <__sinit+0x6c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	62a2      	str	r2, [r4, #40]	; 0x28
 800481e:	42a3      	cmp	r3, r4
 8004820:	bf04      	itt	eq
 8004822:	2301      	moveq	r3, #1
 8004824:	61a3      	streq	r3, [r4, #24]
 8004826:	4620      	mov	r0, r4
 8004828:	f000 f820 	bl	800486c <__sfp>
 800482c:	6060      	str	r0, [r4, #4]
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f81c 	bl	800486c <__sfp>
 8004834:	60a0      	str	r0, [r4, #8]
 8004836:	4620      	mov	r0, r4
 8004838:	f000 f818 	bl	800486c <__sfp>
 800483c:	2200      	movs	r2, #0
 800483e:	60e0      	str	r0, [r4, #12]
 8004840:	2104      	movs	r1, #4
 8004842:	6860      	ldr	r0, [r4, #4]
 8004844:	f7ff ff82 	bl	800474c <std>
 8004848:	68a0      	ldr	r0, [r4, #8]
 800484a:	2201      	movs	r2, #1
 800484c:	2109      	movs	r1, #9
 800484e:	f7ff ff7d 	bl	800474c <std>
 8004852:	68e0      	ldr	r0, [r4, #12]
 8004854:	2202      	movs	r2, #2
 8004856:	2112      	movs	r1, #18
 8004858:	f7ff ff78 	bl	800474c <std>
 800485c:	2301      	movs	r3, #1
 800485e:	61a3      	str	r3, [r4, #24]
 8004860:	e7d2      	b.n	8004808 <__sinit+0xc>
 8004862:	bf00      	nop
 8004864:	080056ac 	.word	0x080056ac
 8004868:	08004795 	.word	0x08004795

0800486c <__sfp>:
 800486c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800486e:	4607      	mov	r7, r0
 8004870:	f7ff ffac 	bl	80047cc <__sfp_lock_acquire>
 8004874:	4b1e      	ldr	r3, [pc, #120]	; (80048f0 <__sfp+0x84>)
 8004876:	681e      	ldr	r6, [r3, #0]
 8004878:	69b3      	ldr	r3, [r6, #24]
 800487a:	b913      	cbnz	r3, 8004882 <__sfp+0x16>
 800487c:	4630      	mov	r0, r6
 800487e:	f7ff ffbd 	bl	80047fc <__sinit>
 8004882:	3648      	adds	r6, #72	; 0x48
 8004884:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004888:	3b01      	subs	r3, #1
 800488a:	d503      	bpl.n	8004894 <__sfp+0x28>
 800488c:	6833      	ldr	r3, [r6, #0]
 800488e:	b30b      	cbz	r3, 80048d4 <__sfp+0x68>
 8004890:	6836      	ldr	r6, [r6, #0]
 8004892:	e7f7      	b.n	8004884 <__sfp+0x18>
 8004894:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004898:	b9d5      	cbnz	r5, 80048d0 <__sfp+0x64>
 800489a:	4b16      	ldr	r3, [pc, #88]	; (80048f4 <__sfp+0x88>)
 800489c:	60e3      	str	r3, [r4, #12]
 800489e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80048a2:	6665      	str	r5, [r4, #100]	; 0x64
 80048a4:	f000 f847 	bl	8004936 <__retarget_lock_init_recursive>
 80048a8:	f7ff ff96 	bl	80047d8 <__sfp_lock_release>
 80048ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80048b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80048b4:	6025      	str	r5, [r4, #0]
 80048b6:	61a5      	str	r5, [r4, #24]
 80048b8:	2208      	movs	r2, #8
 80048ba:	4629      	mov	r1, r5
 80048bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80048c0:	f7ff ff24 	bl	800470c <memset>
 80048c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80048c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80048cc:	4620      	mov	r0, r4
 80048ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048d0:	3468      	adds	r4, #104	; 0x68
 80048d2:	e7d9      	b.n	8004888 <__sfp+0x1c>
 80048d4:	2104      	movs	r1, #4
 80048d6:	4638      	mov	r0, r7
 80048d8:	f7ff ff62 	bl	80047a0 <__sfmoreglue>
 80048dc:	4604      	mov	r4, r0
 80048de:	6030      	str	r0, [r6, #0]
 80048e0:	2800      	cmp	r0, #0
 80048e2:	d1d5      	bne.n	8004890 <__sfp+0x24>
 80048e4:	f7ff ff78 	bl	80047d8 <__sfp_lock_release>
 80048e8:	230c      	movs	r3, #12
 80048ea:	603b      	str	r3, [r7, #0]
 80048ec:	e7ee      	b.n	80048cc <__sfp+0x60>
 80048ee:	bf00      	nop
 80048f0:	080056ac 	.word	0x080056ac
 80048f4:	ffff0001 	.word	0xffff0001

080048f8 <_fwalk_reent>:
 80048f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048fc:	4606      	mov	r6, r0
 80048fe:	4688      	mov	r8, r1
 8004900:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004904:	2700      	movs	r7, #0
 8004906:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800490a:	f1b9 0901 	subs.w	r9, r9, #1
 800490e:	d505      	bpl.n	800491c <_fwalk_reent+0x24>
 8004910:	6824      	ldr	r4, [r4, #0]
 8004912:	2c00      	cmp	r4, #0
 8004914:	d1f7      	bne.n	8004906 <_fwalk_reent+0xe>
 8004916:	4638      	mov	r0, r7
 8004918:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800491c:	89ab      	ldrh	r3, [r5, #12]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d907      	bls.n	8004932 <_fwalk_reent+0x3a>
 8004922:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004926:	3301      	adds	r3, #1
 8004928:	d003      	beq.n	8004932 <_fwalk_reent+0x3a>
 800492a:	4629      	mov	r1, r5
 800492c:	4630      	mov	r0, r6
 800492e:	47c0      	blx	r8
 8004930:	4307      	orrs	r7, r0
 8004932:	3568      	adds	r5, #104	; 0x68
 8004934:	e7e9      	b.n	800490a <_fwalk_reent+0x12>

08004936 <__retarget_lock_init_recursive>:
 8004936:	4770      	bx	lr

08004938 <__retarget_lock_acquire_recursive>:
 8004938:	4770      	bx	lr

0800493a <__retarget_lock_release_recursive>:
 800493a:	4770      	bx	lr

0800493c <sbrk_aligned>:
 800493c:	b570      	push	{r4, r5, r6, lr}
 800493e:	4e0e      	ldr	r6, [pc, #56]	; (8004978 <sbrk_aligned+0x3c>)
 8004940:	460c      	mov	r4, r1
 8004942:	6831      	ldr	r1, [r6, #0]
 8004944:	4605      	mov	r5, r0
 8004946:	b911      	cbnz	r1, 800494e <sbrk_aligned+0x12>
 8004948:	f000 fb7a 	bl	8005040 <_sbrk_r>
 800494c:	6030      	str	r0, [r6, #0]
 800494e:	4621      	mov	r1, r4
 8004950:	4628      	mov	r0, r5
 8004952:	f000 fb75 	bl	8005040 <_sbrk_r>
 8004956:	1c43      	adds	r3, r0, #1
 8004958:	d00a      	beq.n	8004970 <sbrk_aligned+0x34>
 800495a:	1cc4      	adds	r4, r0, #3
 800495c:	f024 0403 	bic.w	r4, r4, #3
 8004960:	42a0      	cmp	r0, r4
 8004962:	d007      	beq.n	8004974 <sbrk_aligned+0x38>
 8004964:	1a21      	subs	r1, r4, r0
 8004966:	4628      	mov	r0, r5
 8004968:	f000 fb6a 	bl	8005040 <_sbrk_r>
 800496c:	3001      	adds	r0, #1
 800496e:	d101      	bne.n	8004974 <sbrk_aligned+0x38>
 8004970:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004974:	4620      	mov	r0, r4
 8004976:	bd70      	pop	{r4, r5, r6, pc}
 8004978:	20000188 	.word	0x20000188

0800497c <_malloc_r>:
 800497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004980:	1ccd      	adds	r5, r1, #3
 8004982:	f025 0503 	bic.w	r5, r5, #3
 8004986:	3508      	adds	r5, #8
 8004988:	2d0c      	cmp	r5, #12
 800498a:	bf38      	it	cc
 800498c:	250c      	movcc	r5, #12
 800498e:	2d00      	cmp	r5, #0
 8004990:	4607      	mov	r7, r0
 8004992:	db01      	blt.n	8004998 <_malloc_r+0x1c>
 8004994:	42a9      	cmp	r1, r5
 8004996:	d905      	bls.n	80049a4 <_malloc_r+0x28>
 8004998:	230c      	movs	r3, #12
 800499a:	603b      	str	r3, [r7, #0]
 800499c:	2600      	movs	r6, #0
 800499e:	4630      	mov	r0, r6
 80049a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80049a4:	4e2e      	ldr	r6, [pc, #184]	; (8004a60 <_malloc_r+0xe4>)
 80049a6:	f000 fdbb 	bl	8005520 <__malloc_lock>
 80049aa:	6833      	ldr	r3, [r6, #0]
 80049ac:	461c      	mov	r4, r3
 80049ae:	bb34      	cbnz	r4, 80049fe <_malloc_r+0x82>
 80049b0:	4629      	mov	r1, r5
 80049b2:	4638      	mov	r0, r7
 80049b4:	f7ff ffc2 	bl	800493c <sbrk_aligned>
 80049b8:	1c43      	adds	r3, r0, #1
 80049ba:	4604      	mov	r4, r0
 80049bc:	d14d      	bne.n	8004a5a <_malloc_r+0xde>
 80049be:	6834      	ldr	r4, [r6, #0]
 80049c0:	4626      	mov	r6, r4
 80049c2:	2e00      	cmp	r6, #0
 80049c4:	d140      	bne.n	8004a48 <_malloc_r+0xcc>
 80049c6:	6823      	ldr	r3, [r4, #0]
 80049c8:	4631      	mov	r1, r6
 80049ca:	4638      	mov	r0, r7
 80049cc:	eb04 0803 	add.w	r8, r4, r3
 80049d0:	f000 fb36 	bl	8005040 <_sbrk_r>
 80049d4:	4580      	cmp	r8, r0
 80049d6:	d13a      	bne.n	8004a4e <_malloc_r+0xd2>
 80049d8:	6821      	ldr	r1, [r4, #0]
 80049da:	3503      	adds	r5, #3
 80049dc:	1a6d      	subs	r5, r5, r1
 80049de:	f025 0503 	bic.w	r5, r5, #3
 80049e2:	3508      	adds	r5, #8
 80049e4:	2d0c      	cmp	r5, #12
 80049e6:	bf38      	it	cc
 80049e8:	250c      	movcc	r5, #12
 80049ea:	4629      	mov	r1, r5
 80049ec:	4638      	mov	r0, r7
 80049ee:	f7ff ffa5 	bl	800493c <sbrk_aligned>
 80049f2:	3001      	adds	r0, #1
 80049f4:	d02b      	beq.n	8004a4e <_malloc_r+0xd2>
 80049f6:	6823      	ldr	r3, [r4, #0]
 80049f8:	442b      	add	r3, r5
 80049fa:	6023      	str	r3, [r4, #0]
 80049fc:	e00e      	b.n	8004a1c <_malloc_r+0xa0>
 80049fe:	6822      	ldr	r2, [r4, #0]
 8004a00:	1b52      	subs	r2, r2, r5
 8004a02:	d41e      	bmi.n	8004a42 <_malloc_r+0xc6>
 8004a04:	2a0b      	cmp	r2, #11
 8004a06:	d916      	bls.n	8004a36 <_malloc_r+0xba>
 8004a08:	1961      	adds	r1, r4, r5
 8004a0a:	42a3      	cmp	r3, r4
 8004a0c:	6025      	str	r5, [r4, #0]
 8004a0e:	bf18      	it	ne
 8004a10:	6059      	strne	r1, [r3, #4]
 8004a12:	6863      	ldr	r3, [r4, #4]
 8004a14:	bf08      	it	eq
 8004a16:	6031      	streq	r1, [r6, #0]
 8004a18:	5162      	str	r2, [r4, r5]
 8004a1a:	604b      	str	r3, [r1, #4]
 8004a1c:	4638      	mov	r0, r7
 8004a1e:	f104 060b 	add.w	r6, r4, #11
 8004a22:	f000 fd83 	bl	800552c <__malloc_unlock>
 8004a26:	f026 0607 	bic.w	r6, r6, #7
 8004a2a:	1d23      	adds	r3, r4, #4
 8004a2c:	1af2      	subs	r2, r6, r3
 8004a2e:	d0b6      	beq.n	800499e <_malloc_r+0x22>
 8004a30:	1b9b      	subs	r3, r3, r6
 8004a32:	50a3      	str	r3, [r4, r2]
 8004a34:	e7b3      	b.n	800499e <_malloc_r+0x22>
 8004a36:	6862      	ldr	r2, [r4, #4]
 8004a38:	42a3      	cmp	r3, r4
 8004a3a:	bf0c      	ite	eq
 8004a3c:	6032      	streq	r2, [r6, #0]
 8004a3e:	605a      	strne	r2, [r3, #4]
 8004a40:	e7ec      	b.n	8004a1c <_malloc_r+0xa0>
 8004a42:	4623      	mov	r3, r4
 8004a44:	6864      	ldr	r4, [r4, #4]
 8004a46:	e7b2      	b.n	80049ae <_malloc_r+0x32>
 8004a48:	4634      	mov	r4, r6
 8004a4a:	6876      	ldr	r6, [r6, #4]
 8004a4c:	e7b9      	b.n	80049c2 <_malloc_r+0x46>
 8004a4e:	230c      	movs	r3, #12
 8004a50:	603b      	str	r3, [r7, #0]
 8004a52:	4638      	mov	r0, r7
 8004a54:	f000 fd6a 	bl	800552c <__malloc_unlock>
 8004a58:	e7a1      	b.n	800499e <_malloc_r+0x22>
 8004a5a:	6025      	str	r5, [r4, #0]
 8004a5c:	e7de      	b.n	8004a1c <_malloc_r+0xa0>
 8004a5e:	bf00      	nop
 8004a60:	20000184 	.word	0x20000184

08004a64 <__sfputc_r>:
 8004a64:	6893      	ldr	r3, [r2, #8]
 8004a66:	3b01      	subs	r3, #1
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	b410      	push	{r4}
 8004a6c:	6093      	str	r3, [r2, #8]
 8004a6e:	da08      	bge.n	8004a82 <__sfputc_r+0x1e>
 8004a70:	6994      	ldr	r4, [r2, #24]
 8004a72:	42a3      	cmp	r3, r4
 8004a74:	db01      	blt.n	8004a7a <__sfputc_r+0x16>
 8004a76:	290a      	cmp	r1, #10
 8004a78:	d103      	bne.n	8004a82 <__sfputc_r+0x1e>
 8004a7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a7e:	f000 bb33 	b.w	80050e8 <__swbuf_r>
 8004a82:	6813      	ldr	r3, [r2, #0]
 8004a84:	1c58      	adds	r0, r3, #1
 8004a86:	6010      	str	r0, [r2, #0]
 8004a88:	7019      	strb	r1, [r3, #0]
 8004a8a:	4608      	mov	r0, r1
 8004a8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <__sfputs_r>:
 8004a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a94:	4606      	mov	r6, r0
 8004a96:	460f      	mov	r7, r1
 8004a98:	4614      	mov	r4, r2
 8004a9a:	18d5      	adds	r5, r2, r3
 8004a9c:	42ac      	cmp	r4, r5
 8004a9e:	d101      	bne.n	8004aa4 <__sfputs_r+0x12>
 8004aa0:	2000      	movs	r0, #0
 8004aa2:	e007      	b.n	8004ab4 <__sfputs_r+0x22>
 8004aa4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004aa8:	463a      	mov	r2, r7
 8004aaa:	4630      	mov	r0, r6
 8004aac:	f7ff ffda 	bl	8004a64 <__sfputc_r>
 8004ab0:	1c43      	adds	r3, r0, #1
 8004ab2:	d1f3      	bne.n	8004a9c <__sfputs_r+0xa>
 8004ab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ab8 <_vfiprintf_r>:
 8004ab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004abc:	460d      	mov	r5, r1
 8004abe:	b09d      	sub	sp, #116	; 0x74
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	4698      	mov	r8, r3
 8004ac4:	4606      	mov	r6, r0
 8004ac6:	b118      	cbz	r0, 8004ad0 <_vfiprintf_r+0x18>
 8004ac8:	6983      	ldr	r3, [r0, #24]
 8004aca:	b90b      	cbnz	r3, 8004ad0 <_vfiprintf_r+0x18>
 8004acc:	f7ff fe96 	bl	80047fc <__sinit>
 8004ad0:	4b89      	ldr	r3, [pc, #548]	; (8004cf8 <_vfiprintf_r+0x240>)
 8004ad2:	429d      	cmp	r5, r3
 8004ad4:	d11b      	bne.n	8004b0e <_vfiprintf_r+0x56>
 8004ad6:	6875      	ldr	r5, [r6, #4]
 8004ad8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004ada:	07d9      	lsls	r1, r3, #31
 8004adc:	d405      	bmi.n	8004aea <_vfiprintf_r+0x32>
 8004ade:	89ab      	ldrh	r3, [r5, #12]
 8004ae0:	059a      	lsls	r2, r3, #22
 8004ae2:	d402      	bmi.n	8004aea <_vfiprintf_r+0x32>
 8004ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ae6:	f7ff ff27 	bl	8004938 <__retarget_lock_acquire_recursive>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	071b      	lsls	r3, r3, #28
 8004aee:	d501      	bpl.n	8004af4 <_vfiprintf_r+0x3c>
 8004af0:	692b      	ldr	r3, [r5, #16]
 8004af2:	b9eb      	cbnz	r3, 8004b30 <_vfiprintf_r+0x78>
 8004af4:	4629      	mov	r1, r5
 8004af6:	4630      	mov	r0, r6
 8004af8:	f000 fb5a 	bl	80051b0 <__swsetup_r>
 8004afc:	b1c0      	cbz	r0, 8004b30 <_vfiprintf_r+0x78>
 8004afe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004b00:	07dc      	lsls	r4, r3, #31
 8004b02:	d50e      	bpl.n	8004b22 <_vfiprintf_r+0x6a>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b08:	b01d      	add	sp, #116	; 0x74
 8004b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b0e:	4b7b      	ldr	r3, [pc, #492]	; (8004cfc <_vfiprintf_r+0x244>)
 8004b10:	429d      	cmp	r5, r3
 8004b12:	d101      	bne.n	8004b18 <_vfiprintf_r+0x60>
 8004b14:	68b5      	ldr	r5, [r6, #8]
 8004b16:	e7df      	b.n	8004ad8 <_vfiprintf_r+0x20>
 8004b18:	4b79      	ldr	r3, [pc, #484]	; (8004d00 <_vfiprintf_r+0x248>)
 8004b1a:	429d      	cmp	r5, r3
 8004b1c:	bf08      	it	eq
 8004b1e:	68f5      	ldreq	r5, [r6, #12]
 8004b20:	e7da      	b.n	8004ad8 <_vfiprintf_r+0x20>
 8004b22:	89ab      	ldrh	r3, [r5, #12]
 8004b24:	0598      	lsls	r0, r3, #22
 8004b26:	d4ed      	bmi.n	8004b04 <_vfiprintf_r+0x4c>
 8004b28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004b2a:	f7ff ff06 	bl	800493a <__retarget_lock_release_recursive>
 8004b2e:	e7e9      	b.n	8004b04 <_vfiprintf_r+0x4c>
 8004b30:	2300      	movs	r3, #0
 8004b32:	9309      	str	r3, [sp, #36]	; 0x24
 8004b34:	2320      	movs	r3, #32
 8004b36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004b3a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004b3e:	2330      	movs	r3, #48	; 0x30
 8004b40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004d04 <_vfiprintf_r+0x24c>
 8004b44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004b48:	f04f 0901 	mov.w	r9, #1
 8004b4c:	4623      	mov	r3, r4
 8004b4e:	469a      	mov	sl, r3
 8004b50:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004b54:	b10a      	cbz	r2, 8004b5a <_vfiprintf_r+0xa2>
 8004b56:	2a25      	cmp	r2, #37	; 0x25
 8004b58:	d1f9      	bne.n	8004b4e <_vfiprintf_r+0x96>
 8004b5a:	ebba 0b04 	subs.w	fp, sl, r4
 8004b5e:	d00b      	beq.n	8004b78 <_vfiprintf_r+0xc0>
 8004b60:	465b      	mov	r3, fp
 8004b62:	4622      	mov	r2, r4
 8004b64:	4629      	mov	r1, r5
 8004b66:	4630      	mov	r0, r6
 8004b68:	f7ff ff93 	bl	8004a92 <__sfputs_r>
 8004b6c:	3001      	adds	r0, #1
 8004b6e:	f000 80aa 	beq.w	8004cc6 <_vfiprintf_r+0x20e>
 8004b72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004b74:	445a      	add	r2, fp
 8004b76:	9209      	str	r2, [sp, #36]	; 0x24
 8004b78:	f89a 3000 	ldrb.w	r3, [sl]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	f000 80a2 	beq.w	8004cc6 <_vfiprintf_r+0x20e>
 8004b82:	2300      	movs	r3, #0
 8004b84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b8c:	f10a 0a01 	add.w	sl, sl, #1
 8004b90:	9304      	str	r3, [sp, #16]
 8004b92:	9307      	str	r3, [sp, #28]
 8004b94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004b98:	931a      	str	r3, [sp, #104]	; 0x68
 8004b9a:	4654      	mov	r4, sl
 8004b9c:	2205      	movs	r2, #5
 8004b9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ba2:	4858      	ldr	r0, [pc, #352]	; (8004d04 <_vfiprintf_r+0x24c>)
 8004ba4:	f7fb fb3c 	bl	8000220 <memchr>
 8004ba8:	9a04      	ldr	r2, [sp, #16]
 8004baa:	b9d8      	cbnz	r0, 8004be4 <_vfiprintf_r+0x12c>
 8004bac:	06d1      	lsls	r1, r2, #27
 8004bae:	bf44      	itt	mi
 8004bb0:	2320      	movmi	r3, #32
 8004bb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bb6:	0713      	lsls	r3, r2, #28
 8004bb8:	bf44      	itt	mi
 8004bba:	232b      	movmi	r3, #43	; 0x2b
 8004bbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004bc0:	f89a 3000 	ldrb.w	r3, [sl]
 8004bc4:	2b2a      	cmp	r3, #42	; 0x2a
 8004bc6:	d015      	beq.n	8004bf4 <_vfiprintf_r+0x13c>
 8004bc8:	9a07      	ldr	r2, [sp, #28]
 8004bca:	4654      	mov	r4, sl
 8004bcc:	2000      	movs	r0, #0
 8004bce:	f04f 0c0a 	mov.w	ip, #10
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004bd8:	3b30      	subs	r3, #48	; 0x30
 8004bda:	2b09      	cmp	r3, #9
 8004bdc:	d94e      	bls.n	8004c7c <_vfiprintf_r+0x1c4>
 8004bde:	b1b0      	cbz	r0, 8004c0e <_vfiprintf_r+0x156>
 8004be0:	9207      	str	r2, [sp, #28]
 8004be2:	e014      	b.n	8004c0e <_vfiprintf_r+0x156>
 8004be4:	eba0 0308 	sub.w	r3, r0, r8
 8004be8:	fa09 f303 	lsl.w	r3, r9, r3
 8004bec:	4313      	orrs	r3, r2
 8004bee:	9304      	str	r3, [sp, #16]
 8004bf0:	46a2      	mov	sl, r4
 8004bf2:	e7d2      	b.n	8004b9a <_vfiprintf_r+0xe2>
 8004bf4:	9b03      	ldr	r3, [sp, #12]
 8004bf6:	1d19      	adds	r1, r3, #4
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	9103      	str	r1, [sp, #12]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	bfbb      	ittet	lt
 8004c00:	425b      	neglt	r3, r3
 8004c02:	f042 0202 	orrlt.w	r2, r2, #2
 8004c06:	9307      	strge	r3, [sp, #28]
 8004c08:	9307      	strlt	r3, [sp, #28]
 8004c0a:	bfb8      	it	lt
 8004c0c:	9204      	strlt	r2, [sp, #16]
 8004c0e:	7823      	ldrb	r3, [r4, #0]
 8004c10:	2b2e      	cmp	r3, #46	; 0x2e
 8004c12:	d10c      	bne.n	8004c2e <_vfiprintf_r+0x176>
 8004c14:	7863      	ldrb	r3, [r4, #1]
 8004c16:	2b2a      	cmp	r3, #42	; 0x2a
 8004c18:	d135      	bne.n	8004c86 <_vfiprintf_r+0x1ce>
 8004c1a:	9b03      	ldr	r3, [sp, #12]
 8004c1c:	1d1a      	adds	r2, r3, #4
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	9203      	str	r2, [sp, #12]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	bfb8      	it	lt
 8004c26:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004c2a:	3402      	adds	r4, #2
 8004c2c:	9305      	str	r3, [sp, #20]
 8004c2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004d14 <_vfiprintf_r+0x25c>
 8004c32:	7821      	ldrb	r1, [r4, #0]
 8004c34:	2203      	movs	r2, #3
 8004c36:	4650      	mov	r0, sl
 8004c38:	f7fb faf2 	bl	8000220 <memchr>
 8004c3c:	b140      	cbz	r0, 8004c50 <_vfiprintf_r+0x198>
 8004c3e:	2340      	movs	r3, #64	; 0x40
 8004c40:	eba0 000a 	sub.w	r0, r0, sl
 8004c44:	fa03 f000 	lsl.w	r0, r3, r0
 8004c48:	9b04      	ldr	r3, [sp, #16]
 8004c4a:	4303      	orrs	r3, r0
 8004c4c:	3401      	adds	r4, #1
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c54:	482c      	ldr	r0, [pc, #176]	; (8004d08 <_vfiprintf_r+0x250>)
 8004c56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004c5a:	2206      	movs	r2, #6
 8004c5c:	f7fb fae0 	bl	8000220 <memchr>
 8004c60:	2800      	cmp	r0, #0
 8004c62:	d03f      	beq.n	8004ce4 <_vfiprintf_r+0x22c>
 8004c64:	4b29      	ldr	r3, [pc, #164]	; (8004d0c <_vfiprintf_r+0x254>)
 8004c66:	bb1b      	cbnz	r3, 8004cb0 <_vfiprintf_r+0x1f8>
 8004c68:	9b03      	ldr	r3, [sp, #12]
 8004c6a:	3307      	adds	r3, #7
 8004c6c:	f023 0307 	bic.w	r3, r3, #7
 8004c70:	3308      	adds	r3, #8
 8004c72:	9303      	str	r3, [sp, #12]
 8004c74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c76:	443b      	add	r3, r7
 8004c78:	9309      	str	r3, [sp, #36]	; 0x24
 8004c7a:	e767      	b.n	8004b4c <_vfiprintf_r+0x94>
 8004c7c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c80:	460c      	mov	r4, r1
 8004c82:	2001      	movs	r0, #1
 8004c84:	e7a5      	b.n	8004bd2 <_vfiprintf_r+0x11a>
 8004c86:	2300      	movs	r3, #0
 8004c88:	3401      	adds	r4, #1
 8004c8a:	9305      	str	r3, [sp, #20]
 8004c8c:	4619      	mov	r1, r3
 8004c8e:	f04f 0c0a 	mov.w	ip, #10
 8004c92:	4620      	mov	r0, r4
 8004c94:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c98:	3a30      	subs	r2, #48	; 0x30
 8004c9a:	2a09      	cmp	r2, #9
 8004c9c:	d903      	bls.n	8004ca6 <_vfiprintf_r+0x1ee>
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0c5      	beq.n	8004c2e <_vfiprintf_r+0x176>
 8004ca2:	9105      	str	r1, [sp, #20]
 8004ca4:	e7c3      	b.n	8004c2e <_vfiprintf_r+0x176>
 8004ca6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004caa:	4604      	mov	r4, r0
 8004cac:	2301      	movs	r3, #1
 8004cae:	e7f0      	b.n	8004c92 <_vfiprintf_r+0x1da>
 8004cb0:	ab03      	add	r3, sp, #12
 8004cb2:	9300      	str	r3, [sp, #0]
 8004cb4:	462a      	mov	r2, r5
 8004cb6:	4b16      	ldr	r3, [pc, #88]	; (8004d10 <_vfiprintf_r+0x258>)
 8004cb8:	a904      	add	r1, sp, #16
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f3af 8000 	nop.w
 8004cc0:	4607      	mov	r7, r0
 8004cc2:	1c78      	adds	r0, r7, #1
 8004cc4:	d1d6      	bne.n	8004c74 <_vfiprintf_r+0x1bc>
 8004cc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cc8:	07d9      	lsls	r1, r3, #31
 8004cca:	d405      	bmi.n	8004cd8 <_vfiprintf_r+0x220>
 8004ccc:	89ab      	ldrh	r3, [r5, #12]
 8004cce:	059a      	lsls	r2, r3, #22
 8004cd0:	d402      	bmi.n	8004cd8 <_vfiprintf_r+0x220>
 8004cd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cd4:	f7ff fe31 	bl	800493a <__retarget_lock_release_recursive>
 8004cd8:	89ab      	ldrh	r3, [r5, #12]
 8004cda:	065b      	lsls	r3, r3, #25
 8004cdc:	f53f af12 	bmi.w	8004b04 <_vfiprintf_r+0x4c>
 8004ce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ce2:	e711      	b.n	8004b08 <_vfiprintf_r+0x50>
 8004ce4:	ab03      	add	r3, sp, #12
 8004ce6:	9300      	str	r3, [sp, #0]
 8004ce8:	462a      	mov	r2, r5
 8004cea:	4b09      	ldr	r3, [pc, #36]	; (8004d10 <_vfiprintf_r+0x258>)
 8004cec:	a904      	add	r1, sp, #16
 8004cee:	4630      	mov	r0, r6
 8004cf0:	f000 f880 	bl	8004df4 <_printf_i>
 8004cf4:	e7e4      	b.n	8004cc0 <_vfiprintf_r+0x208>
 8004cf6:	bf00      	nop
 8004cf8:	080056d0 	.word	0x080056d0
 8004cfc:	080056f0 	.word	0x080056f0
 8004d00:	080056b0 	.word	0x080056b0
 8004d04:	08005710 	.word	0x08005710
 8004d08:	0800571a 	.word	0x0800571a
 8004d0c:	00000000 	.word	0x00000000
 8004d10:	08004a93 	.word	0x08004a93
 8004d14:	08005716 	.word	0x08005716

08004d18 <_printf_common>:
 8004d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d1c:	4616      	mov	r6, r2
 8004d1e:	4699      	mov	r9, r3
 8004d20:	688a      	ldr	r2, [r1, #8]
 8004d22:	690b      	ldr	r3, [r1, #16]
 8004d24:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	bfb8      	it	lt
 8004d2c:	4613      	movlt	r3, r2
 8004d2e:	6033      	str	r3, [r6, #0]
 8004d30:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004d34:	4607      	mov	r7, r0
 8004d36:	460c      	mov	r4, r1
 8004d38:	b10a      	cbz	r2, 8004d3e <_printf_common+0x26>
 8004d3a:	3301      	adds	r3, #1
 8004d3c:	6033      	str	r3, [r6, #0]
 8004d3e:	6823      	ldr	r3, [r4, #0]
 8004d40:	0699      	lsls	r1, r3, #26
 8004d42:	bf42      	ittt	mi
 8004d44:	6833      	ldrmi	r3, [r6, #0]
 8004d46:	3302      	addmi	r3, #2
 8004d48:	6033      	strmi	r3, [r6, #0]
 8004d4a:	6825      	ldr	r5, [r4, #0]
 8004d4c:	f015 0506 	ands.w	r5, r5, #6
 8004d50:	d106      	bne.n	8004d60 <_printf_common+0x48>
 8004d52:	f104 0a19 	add.w	sl, r4, #25
 8004d56:	68e3      	ldr	r3, [r4, #12]
 8004d58:	6832      	ldr	r2, [r6, #0]
 8004d5a:	1a9b      	subs	r3, r3, r2
 8004d5c:	42ab      	cmp	r3, r5
 8004d5e:	dc26      	bgt.n	8004dae <_printf_common+0x96>
 8004d60:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004d64:	1e13      	subs	r3, r2, #0
 8004d66:	6822      	ldr	r2, [r4, #0]
 8004d68:	bf18      	it	ne
 8004d6a:	2301      	movne	r3, #1
 8004d6c:	0692      	lsls	r2, r2, #26
 8004d6e:	d42b      	bmi.n	8004dc8 <_printf_common+0xb0>
 8004d70:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004d74:	4649      	mov	r1, r9
 8004d76:	4638      	mov	r0, r7
 8004d78:	47c0      	blx	r8
 8004d7a:	3001      	adds	r0, #1
 8004d7c:	d01e      	beq.n	8004dbc <_printf_common+0xa4>
 8004d7e:	6823      	ldr	r3, [r4, #0]
 8004d80:	68e5      	ldr	r5, [r4, #12]
 8004d82:	6832      	ldr	r2, [r6, #0]
 8004d84:	f003 0306 	and.w	r3, r3, #6
 8004d88:	2b04      	cmp	r3, #4
 8004d8a:	bf08      	it	eq
 8004d8c:	1aad      	subeq	r5, r5, r2
 8004d8e:	68a3      	ldr	r3, [r4, #8]
 8004d90:	6922      	ldr	r2, [r4, #16]
 8004d92:	bf0c      	ite	eq
 8004d94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d98:	2500      	movne	r5, #0
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	bfc4      	itt	gt
 8004d9e:	1a9b      	subgt	r3, r3, r2
 8004da0:	18ed      	addgt	r5, r5, r3
 8004da2:	2600      	movs	r6, #0
 8004da4:	341a      	adds	r4, #26
 8004da6:	42b5      	cmp	r5, r6
 8004da8:	d11a      	bne.n	8004de0 <_printf_common+0xc8>
 8004daa:	2000      	movs	r0, #0
 8004dac:	e008      	b.n	8004dc0 <_printf_common+0xa8>
 8004dae:	2301      	movs	r3, #1
 8004db0:	4652      	mov	r2, sl
 8004db2:	4649      	mov	r1, r9
 8004db4:	4638      	mov	r0, r7
 8004db6:	47c0      	blx	r8
 8004db8:	3001      	adds	r0, #1
 8004dba:	d103      	bne.n	8004dc4 <_printf_common+0xac>
 8004dbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dc4:	3501      	adds	r5, #1
 8004dc6:	e7c6      	b.n	8004d56 <_printf_common+0x3e>
 8004dc8:	18e1      	adds	r1, r4, r3
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	2030      	movs	r0, #48	; 0x30
 8004dce:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004dd2:	4422      	add	r2, r4
 8004dd4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004dd8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ddc:	3302      	adds	r3, #2
 8004dde:	e7c7      	b.n	8004d70 <_printf_common+0x58>
 8004de0:	2301      	movs	r3, #1
 8004de2:	4622      	mov	r2, r4
 8004de4:	4649      	mov	r1, r9
 8004de6:	4638      	mov	r0, r7
 8004de8:	47c0      	blx	r8
 8004dea:	3001      	adds	r0, #1
 8004dec:	d0e6      	beq.n	8004dbc <_printf_common+0xa4>
 8004dee:	3601      	adds	r6, #1
 8004df0:	e7d9      	b.n	8004da6 <_printf_common+0x8e>
	...

08004df4 <_printf_i>:
 8004df4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004df8:	7e0f      	ldrb	r7, [r1, #24]
 8004dfa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004dfc:	2f78      	cmp	r7, #120	; 0x78
 8004dfe:	4691      	mov	r9, r2
 8004e00:	4680      	mov	r8, r0
 8004e02:	460c      	mov	r4, r1
 8004e04:	469a      	mov	sl, r3
 8004e06:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004e0a:	d807      	bhi.n	8004e1c <_printf_i+0x28>
 8004e0c:	2f62      	cmp	r7, #98	; 0x62
 8004e0e:	d80a      	bhi.n	8004e26 <_printf_i+0x32>
 8004e10:	2f00      	cmp	r7, #0
 8004e12:	f000 80d8 	beq.w	8004fc6 <_printf_i+0x1d2>
 8004e16:	2f58      	cmp	r7, #88	; 0x58
 8004e18:	f000 80a3 	beq.w	8004f62 <_printf_i+0x16e>
 8004e1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e20:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004e24:	e03a      	b.n	8004e9c <_printf_i+0xa8>
 8004e26:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004e2a:	2b15      	cmp	r3, #21
 8004e2c:	d8f6      	bhi.n	8004e1c <_printf_i+0x28>
 8004e2e:	a101      	add	r1, pc, #4	; (adr r1, 8004e34 <_printf_i+0x40>)
 8004e30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004e34:	08004e8d 	.word	0x08004e8d
 8004e38:	08004ea1 	.word	0x08004ea1
 8004e3c:	08004e1d 	.word	0x08004e1d
 8004e40:	08004e1d 	.word	0x08004e1d
 8004e44:	08004e1d 	.word	0x08004e1d
 8004e48:	08004e1d 	.word	0x08004e1d
 8004e4c:	08004ea1 	.word	0x08004ea1
 8004e50:	08004e1d 	.word	0x08004e1d
 8004e54:	08004e1d 	.word	0x08004e1d
 8004e58:	08004e1d 	.word	0x08004e1d
 8004e5c:	08004e1d 	.word	0x08004e1d
 8004e60:	08004fad 	.word	0x08004fad
 8004e64:	08004ed1 	.word	0x08004ed1
 8004e68:	08004f8f 	.word	0x08004f8f
 8004e6c:	08004e1d 	.word	0x08004e1d
 8004e70:	08004e1d 	.word	0x08004e1d
 8004e74:	08004fcf 	.word	0x08004fcf
 8004e78:	08004e1d 	.word	0x08004e1d
 8004e7c:	08004ed1 	.word	0x08004ed1
 8004e80:	08004e1d 	.word	0x08004e1d
 8004e84:	08004e1d 	.word	0x08004e1d
 8004e88:	08004f97 	.word	0x08004f97
 8004e8c:	682b      	ldr	r3, [r5, #0]
 8004e8e:	1d1a      	adds	r2, r3, #4
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	602a      	str	r2, [r5, #0]
 8004e94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e98:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e0a3      	b.n	8004fe8 <_printf_i+0x1f4>
 8004ea0:	6820      	ldr	r0, [r4, #0]
 8004ea2:	6829      	ldr	r1, [r5, #0]
 8004ea4:	0606      	lsls	r6, r0, #24
 8004ea6:	f101 0304 	add.w	r3, r1, #4
 8004eaa:	d50a      	bpl.n	8004ec2 <_printf_i+0xce>
 8004eac:	680e      	ldr	r6, [r1, #0]
 8004eae:	602b      	str	r3, [r5, #0]
 8004eb0:	2e00      	cmp	r6, #0
 8004eb2:	da03      	bge.n	8004ebc <_printf_i+0xc8>
 8004eb4:	232d      	movs	r3, #45	; 0x2d
 8004eb6:	4276      	negs	r6, r6
 8004eb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ebc:	485e      	ldr	r0, [pc, #376]	; (8005038 <_printf_i+0x244>)
 8004ebe:	230a      	movs	r3, #10
 8004ec0:	e019      	b.n	8004ef6 <_printf_i+0x102>
 8004ec2:	680e      	ldr	r6, [r1, #0]
 8004ec4:	602b      	str	r3, [r5, #0]
 8004ec6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004eca:	bf18      	it	ne
 8004ecc:	b236      	sxthne	r6, r6
 8004ece:	e7ef      	b.n	8004eb0 <_printf_i+0xbc>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	6820      	ldr	r0, [r4, #0]
 8004ed4:	1d19      	adds	r1, r3, #4
 8004ed6:	6029      	str	r1, [r5, #0]
 8004ed8:	0601      	lsls	r1, r0, #24
 8004eda:	d501      	bpl.n	8004ee0 <_printf_i+0xec>
 8004edc:	681e      	ldr	r6, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <_printf_i+0xf2>
 8004ee0:	0646      	lsls	r6, r0, #25
 8004ee2:	d5fb      	bpl.n	8004edc <_printf_i+0xe8>
 8004ee4:	881e      	ldrh	r6, [r3, #0]
 8004ee6:	4854      	ldr	r0, [pc, #336]	; (8005038 <_printf_i+0x244>)
 8004ee8:	2f6f      	cmp	r7, #111	; 0x6f
 8004eea:	bf0c      	ite	eq
 8004eec:	2308      	moveq	r3, #8
 8004eee:	230a      	movne	r3, #10
 8004ef0:	2100      	movs	r1, #0
 8004ef2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ef6:	6865      	ldr	r5, [r4, #4]
 8004ef8:	60a5      	str	r5, [r4, #8]
 8004efa:	2d00      	cmp	r5, #0
 8004efc:	bfa2      	ittt	ge
 8004efe:	6821      	ldrge	r1, [r4, #0]
 8004f00:	f021 0104 	bicge.w	r1, r1, #4
 8004f04:	6021      	strge	r1, [r4, #0]
 8004f06:	b90e      	cbnz	r6, 8004f0c <_printf_i+0x118>
 8004f08:	2d00      	cmp	r5, #0
 8004f0a:	d04d      	beq.n	8004fa8 <_printf_i+0x1b4>
 8004f0c:	4615      	mov	r5, r2
 8004f0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004f12:	fb03 6711 	mls	r7, r3, r1, r6
 8004f16:	5dc7      	ldrb	r7, [r0, r7]
 8004f18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004f1c:	4637      	mov	r7, r6
 8004f1e:	42bb      	cmp	r3, r7
 8004f20:	460e      	mov	r6, r1
 8004f22:	d9f4      	bls.n	8004f0e <_printf_i+0x11a>
 8004f24:	2b08      	cmp	r3, #8
 8004f26:	d10b      	bne.n	8004f40 <_printf_i+0x14c>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	07de      	lsls	r6, r3, #31
 8004f2c:	d508      	bpl.n	8004f40 <_printf_i+0x14c>
 8004f2e:	6923      	ldr	r3, [r4, #16]
 8004f30:	6861      	ldr	r1, [r4, #4]
 8004f32:	4299      	cmp	r1, r3
 8004f34:	bfde      	ittt	le
 8004f36:	2330      	movle	r3, #48	; 0x30
 8004f38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004f3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004f40:	1b52      	subs	r2, r2, r5
 8004f42:	6122      	str	r2, [r4, #16]
 8004f44:	f8cd a000 	str.w	sl, [sp]
 8004f48:	464b      	mov	r3, r9
 8004f4a:	aa03      	add	r2, sp, #12
 8004f4c:	4621      	mov	r1, r4
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f7ff fee2 	bl	8004d18 <_printf_common>
 8004f54:	3001      	adds	r0, #1
 8004f56:	d14c      	bne.n	8004ff2 <_printf_i+0x1fe>
 8004f58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004f5c:	b004      	add	sp, #16
 8004f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f62:	4835      	ldr	r0, [pc, #212]	; (8005038 <_printf_i+0x244>)
 8004f64:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004f68:	6829      	ldr	r1, [r5, #0]
 8004f6a:	6823      	ldr	r3, [r4, #0]
 8004f6c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004f70:	6029      	str	r1, [r5, #0]
 8004f72:	061d      	lsls	r5, r3, #24
 8004f74:	d514      	bpl.n	8004fa0 <_printf_i+0x1ac>
 8004f76:	07df      	lsls	r7, r3, #31
 8004f78:	bf44      	itt	mi
 8004f7a:	f043 0320 	orrmi.w	r3, r3, #32
 8004f7e:	6023      	strmi	r3, [r4, #0]
 8004f80:	b91e      	cbnz	r6, 8004f8a <_printf_i+0x196>
 8004f82:	6823      	ldr	r3, [r4, #0]
 8004f84:	f023 0320 	bic.w	r3, r3, #32
 8004f88:	6023      	str	r3, [r4, #0]
 8004f8a:	2310      	movs	r3, #16
 8004f8c:	e7b0      	b.n	8004ef0 <_printf_i+0xfc>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	f043 0320 	orr.w	r3, r3, #32
 8004f94:	6023      	str	r3, [r4, #0]
 8004f96:	2378      	movs	r3, #120	; 0x78
 8004f98:	4828      	ldr	r0, [pc, #160]	; (800503c <_printf_i+0x248>)
 8004f9a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f9e:	e7e3      	b.n	8004f68 <_printf_i+0x174>
 8004fa0:	0659      	lsls	r1, r3, #25
 8004fa2:	bf48      	it	mi
 8004fa4:	b2b6      	uxthmi	r6, r6
 8004fa6:	e7e6      	b.n	8004f76 <_printf_i+0x182>
 8004fa8:	4615      	mov	r5, r2
 8004faa:	e7bb      	b.n	8004f24 <_printf_i+0x130>
 8004fac:	682b      	ldr	r3, [r5, #0]
 8004fae:	6826      	ldr	r6, [r4, #0]
 8004fb0:	6961      	ldr	r1, [r4, #20]
 8004fb2:	1d18      	adds	r0, r3, #4
 8004fb4:	6028      	str	r0, [r5, #0]
 8004fb6:	0635      	lsls	r5, r6, #24
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	d501      	bpl.n	8004fc0 <_printf_i+0x1cc>
 8004fbc:	6019      	str	r1, [r3, #0]
 8004fbe:	e002      	b.n	8004fc6 <_printf_i+0x1d2>
 8004fc0:	0670      	lsls	r0, r6, #25
 8004fc2:	d5fb      	bpl.n	8004fbc <_printf_i+0x1c8>
 8004fc4:	8019      	strh	r1, [r3, #0]
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	6123      	str	r3, [r4, #16]
 8004fca:	4615      	mov	r5, r2
 8004fcc:	e7ba      	b.n	8004f44 <_printf_i+0x150>
 8004fce:	682b      	ldr	r3, [r5, #0]
 8004fd0:	1d1a      	adds	r2, r3, #4
 8004fd2:	602a      	str	r2, [r5, #0]
 8004fd4:	681d      	ldr	r5, [r3, #0]
 8004fd6:	6862      	ldr	r2, [r4, #4]
 8004fd8:	2100      	movs	r1, #0
 8004fda:	4628      	mov	r0, r5
 8004fdc:	f7fb f920 	bl	8000220 <memchr>
 8004fe0:	b108      	cbz	r0, 8004fe6 <_printf_i+0x1f2>
 8004fe2:	1b40      	subs	r0, r0, r5
 8004fe4:	6060      	str	r0, [r4, #4]
 8004fe6:	6863      	ldr	r3, [r4, #4]
 8004fe8:	6123      	str	r3, [r4, #16]
 8004fea:	2300      	movs	r3, #0
 8004fec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ff0:	e7a8      	b.n	8004f44 <_printf_i+0x150>
 8004ff2:	6923      	ldr	r3, [r4, #16]
 8004ff4:	462a      	mov	r2, r5
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	4640      	mov	r0, r8
 8004ffa:	47d0      	blx	sl
 8004ffc:	3001      	adds	r0, #1
 8004ffe:	d0ab      	beq.n	8004f58 <_printf_i+0x164>
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	079b      	lsls	r3, r3, #30
 8005004:	d413      	bmi.n	800502e <_printf_i+0x23a>
 8005006:	68e0      	ldr	r0, [r4, #12]
 8005008:	9b03      	ldr	r3, [sp, #12]
 800500a:	4298      	cmp	r0, r3
 800500c:	bfb8      	it	lt
 800500e:	4618      	movlt	r0, r3
 8005010:	e7a4      	b.n	8004f5c <_printf_i+0x168>
 8005012:	2301      	movs	r3, #1
 8005014:	4632      	mov	r2, r6
 8005016:	4649      	mov	r1, r9
 8005018:	4640      	mov	r0, r8
 800501a:	47d0      	blx	sl
 800501c:	3001      	adds	r0, #1
 800501e:	d09b      	beq.n	8004f58 <_printf_i+0x164>
 8005020:	3501      	adds	r5, #1
 8005022:	68e3      	ldr	r3, [r4, #12]
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	1a5b      	subs	r3, r3, r1
 8005028:	42ab      	cmp	r3, r5
 800502a:	dcf2      	bgt.n	8005012 <_printf_i+0x21e>
 800502c:	e7eb      	b.n	8005006 <_printf_i+0x212>
 800502e:	2500      	movs	r5, #0
 8005030:	f104 0619 	add.w	r6, r4, #25
 8005034:	e7f5      	b.n	8005022 <_printf_i+0x22e>
 8005036:	bf00      	nop
 8005038:	08005721 	.word	0x08005721
 800503c:	08005732 	.word	0x08005732

08005040 <_sbrk_r>:
 8005040:	b538      	push	{r3, r4, r5, lr}
 8005042:	4d06      	ldr	r5, [pc, #24]	; (800505c <_sbrk_r+0x1c>)
 8005044:	2300      	movs	r3, #0
 8005046:	4604      	mov	r4, r0
 8005048:	4608      	mov	r0, r1
 800504a:	602b      	str	r3, [r5, #0]
 800504c:	f7fc fa86 	bl	800155c <_sbrk>
 8005050:	1c43      	adds	r3, r0, #1
 8005052:	d102      	bne.n	800505a <_sbrk_r+0x1a>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	b103      	cbz	r3, 800505a <_sbrk_r+0x1a>
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	bd38      	pop	{r3, r4, r5, pc}
 800505c:	2000018c 	.word	0x2000018c

08005060 <__sread>:
 8005060:	b510      	push	{r4, lr}
 8005062:	460c      	mov	r4, r1
 8005064:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005068:	f000 fab2 	bl	80055d0 <_read_r>
 800506c:	2800      	cmp	r0, #0
 800506e:	bfab      	itete	ge
 8005070:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005072:	89a3      	ldrhlt	r3, [r4, #12]
 8005074:	181b      	addge	r3, r3, r0
 8005076:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800507a:	bfac      	ite	ge
 800507c:	6563      	strge	r3, [r4, #84]	; 0x54
 800507e:	81a3      	strhlt	r3, [r4, #12]
 8005080:	bd10      	pop	{r4, pc}

08005082 <__swrite>:
 8005082:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005086:	461f      	mov	r7, r3
 8005088:	898b      	ldrh	r3, [r1, #12]
 800508a:	05db      	lsls	r3, r3, #23
 800508c:	4605      	mov	r5, r0
 800508e:	460c      	mov	r4, r1
 8005090:	4616      	mov	r6, r2
 8005092:	d505      	bpl.n	80050a0 <__swrite+0x1e>
 8005094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005098:	2302      	movs	r3, #2
 800509a:	2200      	movs	r2, #0
 800509c:	f000 f9c8 	bl	8005430 <_lseek_r>
 80050a0:	89a3      	ldrh	r3, [r4, #12]
 80050a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80050a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050aa:	81a3      	strh	r3, [r4, #12]
 80050ac:	4632      	mov	r2, r6
 80050ae:	463b      	mov	r3, r7
 80050b0:	4628      	mov	r0, r5
 80050b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050b6:	f000 b869 	b.w	800518c <_write_r>

080050ba <__sseek>:
 80050ba:	b510      	push	{r4, lr}
 80050bc:	460c      	mov	r4, r1
 80050be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050c2:	f000 f9b5 	bl	8005430 <_lseek_r>
 80050c6:	1c43      	adds	r3, r0, #1
 80050c8:	89a3      	ldrh	r3, [r4, #12]
 80050ca:	bf15      	itete	ne
 80050cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80050ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80050d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80050d6:	81a3      	strheq	r3, [r4, #12]
 80050d8:	bf18      	it	ne
 80050da:	81a3      	strhne	r3, [r4, #12]
 80050dc:	bd10      	pop	{r4, pc}

080050de <__sclose>:
 80050de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80050e2:	f000 b8d3 	b.w	800528c <_close_r>
	...

080050e8 <__swbuf_r>:
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	460e      	mov	r6, r1
 80050ec:	4614      	mov	r4, r2
 80050ee:	4605      	mov	r5, r0
 80050f0:	b118      	cbz	r0, 80050fa <__swbuf_r+0x12>
 80050f2:	6983      	ldr	r3, [r0, #24]
 80050f4:	b90b      	cbnz	r3, 80050fa <__swbuf_r+0x12>
 80050f6:	f7ff fb81 	bl	80047fc <__sinit>
 80050fa:	4b21      	ldr	r3, [pc, #132]	; (8005180 <__swbuf_r+0x98>)
 80050fc:	429c      	cmp	r4, r3
 80050fe:	d12b      	bne.n	8005158 <__swbuf_r+0x70>
 8005100:	686c      	ldr	r4, [r5, #4]
 8005102:	69a3      	ldr	r3, [r4, #24]
 8005104:	60a3      	str	r3, [r4, #8]
 8005106:	89a3      	ldrh	r3, [r4, #12]
 8005108:	071a      	lsls	r2, r3, #28
 800510a:	d52f      	bpl.n	800516c <__swbuf_r+0x84>
 800510c:	6923      	ldr	r3, [r4, #16]
 800510e:	b36b      	cbz	r3, 800516c <__swbuf_r+0x84>
 8005110:	6923      	ldr	r3, [r4, #16]
 8005112:	6820      	ldr	r0, [r4, #0]
 8005114:	1ac0      	subs	r0, r0, r3
 8005116:	6963      	ldr	r3, [r4, #20]
 8005118:	b2f6      	uxtb	r6, r6
 800511a:	4283      	cmp	r3, r0
 800511c:	4637      	mov	r7, r6
 800511e:	dc04      	bgt.n	800512a <__swbuf_r+0x42>
 8005120:	4621      	mov	r1, r4
 8005122:	4628      	mov	r0, r5
 8005124:	f000 f948 	bl	80053b8 <_fflush_r>
 8005128:	bb30      	cbnz	r0, 8005178 <__swbuf_r+0x90>
 800512a:	68a3      	ldr	r3, [r4, #8]
 800512c:	3b01      	subs	r3, #1
 800512e:	60a3      	str	r3, [r4, #8]
 8005130:	6823      	ldr	r3, [r4, #0]
 8005132:	1c5a      	adds	r2, r3, #1
 8005134:	6022      	str	r2, [r4, #0]
 8005136:	701e      	strb	r6, [r3, #0]
 8005138:	6963      	ldr	r3, [r4, #20]
 800513a:	3001      	adds	r0, #1
 800513c:	4283      	cmp	r3, r0
 800513e:	d004      	beq.n	800514a <__swbuf_r+0x62>
 8005140:	89a3      	ldrh	r3, [r4, #12]
 8005142:	07db      	lsls	r3, r3, #31
 8005144:	d506      	bpl.n	8005154 <__swbuf_r+0x6c>
 8005146:	2e0a      	cmp	r6, #10
 8005148:	d104      	bne.n	8005154 <__swbuf_r+0x6c>
 800514a:	4621      	mov	r1, r4
 800514c:	4628      	mov	r0, r5
 800514e:	f000 f933 	bl	80053b8 <_fflush_r>
 8005152:	b988      	cbnz	r0, 8005178 <__swbuf_r+0x90>
 8005154:	4638      	mov	r0, r7
 8005156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005158:	4b0a      	ldr	r3, [pc, #40]	; (8005184 <__swbuf_r+0x9c>)
 800515a:	429c      	cmp	r4, r3
 800515c:	d101      	bne.n	8005162 <__swbuf_r+0x7a>
 800515e:	68ac      	ldr	r4, [r5, #8]
 8005160:	e7cf      	b.n	8005102 <__swbuf_r+0x1a>
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <__swbuf_r+0xa0>)
 8005164:	429c      	cmp	r4, r3
 8005166:	bf08      	it	eq
 8005168:	68ec      	ldreq	r4, [r5, #12]
 800516a:	e7ca      	b.n	8005102 <__swbuf_r+0x1a>
 800516c:	4621      	mov	r1, r4
 800516e:	4628      	mov	r0, r5
 8005170:	f000 f81e 	bl	80051b0 <__swsetup_r>
 8005174:	2800      	cmp	r0, #0
 8005176:	d0cb      	beq.n	8005110 <__swbuf_r+0x28>
 8005178:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800517c:	e7ea      	b.n	8005154 <__swbuf_r+0x6c>
 800517e:	bf00      	nop
 8005180:	080056d0 	.word	0x080056d0
 8005184:	080056f0 	.word	0x080056f0
 8005188:	080056b0 	.word	0x080056b0

0800518c <_write_r>:
 800518c:	b538      	push	{r3, r4, r5, lr}
 800518e:	4d07      	ldr	r5, [pc, #28]	; (80051ac <_write_r+0x20>)
 8005190:	4604      	mov	r4, r0
 8005192:	4608      	mov	r0, r1
 8005194:	4611      	mov	r1, r2
 8005196:	2200      	movs	r2, #0
 8005198:	602a      	str	r2, [r5, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	f7fc f98d 	bl	80014ba <_write>
 80051a0:	1c43      	adds	r3, r0, #1
 80051a2:	d102      	bne.n	80051aa <_write_r+0x1e>
 80051a4:	682b      	ldr	r3, [r5, #0]
 80051a6:	b103      	cbz	r3, 80051aa <_write_r+0x1e>
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	bd38      	pop	{r3, r4, r5, pc}
 80051ac:	2000018c 	.word	0x2000018c

080051b0 <__swsetup_r>:
 80051b0:	4b32      	ldr	r3, [pc, #200]	; (800527c <__swsetup_r+0xcc>)
 80051b2:	b570      	push	{r4, r5, r6, lr}
 80051b4:	681d      	ldr	r5, [r3, #0]
 80051b6:	4606      	mov	r6, r0
 80051b8:	460c      	mov	r4, r1
 80051ba:	b125      	cbz	r5, 80051c6 <__swsetup_r+0x16>
 80051bc:	69ab      	ldr	r3, [r5, #24]
 80051be:	b913      	cbnz	r3, 80051c6 <__swsetup_r+0x16>
 80051c0:	4628      	mov	r0, r5
 80051c2:	f7ff fb1b 	bl	80047fc <__sinit>
 80051c6:	4b2e      	ldr	r3, [pc, #184]	; (8005280 <__swsetup_r+0xd0>)
 80051c8:	429c      	cmp	r4, r3
 80051ca:	d10f      	bne.n	80051ec <__swsetup_r+0x3c>
 80051cc:	686c      	ldr	r4, [r5, #4]
 80051ce:	89a3      	ldrh	r3, [r4, #12]
 80051d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051d4:	0719      	lsls	r1, r3, #28
 80051d6:	d42c      	bmi.n	8005232 <__swsetup_r+0x82>
 80051d8:	06dd      	lsls	r5, r3, #27
 80051da:	d411      	bmi.n	8005200 <__swsetup_r+0x50>
 80051dc:	2309      	movs	r3, #9
 80051de:	6033      	str	r3, [r6, #0]
 80051e0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051e4:	81a3      	strh	r3, [r4, #12]
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051ea:	e03e      	b.n	800526a <__swsetup_r+0xba>
 80051ec:	4b25      	ldr	r3, [pc, #148]	; (8005284 <__swsetup_r+0xd4>)
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d101      	bne.n	80051f6 <__swsetup_r+0x46>
 80051f2:	68ac      	ldr	r4, [r5, #8]
 80051f4:	e7eb      	b.n	80051ce <__swsetup_r+0x1e>
 80051f6:	4b24      	ldr	r3, [pc, #144]	; (8005288 <__swsetup_r+0xd8>)
 80051f8:	429c      	cmp	r4, r3
 80051fa:	bf08      	it	eq
 80051fc:	68ec      	ldreq	r4, [r5, #12]
 80051fe:	e7e6      	b.n	80051ce <__swsetup_r+0x1e>
 8005200:	0758      	lsls	r0, r3, #29
 8005202:	d512      	bpl.n	800522a <__swsetup_r+0x7a>
 8005204:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005206:	b141      	cbz	r1, 800521a <__swsetup_r+0x6a>
 8005208:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800520c:	4299      	cmp	r1, r3
 800520e:	d002      	beq.n	8005216 <__swsetup_r+0x66>
 8005210:	4630      	mov	r0, r6
 8005212:	f000 f991 	bl	8005538 <_free_r>
 8005216:	2300      	movs	r3, #0
 8005218:	6363      	str	r3, [r4, #52]	; 0x34
 800521a:	89a3      	ldrh	r3, [r4, #12]
 800521c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005220:	81a3      	strh	r3, [r4, #12]
 8005222:	2300      	movs	r3, #0
 8005224:	6063      	str	r3, [r4, #4]
 8005226:	6923      	ldr	r3, [r4, #16]
 8005228:	6023      	str	r3, [r4, #0]
 800522a:	89a3      	ldrh	r3, [r4, #12]
 800522c:	f043 0308 	orr.w	r3, r3, #8
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	6923      	ldr	r3, [r4, #16]
 8005234:	b94b      	cbnz	r3, 800524a <__swsetup_r+0x9a>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800523c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005240:	d003      	beq.n	800524a <__swsetup_r+0x9a>
 8005242:	4621      	mov	r1, r4
 8005244:	4630      	mov	r0, r6
 8005246:	f000 f92b 	bl	80054a0 <__smakebuf_r>
 800524a:	89a0      	ldrh	r0, [r4, #12]
 800524c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005250:	f010 0301 	ands.w	r3, r0, #1
 8005254:	d00a      	beq.n	800526c <__swsetup_r+0xbc>
 8005256:	2300      	movs	r3, #0
 8005258:	60a3      	str	r3, [r4, #8]
 800525a:	6963      	ldr	r3, [r4, #20]
 800525c:	425b      	negs	r3, r3
 800525e:	61a3      	str	r3, [r4, #24]
 8005260:	6923      	ldr	r3, [r4, #16]
 8005262:	b943      	cbnz	r3, 8005276 <__swsetup_r+0xc6>
 8005264:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005268:	d1ba      	bne.n	80051e0 <__swsetup_r+0x30>
 800526a:	bd70      	pop	{r4, r5, r6, pc}
 800526c:	0781      	lsls	r1, r0, #30
 800526e:	bf58      	it	pl
 8005270:	6963      	ldrpl	r3, [r4, #20]
 8005272:	60a3      	str	r3, [r4, #8]
 8005274:	e7f4      	b.n	8005260 <__swsetup_r+0xb0>
 8005276:	2000      	movs	r0, #0
 8005278:	e7f7      	b.n	800526a <__swsetup_r+0xba>
 800527a:	bf00      	nop
 800527c:	2000000c 	.word	0x2000000c
 8005280:	080056d0 	.word	0x080056d0
 8005284:	080056f0 	.word	0x080056f0
 8005288:	080056b0 	.word	0x080056b0

0800528c <_close_r>:
 800528c:	b538      	push	{r3, r4, r5, lr}
 800528e:	4d06      	ldr	r5, [pc, #24]	; (80052a8 <_close_r+0x1c>)
 8005290:	2300      	movs	r3, #0
 8005292:	4604      	mov	r4, r0
 8005294:	4608      	mov	r0, r1
 8005296:	602b      	str	r3, [r5, #0]
 8005298:	f7fc f92b 	bl	80014f2 <_close>
 800529c:	1c43      	adds	r3, r0, #1
 800529e:	d102      	bne.n	80052a6 <_close_r+0x1a>
 80052a0:	682b      	ldr	r3, [r5, #0]
 80052a2:	b103      	cbz	r3, 80052a6 <_close_r+0x1a>
 80052a4:	6023      	str	r3, [r4, #0]
 80052a6:	bd38      	pop	{r3, r4, r5, pc}
 80052a8:	2000018c 	.word	0x2000018c

080052ac <__sflush_r>:
 80052ac:	898a      	ldrh	r2, [r1, #12]
 80052ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80052b2:	4605      	mov	r5, r0
 80052b4:	0710      	lsls	r0, r2, #28
 80052b6:	460c      	mov	r4, r1
 80052b8:	d458      	bmi.n	800536c <__sflush_r+0xc0>
 80052ba:	684b      	ldr	r3, [r1, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	dc05      	bgt.n	80052cc <__sflush_r+0x20>
 80052c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	dc02      	bgt.n	80052cc <__sflush_r+0x20>
 80052c6:	2000      	movs	r0, #0
 80052c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80052cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052ce:	2e00      	cmp	r6, #0
 80052d0:	d0f9      	beq.n	80052c6 <__sflush_r+0x1a>
 80052d2:	2300      	movs	r3, #0
 80052d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80052d8:	682f      	ldr	r7, [r5, #0]
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	d032      	beq.n	8005344 <__sflush_r+0x98>
 80052de:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80052e0:	89a3      	ldrh	r3, [r4, #12]
 80052e2:	075a      	lsls	r2, r3, #29
 80052e4:	d505      	bpl.n	80052f2 <__sflush_r+0x46>
 80052e6:	6863      	ldr	r3, [r4, #4]
 80052e8:	1ac0      	subs	r0, r0, r3
 80052ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80052ec:	b10b      	cbz	r3, 80052f2 <__sflush_r+0x46>
 80052ee:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80052f0:	1ac0      	subs	r0, r0, r3
 80052f2:	2300      	movs	r3, #0
 80052f4:	4602      	mov	r2, r0
 80052f6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80052f8:	6a21      	ldr	r1, [r4, #32]
 80052fa:	4628      	mov	r0, r5
 80052fc:	47b0      	blx	r6
 80052fe:	1c43      	adds	r3, r0, #1
 8005300:	89a3      	ldrh	r3, [r4, #12]
 8005302:	d106      	bne.n	8005312 <__sflush_r+0x66>
 8005304:	6829      	ldr	r1, [r5, #0]
 8005306:	291d      	cmp	r1, #29
 8005308:	d82c      	bhi.n	8005364 <__sflush_r+0xb8>
 800530a:	4a2a      	ldr	r2, [pc, #168]	; (80053b4 <__sflush_r+0x108>)
 800530c:	40ca      	lsrs	r2, r1
 800530e:	07d6      	lsls	r6, r2, #31
 8005310:	d528      	bpl.n	8005364 <__sflush_r+0xb8>
 8005312:	2200      	movs	r2, #0
 8005314:	6062      	str	r2, [r4, #4]
 8005316:	04d9      	lsls	r1, r3, #19
 8005318:	6922      	ldr	r2, [r4, #16]
 800531a:	6022      	str	r2, [r4, #0]
 800531c:	d504      	bpl.n	8005328 <__sflush_r+0x7c>
 800531e:	1c42      	adds	r2, r0, #1
 8005320:	d101      	bne.n	8005326 <__sflush_r+0x7a>
 8005322:	682b      	ldr	r3, [r5, #0]
 8005324:	b903      	cbnz	r3, 8005328 <__sflush_r+0x7c>
 8005326:	6560      	str	r0, [r4, #84]	; 0x54
 8005328:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800532a:	602f      	str	r7, [r5, #0]
 800532c:	2900      	cmp	r1, #0
 800532e:	d0ca      	beq.n	80052c6 <__sflush_r+0x1a>
 8005330:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005334:	4299      	cmp	r1, r3
 8005336:	d002      	beq.n	800533e <__sflush_r+0x92>
 8005338:	4628      	mov	r0, r5
 800533a:	f000 f8fd 	bl	8005538 <_free_r>
 800533e:	2000      	movs	r0, #0
 8005340:	6360      	str	r0, [r4, #52]	; 0x34
 8005342:	e7c1      	b.n	80052c8 <__sflush_r+0x1c>
 8005344:	6a21      	ldr	r1, [r4, #32]
 8005346:	2301      	movs	r3, #1
 8005348:	4628      	mov	r0, r5
 800534a:	47b0      	blx	r6
 800534c:	1c41      	adds	r1, r0, #1
 800534e:	d1c7      	bne.n	80052e0 <__sflush_r+0x34>
 8005350:	682b      	ldr	r3, [r5, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0c4      	beq.n	80052e0 <__sflush_r+0x34>
 8005356:	2b1d      	cmp	r3, #29
 8005358:	d001      	beq.n	800535e <__sflush_r+0xb2>
 800535a:	2b16      	cmp	r3, #22
 800535c:	d101      	bne.n	8005362 <__sflush_r+0xb6>
 800535e:	602f      	str	r7, [r5, #0]
 8005360:	e7b1      	b.n	80052c6 <__sflush_r+0x1a>
 8005362:	89a3      	ldrh	r3, [r4, #12]
 8005364:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005368:	81a3      	strh	r3, [r4, #12]
 800536a:	e7ad      	b.n	80052c8 <__sflush_r+0x1c>
 800536c:	690f      	ldr	r7, [r1, #16]
 800536e:	2f00      	cmp	r7, #0
 8005370:	d0a9      	beq.n	80052c6 <__sflush_r+0x1a>
 8005372:	0793      	lsls	r3, r2, #30
 8005374:	680e      	ldr	r6, [r1, #0]
 8005376:	bf08      	it	eq
 8005378:	694b      	ldreq	r3, [r1, #20]
 800537a:	600f      	str	r7, [r1, #0]
 800537c:	bf18      	it	ne
 800537e:	2300      	movne	r3, #0
 8005380:	eba6 0807 	sub.w	r8, r6, r7
 8005384:	608b      	str	r3, [r1, #8]
 8005386:	f1b8 0f00 	cmp.w	r8, #0
 800538a:	dd9c      	ble.n	80052c6 <__sflush_r+0x1a>
 800538c:	6a21      	ldr	r1, [r4, #32]
 800538e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005390:	4643      	mov	r3, r8
 8005392:	463a      	mov	r2, r7
 8005394:	4628      	mov	r0, r5
 8005396:	47b0      	blx	r6
 8005398:	2800      	cmp	r0, #0
 800539a:	dc06      	bgt.n	80053aa <__sflush_r+0xfe>
 800539c:	89a3      	ldrh	r3, [r4, #12]
 800539e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053a2:	81a3      	strh	r3, [r4, #12]
 80053a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80053a8:	e78e      	b.n	80052c8 <__sflush_r+0x1c>
 80053aa:	4407      	add	r7, r0
 80053ac:	eba8 0800 	sub.w	r8, r8, r0
 80053b0:	e7e9      	b.n	8005386 <__sflush_r+0xda>
 80053b2:	bf00      	nop
 80053b4:	20400001 	.word	0x20400001

080053b8 <_fflush_r>:
 80053b8:	b538      	push	{r3, r4, r5, lr}
 80053ba:	690b      	ldr	r3, [r1, #16]
 80053bc:	4605      	mov	r5, r0
 80053be:	460c      	mov	r4, r1
 80053c0:	b913      	cbnz	r3, 80053c8 <_fflush_r+0x10>
 80053c2:	2500      	movs	r5, #0
 80053c4:	4628      	mov	r0, r5
 80053c6:	bd38      	pop	{r3, r4, r5, pc}
 80053c8:	b118      	cbz	r0, 80053d2 <_fflush_r+0x1a>
 80053ca:	6983      	ldr	r3, [r0, #24]
 80053cc:	b90b      	cbnz	r3, 80053d2 <_fflush_r+0x1a>
 80053ce:	f7ff fa15 	bl	80047fc <__sinit>
 80053d2:	4b14      	ldr	r3, [pc, #80]	; (8005424 <_fflush_r+0x6c>)
 80053d4:	429c      	cmp	r4, r3
 80053d6:	d11b      	bne.n	8005410 <_fflush_r+0x58>
 80053d8:	686c      	ldr	r4, [r5, #4]
 80053da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d0ef      	beq.n	80053c2 <_fflush_r+0xa>
 80053e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80053e4:	07d0      	lsls	r0, r2, #31
 80053e6:	d404      	bmi.n	80053f2 <_fflush_r+0x3a>
 80053e8:	0599      	lsls	r1, r3, #22
 80053ea:	d402      	bmi.n	80053f2 <_fflush_r+0x3a>
 80053ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80053ee:	f7ff faa3 	bl	8004938 <__retarget_lock_acquire_recursive>
 80053f2:	4628      	mov	r0, r5
 80053f4:	4621      	mov	r1, r4
 80053f6:	f7ff ff59 	bl	80052ac <__sflush_r>
 80053fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80053fc:	07da      	lsls	r2, r3, #31
 80053fe:	4605      	mov	r5, r0
 8005400:	d4e0      	bmi.n	80053c4 <_fflush_r+0xc>
 8005402:	89a3      	ldrh	r3, [r4, #12]
 8005404:	059b      	lsls	r3, r3, #22
 8005406:	d4dd      	bmi.n	80053c4 <_fflush_r+0xc>
 8005408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800540a:	f7ff fa96 	bl	800493a <__retarget_lock_release_recursive>
 800540e:	e7d9      	b.n	80053c4 <_fflush_r+0xc>
 8005410:	4b05      	ldr	r3, [pc, #20]	; (8005428 <_fflush_r+0x70>)
 8005412:	429c      	cmp	r4, r3
 8005414:	d101      	bne.n	800541a <_fflush_r+0x62>
 8005416:	68ac      	ldr	r4, [r5, #8]
 8005418:	e7df      	b.n	80053da <_fflush_r+0x22>
 800541a:	4b04      	ldr	r3, [pc, #16]	; (800542c <_fflush_r+0x74>)
 800541c:	429c      	cmp	r4, r3
 800541e:	bf08      	it	eq
 8005420:	68ec      	ldreq	r4, [r5, #12]
 8005422:	e7da      	b.n	80053da <_fflush_r+0x22>
 8005424:	080056d0 	.word	0x080056d0
 8005428:	080056f0 	.word	0x080056f0
 800542c:	080056b0 	.word	0x080056b0

08005430 <_lseek_r>:
 8005430:	b538      	push	{r3, r4, r5, lr}
 8005432:	4d07      	ldr	r5, [pc, #28]	; (8005450 <_lseek_r+0x20>)
 8005434:	4604      	mov	r4, r0
 8005436:	4608      	mov	r0, r1
 8005438:	4611      	mov	r1, r2
 800543a:	2200      	movs	r2, #0
 800543c:	602a      	str	r2, [r5, #0]
 800543e:	461a      	mov	r2, r3
 8005440:	f7fc f87e 	bl	8001540 <_lseek>
 8005444:	1c43      	adds	r3, r0, #1
 8005446:	d102      	bne.n	800544e <_lseek_r+0x1e>
 8005448:	682b      	ldr	r3, [r5, #0]
 800544a:	b103      	cbz	r3, 800544e <_lseek_r+0x1e>
 800544c:	6023      	str	r3, [r4, #0]
 800544e:	bd38      	pop	{r3, r4, r5, pc}
 8005450:	2000018c 	.word	0x2000018c

08005454 <__swhatbuf_r>:
 8005454:	b570      	push	{r4, r5, r6, lr}
 8005456:	460e      	mov	r6, r1
 8005458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800545c:	2900      	cmp	r1, #0
 800545e:	b096      	sub	sp, #88	; 0x58
 8005460:	4614      	mov	r4, r2
 8005462:	461d      	mov	r5, r3
 8005464:	da08      	bge.n	8005478 <__swhatbuf_r+0x24>
 8005466:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800546a:	2200      	movs	r2, #0
 800546c:	602a      	str	r2, [r5, #0]
 800546e:	061a      	lsls	r2, r3, #24
 8005470:	d410      	bmi.n	8005494 <__swhatbuf_r+0x40>
 8005472:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005476:	e00e      	b.n	8005496 <__swhatbuf_r+0x42>
 8005478:	466a      	mov	r2, sp
 800547a:	f000 f8bb 	bl	80055f4 <_fstat_r>
 800547e:	2800      	cmp	r0, #0
 8005480:	dbf1      	blt.n	8005466 <__swhatbuf_r+0x12>
 8005482:	9a01      	ldr	r2, [sp, #4]
 8005484:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005488:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800548c:	425a      	negs	r2, r3
 800548e:	415a      	adcs	r2, r3
 8005490:	602a      	str	r2, [r5, #0]
 8005492:	e7ee      	b.n	8005472 <__swhatbuf_r+0x1e>
 8005494:	2340      	movs	r3, #64	; 0x40
 8005496:	2000      	movs	r0, #0
 8005498:	6023      	str	r3, [r4, #0]
 800549a:	b016      	add	sp, #88	; 0x58
 800549c:	bd70      	pop	{r4, r5, r6, pc}
	...

080054a0 <__smakebuf_r>:
 80054a0:	898b      	ldrh	r3, [r1, #12]
 80054a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80054a4:	079d      	lsls	r5, r3, #30
 80054a6:	4606      	mov	r6, r0
 80054a8:	460c      	mov	r4, r1
 80054aa:	d507      	bpl.n	80054bc <__smakebuf_r+0x1c>
 80054ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80054b0:	6023      	str	r3, [r4, #0]
 80054b2:	6123      	str	r3, [r4, #16]
 80054b4:	2301      	movs	r3, #1
 80054b6:	6163      	str	r3, [r4, #20]
 80054b8:	b002      	add	sp, #8
 80054ba:	bd70      	pop	{r4, r5, r6, pc}
 80054bc:	ab01      	add	r3, sp, #4
 80054be:	466a      	mov	r2, sp
 80054c0:	f7ff ffc8 	bl	8005454 <__swhatbuf_r>
 80054c4:	9900      	ldr	r1, [sp, #0]
 80054c6:	4605      	mov	r5, r0
 80054c8:	4630      	mov	r0, r6
 80054ca:	f7ff fa57 	bl	800497c <_malloc_r>
 80054ce:	b948      	cbnz	r0, 80054e4 <__smakebuf_r+0x44>
 80054d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054d4:	059a      	lsls	r2, r3, #22
 80054d6:	d4ef      	bmi.n	80054b8 <__smakebuf_r+0x18>
 80054d8:	f023 0303 	bic.w	r3, r3, #3
 80054dc:	f043 0302 	orr.w	r3, r3, #2
 80054e0:	81a3      	strh	r3, [r4, #12]
 80054e2:	e7e3      	b.n	80054ac <__smakebuf_r+0xc>
 80054e4:	4b0d      	ldr	r3, [pc, #52]	; (800551c <__smakebuf_r+0x7c>)
 80054e6:	62b3      	str	r3, [r6, #40]	; 0x28
 80054e8:	89a3      	ldrh	r3, [r4, #12]
 80054ea:	6020      	str	r0, [r4, #0]
 80054ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054f0:	81a3      	strh	r3, [r4, #12]
 80054f2:	9b00      	ldr	r3, [sp, #0]
 80054f4:	6163      	str	r3, [r4, #20]
 80054f6:	9b01      	ldr	r3, [sp, #4]
 80054f8:	6120      	str	r0, [r4, #16]
 80054fa:	b15b      	cbz	r3, 8005514 <__smakebuf_r+0x74>
 80054fc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005500:	4630      	mov	r0, r6
 8005502:	f000 f889 	bl	8005618 <_isatty_r>
 8005506:	b128      	cbz	r0, 8005514 <__smakebuf_r+0x74>
 8005508:	89a3      	ldrh	r3, [r4, #12]
 800550a:	f023 0303 	bic.w	r3, r3, #3
 800550e:	f043 0301 	orr.w	r3, r3, #1
 8005512:	81a3      	strh	r3, [r4, #12]
 8005514:	89a0      	ldrh	r0, [r4, #12]
 8005516:	4305      	orrs	r5, r0
 8005518:	81a5      	strh	r5, [r4, #12]
 800551a:	e7cd      	b.n	80054b8 <__smakebuf_r+0x18>
 800551c:	08004795 	.word	0x08004795

08005520 <__malloc_lock>:
 8005520:	4801      	ldr	r0, [pc, #4]	; (8005528 <__malloc_lock+0x8>)
 8005522:	f7ff ba09 	b.w	8004938 <__retarget_lock_acquire_recursive>
 8005526:	bf00      	nop
 8005528:	20000180 	.word	0x20000180

0800552c <__malloc_unlock>:
 800552c:	4801      	ldr	r0, [pc, #4]	; (8005534 <__malloc_unlock+0x8>)
 800552e:	f7ff ba04 	b.w	800493a <__retarget_lock_release_recursive>
 8005532:	bf00      	nop
 8005534:	20000180 	.word	0x20000180

08005538 <_free_r>:
 8005538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800553a:	2900      	cmp	r1, #0
 800553c:	d044      	beq.n	80055c8 <_free_r+0x90>
 800553e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005542:	9001      	str	r0, [sp, #4]
 8005544:	2b00      	cmp	r3, #0
 8005546:	f1a1 0404 	sub.w	r4, r1, #4
 800554a:	bfb8      	it	lt
 800554c:	18e4      	addlt	r4, r4, r3
 800554e:	f7ff ffe7 	bl	8005520 <__malloc_lock>
 8005552:	4a1e      	ldr	r2, [pc, #120]	; (80055cc <_free_r+0x94>)
 8005554:	9801      	ldr	r0, [sp, #4]
 8005556:	6813      	ldr	r3, [r2, #0]
 8005558:	b933      	cbnz	r3, 8005568 <_free_r+0x30>
 800555a:	6063      	str	r3, [r4, #4]
 800555c:	6014      	str	r4, [r2, #0]
 800555e:	b003      	add	sp, #12
 8005560:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005564:	f7ff bfe2 	b.w	800552c <__malloc_unlock>
 8005568:	42a3      	cmp	r3, r4
 800556a:	d908      	bls.n	800557e <_free_r+0x46>
 800556c:	6825      	ldr	r5, [r4, #0]
 800556e:	1961      	adds	r1, r4, r5
 8005570:	428b      	cmp	r3, r1
 8005572:	bf01      	itttt	eq
 8005574:	6819      	ldreq	r1, [r3, #0]
 8005576:	685b      	ldreq	r3, [r3, #4]
 8005578:	1949      	addeq	r1, r1, r5
 800557a:	6021      	streq	r1, [r4, #0]
 800557c:	e7ed      	b.n	800555a <_free_r+0x22>
 800557e:	461a      	mov	r2, r3
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	b10b      	cbz	r3, 8005588 <_free_r+0x50>
 8005584:	42a3      	cmp	r3, r4
 8005586:	d9fa      	bls.n	800557e <_free_r+0x46>
 8005588:	6811      	ldr	r1, [r2, #0]
 800558a:	1855      	adds	r5, r2, r1
 800558c:	42a5      	cmp	r5, r4
 800558e:	d10b      	bne.n	80055a8 <_free_r+0x70>
 8005590:	6824      	ldr	r4, [r4, #0]
 8005592:	4421      	add	r1, r4
 8005594:	1854      	adds	r4, r2, r1
 8005596:	42a3      	cmp	r3, r4
 8005598:	6011      	str	r1, [r2, #0]
 800559a:	d1e0      	bne.n	800555e <_free_r+0x26>
 800559c:	681c      	ldr	r4, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	6053      	str	r3, [r2, #4]
 80055a2:	4421      	add	r1, r4
 80055a4:	6011      	str	r1, [r2, #0]
 80055a6:	e7da      	b.n	800555e <_free_r+0x26>
 80055a8:	d902      	bls.n	80055b0 <_free_r+0x78>
 80055aa:	230c      	movs	r3, #12
 80055ac:	6003      	str	r3, [r0, #0]
 80055ae:	e7d6      	b.n	800555e <_free_r+0x26>
 80055b0:	6825      	ldr	r5, [r4, #0]
 80055b2:	1961      	adds	r1, r4, r5
 80055b4:	428b      	cmp	r3, r1
 80055b6:	bf04      	itt	eq
 80055b8:	6819      	ldreq	r1, [r3, #0]
 80055ba:	685b      	ldreq	r3, [r3, #4]
 80055bc:	6063      	str	r3, [r4, #4]
 80055be:	bf04      	itt	eq
 80055c0:	1949      	addeq	r1, r1, r5
 80055c2:	6021      	streq	r1, [r4, #0]
 80055c4:	6054      	str	r4, [r2, #4]
 80055c6:	e7ca      	b.n	800555e <_free_r+0x26>
 80055c8:	b003      	add	sp, #12
 80055ca:	bd30      	pop	{r4, r5, pc}
 80055cc:	20000184 	.word	0x20000184

080055d0 <_read_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	4d07      	ldr	r5, [pc, #28]	; (80055f0 <_read_r+0x20>)
 80055d4:	4604      	mov	r4, r0
 80055d6:	4608      	mov	r0, r1
 80055d8:	4611      	mov	r1, r2
 80055da:	2200      	movs	r2, #0
 80055dc:	602a      	str	r2, [r5, #0]
 80055de:	461a      	mov	r2, r3
 80055e0:	f7fb ff4e 	bl	8001480 <_read>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_read_r+0x1e>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_read_r+0x1e>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	2000018c 	.word	0x2000018c

080055f4 <_fstat_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	4d07      	ldr	r5, [pc, #28]	; (8005614 <_fstat_r+0x20>)
 80055f8:	2300      	movs	r3, #0
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	4611      	mov	r1, r2
 8005600:	602b      	str	r3, [r5, #0]
 8005602:	f7fb ff82 	bl	800150a <_fstat>
 8005606:	1c43      	adds	r3, r0, #1
 8005608:	d102      	bne.n	8005610 <_fstat_r+0x1c>
 800560a:	682b      	ldr	r3, [r5, #0]
 800560c:	b103      	cbz	r3, 8005610 <_fstat_r+0x1c>
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	bd38      	pop	{r3, r4, r5, pc}
 8005612:	bf00      	nop
 8005614:	2000018c 	.word	0x2000018c

08005618 <_isatty_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d06      	ldr	r5, [pc, #24]	; (8005634 <_isatty_r+0x1c>)
 800561c:	2300      	movs	r3, #0
 800561e:	4604      	mov	r4, r0
 8005620:	4608      	mov	r0, r1
 8005622:	602b      	str	r3, [r5, #0]
 8005624:	f7fb ff81 	bl	800152a <_isatty>
 8005628:	1c43      	adds	r3, r0, #1
 800562a:	d102      	bne.n	8005632 <_isatty_r+0x1a>
 800562c:	682b      	ldr	r3, [r5, #0]
 800562e:	b103      	cbz	r3, 8005632 <_isatty_r+0x1a>
 8005630:	6023      	str	r3, [r4, #0]
 8005632:	bd38      	pop	{r3, r4, r5, pc}
 8005634:	2000018c 	.word	0x2000018c

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
